#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use DOEKBase::DataAPI::sequence::assembly::Types;

# HELPER FUNCTIONS AND STRUCTURES

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_assembly_id_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_assembly_id_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_assembly_id_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_assembly_id_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_assembly_id_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_assembly_id_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_assembly_id_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_assembly_id_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_genome_annotations_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_genome_annotations_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_genome_annotations_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_genome_annotations_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_genome_annotations_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_genome_annotations_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_genome_annotations_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size16 = 0;
          $self->{success} = [];
          my $_etype19 = 0;
          $xfer += $input->readListBegin(\$_etype19, \$_size16);
          for (my $_i20 = 0; $_i20 < $_size16; ++$_i20)
          {
            my $elem21 = undef;
            $xfer += $input->readString(\$elem21);
            push(@{$self->{success}},$elem21);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_genome_annotations_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
      {
        foreach my $iter22 (@{$self->{success}}) 
        {
          $xfer += $output->writeString($iter22);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_external_source_info_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_external_source_info_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_external_source_info_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_external_source_info_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_external_source_info_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_external_source_info_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_external_source_info_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new DOEKBase::DataAPI::sequence::assembly::AssemblyExternalSourceInfo();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_external_source_info_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_stats_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_stats_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_stats_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_stats_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_stats_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_stats_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_stats_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new DOEKBase::DataAPI::sequence::assembly::AssemblyStats();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_stats_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_number_contigs_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_number_contigs_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_number_contigs_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_number_contigs_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_number_contigs_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_number_contigs_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_number_contigs_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_number_contigs_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I64, 0);
    $xfer += $output->writeI64($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_gc_content_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_gc_content_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gc_content_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gc_content_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_gc_content_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_gc_content_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gc_content_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gc_content_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
    $xfer += $output->writeDouble($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_dna_size_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_dna_size_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_dna_size_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_dna_size_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_dna_size_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_dna_size_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_dna_size_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_dna_size_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I64, 0);
    $xfer += $output->writeI64($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_ids_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_ids_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_contig_ids_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_contig_ids_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_ids_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_ids_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_contig_ids_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size23 = 0;
          $self->{success} = [];
          my $_etype26 = 0;
          $xfer += $input->readListBegin(\$_etype26, \$_size23);
          for (my $_i27 = 0; $_i27 < $_size23; ++$_i27)
          {
            my $elem28 = undef;
            $xfer += $input->readString(\$elem28);
            push(@{$self->{success}},$elem28);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_contig_ids_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
      {
        foreach my $iter29 (@{$self->{success}}) 
        {
          $xfer += $output->writeString($iter29);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_lengths_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_lengths_args->mk_accessors( qw( token ref contig_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{contig_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{contig_id_list}) {
      $self->{contig_id_list} = $vals->{contig_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_contig_lengths_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size30 = 0;
          $self->{contig_id_list} = [];
          my $_etype33 = 0;
          $xfer += $input->readListBegin(\$_etype33, \$_size30);
          for (my $_i34 = 0; $_i34 < $_size30; ++$_i34)
          {
            my $elem35 = undef;
            $xfer += $input->readString(\$elem35);
            push(@{$self->{contig_id_list}},$elem35);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_contig_lengths_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contig_id_list}) {
    $xfer += $output->writeFieldBegin('contig_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{contig_id_list}}));
      {
        foreach my $iter36 (@{$self->{contig_id_list}}) 
        {
          $xfer += $output->writeString($iter36);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_lengths_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_lengths_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_contig_lengths_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size37 = 0;
          $self->{success} = {};
          my $_ktype38 = 0;
          my $_vtype39 = 0;
          $xfer += $input->readMapBegin(\$_ktype38, \$_vtype39, \$_size37);
          for (my $_i41 = 0; $_i41 < $_size37; ++$_i41)
          {
            my $key42 = '';
            my $val43 = 0;
            $xfer += $input->readString(\$key42);
            $xfer += $input->readI64(\$val43);
            $self->{success}->{$key42} = $val43;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_contig_lengths_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::I64, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter44,$viter45) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter44);
          $xfer += $output->writeI64($viter45);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_gc_content_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_gc_content_args->mk_accessors( qw( token ref contig_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{contig_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{contig_id_list}) {
      $self->{contig_id_list} = $vals->{contig_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_contig_gc_content_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size46 = 0;
          $self->{contig_id_list} = [];
          my $_etype49 = 0;
          $xfer += $input->readListBegin(\$_etype49, \$_size46);
          for (my $_i50 = 0; $_i50 < $_size46; ++$_i50)
          {
            my $elem51 = undef;
            $xfer += $input->readString(\$elem51);
            push(@{$self->{contig_id_list}},$elem51);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_contig_gc_content_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contig_id_list}) {
    $xfer += $output->writeFieldBegin('contig_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{contig_id_list}}));
      {
        foreach my $iter52 (@{$self->{contig_id_list}}) 
        {
          $xfer += $output->writeString($iter52);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_gc_content_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_gc_content_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_contig_gc_content_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size53 = 0;
          $self->{success} = {};
          my $_ktype54 = 0;
          my $_vtype55 = 0;
          $xfer += $input->readMapBegin(\$_ktype54, \$_vtype55, \$_size53);
          for (my $_i57 = 0; $_i57 < $_size53; ++$_i57)
          {
            my $key58 = '';
            my $val59 = 0;
            $xfer += $input->readString(\$key58);
            $xfer += $input->readI64(\$val59);
            $self->{success}->{$key58} = $val59;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_contig_gc_content_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::I64, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter60,$viter61) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter60);
          $xfer += $output->writeI64($viter61);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contigs_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contigs_args->mk_accessors( qw( token ref contig_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{contig_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{contig_id_list}) {
      $self->{contig_id_list} = $vals->{contig_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_contigs_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size62 = 0;
          $self->{contig_id_list} = [];
          my $_etype65 = 0;
          $xfer += $input->readListBegin(\$_etype65, \$_size62);
          for (my $_i66 = 0; $_i66 < $_size62; ++$_i66)
          {
            my $elem67 = undef;
            $xfer += $input->readString(\$elem67);
            push(@{$self->{contig_id_list}},$elem67);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_contigs_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contig_id_list}) {
    $xfer += $output->writeFieldBegin('contig_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{contig_id_list}}));
      {
        foreach my $iter68 (@{$self->{contig_id_list}}) 
        {
          $xfer += $output->writeString($iter68);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contigs_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contigs_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_contigs_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size69 = 0;
          $self->{success} = {};
          my $_ktype70 = 0;
          my $_vtype71 = 0;
          $xfer += $input->readMapBegin(\$_ktype70, \$_vtype71, \$_size69);
          for (my $_i73 = 0; $_i73 < $_size69; ++$_i73)
          {
            my $key74 = '';
            my $val75 = new DOEKBase::DataAPI::sequence::assembly::AssemblyContig();
            $xfer += $input->readString(\$key74);
            $val75 = new DOEKBase::DataAPI::sequence::assembly::AssemblyContig();
            $xfer += $val75->read($input);
            $self->{success}->{$key74} = $val75;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::sequence::assembly::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::sequence::assembly::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::sequence::assembly::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::sequence::assembly::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_contigs_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRUCT, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter76,$viter77) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter76);
          $xfer += ${viter77}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::sequence::assembly::thrift_serviceIf;

use strict;


sub get_assembly_id{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_genome_annotations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_external_source_info{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_stats{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_number_contigs{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_gc_content{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_dna_size{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_contig_ids{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_contig_lengths{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $contig_id_list = shift;

  die 'implement interface';
}

sub get_contig_gc_content{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $contig_id_list = shift;

  die 'implement interface';
}

sub get_contigs{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $contig_id_list = shift;

  die 'implement interface';
}

package DOEKBase::DataAPI::sequence::assembly::thrift_serviceRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub get_assembly_id{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_assembly_id($token, $ref);
}

sub get_genome_annotations{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_genome_annotations($token, $ref);
}

sub get_external_source_info{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_external_source_info($token, $ref);
}

sub get_stats{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_stats($token, $ref);
}

sub get_number_contigs{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_number_contigs($token, $ref);
}

sub get_gc_content{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_gc_content($token, $ref);
}

sub get_dna_size{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_dna_size($token, $ref);
}

sub get_contig_ids{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_contig_ids($token, $ref);
}

sub get_contig_lengths{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $contig_id_list = ($request->{'contig_id_list'}) ? $request->{'contig_id_list'} : undef;
  return $self->{impl}->get_contig_lengths($token, $ref, $contig_id_list);
}

sub get_contig_gc_content{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $contig_id_list = ($request->{'contig_id_list'}) ? $request->{'contig_id_list'} : undef;
  return $self->{impl}->get_contig_gc_content($token, $ref, $contig_id_list);
}

sub get_contigs{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $contig_id_list = ($request->{'contig_id_list'}) ? $request->{'contig_id_list'} : undef;
  return $self->{impl}->get_contigs($token, $ref, $contig_id_list);
}

package DOEKBase::DataAPI::sequence::assembly::thrift_serviceClient;


use base qw(DOEKBase::DataAPI::sequence::assembly::thrift_serviceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub get_assembly_id{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_assembly_id($token, $ref);
  return $self->recv_get_assembly_id();
}

sub send_get_assembly_id{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_assembly_id', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_assembly_id_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_assembly_id{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_assembly_id_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_assembly_id failed: unknown result";
}
sub get_genome_annotations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_genome_annotations($token, $ref);
  return $self->recv_get_genome_annotations();
}

sub send_get_genome_annotations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_genome_annotations', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_genome_annotations_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_genome_annotations{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_genome_annotations_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_genome_annotations failed: unknown result";
}
sub get_external_source_info{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_external_source_info($token, $ref);
  return $self->recv_get_external_source_info();
}

sub send_get_external_source_info{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_external_source_info', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_external_source_info_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_external_source_info{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_external_source_info_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_external_source_info failed: unknown result";
}
sub get_stats{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_stats($token, $ref);
  return $self->recv_get_stats();
}

sub send_get_stats{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_stats', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_stats_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_stats{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_stats_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_stats failed: unknown result";
}
sub get_number_contigs{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_number_contigs($token, $ref);
  return $self->recv_get_number_contigs();
}

sub send_get_number_contigs{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_number_contigs', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_number_contigs_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_number_contigs{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_number_contigs_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_number_contigs failed: unknown result";
}
sub get_gc_content{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_gc_content($token, $ref);
  return $self->recv_get_gc_content();
}

sub send_get_gc_content{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_gc_content', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_gc_content_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_gc_content{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_gc_content_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_gc_content failed: unknown result";
}
sub get_dna_size{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_dna_size($token, $ref);
  return $self->recv_get_dna_size();
}

sub send_get_dna_size{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_dna_size', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_dna_size_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_dna_size{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_dna_size_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_dna_size failed: unknown result";
}
sub get_contig_ids{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_contig_ids($token, $ref);
  return $self->recv_get_contig_ids();
}

sub send_get_contig_ids{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_contig_ids', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_ids_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_contig_ids{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_ids_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_contig_ids failed: unknown result";
}
sub get_contig_lengths{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $contig_id_list = shift;

    $self->send_get_contig_lengths($token, $ref, $contig_id_list);
  return $self->recv_get_contig_lengths();
}

sub send_get_contig_lengths{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $contig_id_list = shift;

  $self->{output}->writeMessageBegin('get_contig_lengths', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_lengths_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{contig_id_list} = $contig_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_contig_lengths{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_lengths_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_contig_lengths failed: unknown result";
}
sub get_contig_gc_content{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $contig_id_list = shift;

    $self->send_get_contig_gc_content($token, $ref, $contig_id_list);
  return $self->recv_get_contig_gc_content();
}

sub send_get_contig_gc_content{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $contig_id_list = shift;

  $self->{output}->writeMessageBegin('get_contig_gc_content', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_gc_content_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{contig_id_list} = $contig_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_contig_gc_content{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_gc_content_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_contig_gc_content failed: unknown result";
}
sub get_contigs{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $contig_id_list = shift;

    $self->send_get_contigs($token, $ref, $contig_id_list);
  return $self->recv_get_contigs();
}

sub send_get_contigs{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $contig_id_list = shift;

  $self->{output}->writeMessageBegin('get_contigs', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contigs_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{contig_id_list} = $contig_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_contigs{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contigs_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_contigs failed: unknown result";
}
package DOEKBase::DataAPI::sequence::assembly::thrift_serviceProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_get_assembly_id {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_assembly_id_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_assembly_id_result();
    eval {
      $result->{success} = $self->{handler}->get_assembly_id($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_assembly_id', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_genome_annotations {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_genome_annotations_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_genome_annotations_result();
    eval {
      $result->{success} = $self->{handler}->get_genome_annotations($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_genome_annotations', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_external_source_info {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_external_source_info_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_external_source_info_result();
    eval {
      $result->{success} = $self->{handler}->get_external_source_info($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_external_source_info', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_stats {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_stats_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_stats_result();
    eval {
      $result->{success} = $self->{handler}->get_stats($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_stats', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_number_contigs {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_number_contigs_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_number_contigs_result();
    eval {
      $result->{success} = $self->{handler}->get_number_contigs($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_number_contigs', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_gc_content {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_gc_content_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_gc_content_result();
    eval {
      $result->{success} = $self->{handler}->get_gc_content($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_gc_content', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_dna_size {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_dna_size_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_dna_size_result();
    eval {
      $result->{success} = $self->{handler}->get_dna_size($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_dna_size', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_contig_ids {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_ids_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_ids_result();
    eval {
      $result->{success} = $self->{handler}->get_contig_ids($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_contig_ids', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_contig_lengths {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_lengths_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_lengths_result();
    eval {
      $result->{success} = $self->{handler}->get_contig_lengths($args->token, $args->ref, $args->contig_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_contig_lengths', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_contig_gc_content {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_gc_content_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contig_gc_content_result();
    eval {
      $result->{success} = $self->{handler}->get_contig_gc_content($args->token, $args->ref, $args->contig_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_contig_gc_content', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_contigs {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contigs_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::sequence::assembly::thrift_service_get_contigs_result();
    eval {
      $result->{success} = $self->{handler}->get_contigs($args->token, $args->ref, $args->contig_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::sequence::assembly::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_contigs', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
