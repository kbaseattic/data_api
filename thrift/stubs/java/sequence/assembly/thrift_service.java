/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-20")
public class thrift_service {

  public interface Iface {

    /**
     * Retrieve Assembly ID.
     * 
     * @param token
     * @param ref
     */
    public String get_assembly_id(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve associated GenomeAnnotation objects.
     * 
     * @return List of GenomeAnnotation object references
     * 
     * 
     * @param token
     * @param ref
     */
    public List<String> get_genome_annotations(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the external source information for this Assembly.
     * 
     * @return Metadata about the external source
     * 
     * @param token
     * @param ref
     */
    public AssemblyExternalSourceInfo get_external_source_info(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the derived statistical information about this Assembly.
     * 
     * 
     * @param token
     * @param ref
     */
    public AssemblyStats get_stats(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the number of contigs for this Assembly.
     * 
     * @return Total number of contiguous sequences.
     * 
     * @param token
     * @param ref
     */
    public long get_number_contigs(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the total GC content for this Assembly.
     * 
     * @return Proportion of GC content, between 0 and 1.
     * 
     * @param token
     * @param ref
     */
    public double get_gc_content(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the total DNA size for this Assembly.
     * 
     * @return Total DNA size
     * 
     * @param token
     * @param ref
     */
    public long get_dna_size(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the contig identifiers for this Assembly.
     * 
     * @return List of contig IDs.
     * 
     * @param token
     * @param ref
     */
    public List<String> get_contig_ids(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the lengths of the contigs in this Assembly.
     * 
     * @return Mapping of contig ID to contig length.
     * 
     * @param token
     * @param ref
     * @param contig_id_list
     */
    public Map<String,Long> get_contig_lengths(String token, String ref, List<String> contig_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the gc content for contigs in this Assembly.
     * 
     * @return Mapping of contig IDs to GC content proportion.
     * 
     * @param token
     * @param ref
     * @param contig_id_list
     */
    public Map<String,Double> get_contig_gc_content(String token, String ref, List<String> contig_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve all the data for the contigs in this Assembly.
     * 
     * @return Mapping of contig ID to details for that contig.
     * 
     * @param token
     * @param ref
     * @param contig_id_list
     */
    public Map<String,AssemblyContig> get_contigs(String token, String ref, List<String> contig_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Get reference to FASTA data
     * 
     * @param token
     * @param ref
     */
    public String to_fasta(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void get_assembly_id(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_genome_annotations(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_external_source_info(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_stats(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_number_contigs(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_gc_content(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_dna_size(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_contig_ids(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_contig_lengths(String token, String ref, List<String> contig_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_contig_gc_content(String token, String ref, List<String> contig_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_contigs(String token, String ref, List<String> contig_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void to_fasta(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String get_assembly_id(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_assembly_id(token, ref);
      return recv_get_assembly_id();
    }

    public void send_get_assembly_id(String token, String ref) throws org.apache.thrift.TException
    {
      get_assembly_id_args args = new get_assembly_id_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_assembly_id", args);
    }

    public String recv_get_assembly_id() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_assembly_id_result result = new get_assembly_id_result();
      receiveBase(result, "get_assembly_id");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_assembly_id failed: unknown result");
    }

    public List<String> get_genome_annotations(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_genome_annotations(token, ref);
      return recv_get_genome_annotations();
    }

    public void send_get_genome_annotations(String token, String ref) throws org.apache.thrift.TException
    {
      get_genome_annotations_args args = new get_genome_annotations_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_genome_annotations", args);
    }

    public List<String> recv_get_genome_annotations() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_genome_annotations_result result = new get_genome_annotations_result();
      receiveBase(result, "get_genome_annotations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_genome_annotations failed: unknown result");
    }

    public AssemblyExternalSourceInfo get_external_source_info(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_external_source_info(token, ref);
      return recv_get_external_source_info();
    }

    public void send_get_external_source_info(String token, String ref) throws org.apache.thrift.TException
    {
      get_external_source_info_args args = new get_external_source_info_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_external_source_info", args);
    }

    public AssemblyExternalSourceInfo recv_get_external_source_info() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_external_source_info_result result = new get_external_source_info_result();
      receiveBase(result, "get_external_source_info");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_external_source_info failed: unknown result");
    }

    public AssemblyStats get_stats(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_stats(token, ref);
      return recv_get_stats();
    }

    public void send_get_stats(String token, String ref) throws org.apache.thrift.TException
    {
      get_stats_args args = new get_stats_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_stats", args);
    }

    public AssemblyStats recv_get_stats() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_stats_result result = new get_stats_result();
      receiveBase(result, "get_stats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_stats failed: unknown result");
    }

    public long get_number_contigs(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_number_contigs(token, ref);
      return recv_get_number_contigs();
    }

    public void send_get_number_contigs(String token, String ref) throws org.apache.thrift.TException
    {
      get_number_contigs_args args = new get_number_contigs_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_number_contigs", args);
    }

    public long recv_get_number_contigs() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_number_contigs_result result = new get_number_contigs_result();
      receiveBase(result, "get_number_contigs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_number_contigs failed: unknown result");
    }

    public double get_gc_content(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_gc_content(token, ref);
      return recv_get_gc_content();
    }

    public void send_get_gc_content(String token, String ref) throws org.apache.thrift.TException
    {
      get_gc_content_args args = new get_gc_content_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_gc_content", args);
    }

    public double recv_get_gc_content() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_gc_content_result result = new get_gc_content_result();
      receiveBase(result, "get_gc_content");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_gc_content failed: unknown result");
    }

    public long get_dna_size(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_dna_size(token, ref);
      return recv_get_dna_size();
    }

    public void send_get_dna_size(String token, String ref) throws org.apache.thrift.TException
    {
      get_dna_size_args args = new get_dna_size_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_dna_size", args);
    }

    public long recv_get_dna_size() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_dna_size_result result = new get_dna_size_result();
      receiveBase(result, "get_dna_size");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_dna_size failed: unknown result");
    }

    public List<String> get_contig_ids(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_contig_ids(token, ref);
      return recv_get_contig_ids();
    }

    public void send_get_contig_ids(String token, String ref) throws org.apache.thrift.TException
    {
      get_contig_ids_args args = new get_contig_ids_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_contig_ids", args);
    }

    public List<String> recv_get_contig_ids() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_contig_ids_result result = new get_contig_ids_result();
      receiveBase(result, "get_contig_ids");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_contig_ids failed: unknown result");
    }

    public Map<String,Long> get_contig_lengths(String token, String ref, List<String> contig_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_contig_lengths(token, ref, contig_id_list);
      return recv_get_contig_lengths();
    }

    public void send_get_contig_lengths(String token, String ref, List<String> contig_id_list) throws org.apache.thrift.TException
    {
      get_contig_lengths_args args = new get_contig_lengths_args();
      args.setToken(token);
      args.setRef(ref);
      args.setContig_id_list(contig_id_list);
      sendBase("get_contig_lengths", args);
    }

    public Map<String,Long> recv_get_contig_lengths() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_contig_lengths_result result = new get_contig_lengths_result();
      receiveBase(result, "get_contig_lengths");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_contig_lengths failed: unknown result");
    }

    public Map<String,Double> get_contig_gc_content(String token, String ref, List<String> contig_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_contig_gc_content(token, ref, contig_id_list);
      return recv_get_contig_gc_content();
    }

    public void send_get_contig_gc_content(String token, String ref, List<String> contig_id_list) throws org.apache.thrift.TException
    {
      get_contig_gc_content_args args = new get_contig_gc_content_args();
      args.setToken(token);
      args.setRef(ref);
      args.setContig_id_list(contig_id_list);
      sendBase("get_contig_gc_content", args);
    }

    public Map<String,Double> recv_get_contig_gc_content() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_contig_gc_content_result result = new get_contig_gc_content_result();
      receiveBase(result, "get_contig_gc_content");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_contig_gc_content failed: unknown result");
    }

    public Map<String,AssemblyContig> get_contigs(String token, String ref, List<String> contig_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_contigs(token, ref, contig_id_list);
      return recv_get_contigs();
    }

    public void send_get_contigs(String token, String ref, List<String> contig_id_list) throws org.apache.thrift.TException
    {
      get_contigs_args args = new get_contigs_args();
      args.setToken(token);
      args.setRef(ref);
      args.setContig_id_list(contig_id_list);
      sendBase("get_contigs", args);
    }

    public Map<String,AssemblyContig> recv_get_contigs() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_contigs_result result = new get_contigs_result();
      receiveBase(result, "get_contigs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_contigs failed: unknown result");
    }

    public String to_fasta(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_to_fasta(token, ref);
      return recv_to_fasta();
    }

    public void send_to_fasta(String token, String ref) throws org.apache.thrift.TException
    {
      to_fasta_args args = new to_fasta_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("to_fasta", args);
    }

    public String recv_to_fasta() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      to_fasta_result result = new to_fasta_result();
      receiveBase(result, "to_fasta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "to_fasta failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void get_assembly_id(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_assembly_id_call method_call = new get_assembly_id_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_assembly_id_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_assembly_id_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_assembly_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_assembly_id_args args = new get_assembly_id_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_assembly_id();
      }
    }

    public void get_genome_annotations(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_genome_annotations_call method_call = new get_genome_annotations_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_genome_annotations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_genome_annotations_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_genome_annotations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_genome_annotations_args args = new get_genome_annotations_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_genome_annotations();
      }
    }

    public void get_external_source_info(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_external_source_info_call method_call = new get_external_source_info_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_external_source_info_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_external_source_info_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_external_source_info", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_external_source_info_args args = new get_external_source_info_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AssemblyExternalSourceInfo getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_external_source_info();
      }
    }

    public void get_stats(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_stats_call method_call = new get_stats_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_stats_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_stats_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_stats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_stats_args args = new get_stats_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AssemblyStats getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_stats();
      }
    }

    public void get_number_contigs(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_number_contigs_call method_call = new get_number_contigs_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_number_contigs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_number_contigs_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_number_contigs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_number_contigs_args args = new get_number_contigs_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_number_contigs();
      }
    }

    public void get_gc_content(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_gc_content_call method_call = new get_gc_content_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_gc_content_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_gc_content_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_gc_content", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_gc_content_args args = new get_gc_content_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_gc_content();
      }
    }

    public void get_dna_size(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_dna_size_call method_call = new get_dna_size_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_dna_size_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_dna_size_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_dna_size", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_dna_size_args args = new get_dna_size_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_dna_size();
      }
    }

    public void get_contig_ids(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_contig_ids_call method_call = new get_contig_ids_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_contig_ids_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_contig_ids_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_contig_ids", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_contig_ids_args args = new get_contig_ids_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_contig_ids();
      }
    }

    public void get_contig_lengths(String token, String ref, List<String> contig_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_contig_lengths_call method_call = new get_contig_lengths_call(token, ref, contig_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_contig_lengths_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> contig_id_list;
      public get_contig_lengths_call(String token, String ref, List<String> contig_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.contig_id_list = contig_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_contig_lengths", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_contig_lengths_args args = new get_contig_lengths_args();
        args.setToken(token);
        args.setRef(ref);
        args.setContig_id_list(contig_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_contig_lengths();
      }
    }

    public void get_contig_gc_content(String token, String ref, List<String> contig_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_contig_gc_content_call method_call = new get_contig_gc_content_call(token, ref, contig_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_contig_gc_content_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> contig_id_list;
      public get_contig_gc_content_call(String token, String ref, List<String> contig_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.contig_id_list = contig_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_contig_gc_content", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_contig_gc_content_args args = new get_contig_gc_content_args();
        args.setToken(token);
        args.setRef(ref);
        args.setContig_id_list(contig_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Double> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_contig_gc_content();
      }
    }

    public void get_contigs(String token, String ref, List<String> contig_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_contigs_call method_call = new get_contigs_call(token, ref, contig_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_contigs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> contig_id_list;
      public get_contigs_call(String token, String ref, List<String> contig_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.contig_id_list = contig_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_contigs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_contigs_args args = new get_contigs_args();
        args.setToken(token);
        args.setRef(ref);
        args.setContig_id_list(contig_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,AssemblyContig> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_contigs();
      }
    }

    public void to_fasta(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      to_fasta_call method_call = new to_fasta_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class to_fasta_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public to_fasta_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("to_fasta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        to_fasta_args args = new to_fasta_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_to_fasta();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("get_assembly_id", new get_assembly_id());
      processMap.put("get_genome_annotations", new get_genome_annotations());
      processMap.put("get_external_source_info", new get_external_source_info());
      processMap.put("get_stats", new get_stats());
      processMap.put("get_number_contigs", new get_number_contigs());
      processMap.put("get_gc_content", new get_gc_content());
      processMap.put("get_dna_size", new get_dna_size());
      processMap.put("get_contig_ids", new get_contig_ids());
      processMap.put("get_contig_lengths", new get_contig_lengths());
      processMap.put("get_contig_gc_content", new get_contig_gc_content());
      processMap.put("get_contigs", new get_contigs());
      processMap.put("to_fasta", new to_fasta());
      return processMap;
    }

    public static class get_assembly_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_assembly_id_args> {
      public get_assembly_id() {
        super("get_assembly_id");
      }

      public get_assembly_id_args getEmptyArgsInstance() {
        return new get_assembly_id_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_assembly_id_result getResult(I iface, get_assembly_id_args args) throws org.apache.thrift.TException {
        get_assembly_id_result result = new get_assembly_id_result();
        try {
          result.success = iface.get_assembly_id(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_genome_annotations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_genome_annotations_args> {
      public get_genome_annotations() {
        super("get_genome_annotations");
      }

      public get_genome_annotations_args getEmptyArgsInstance() {
        return new get_genome_annotations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_genome_annotations_result getResult(I iface, get_genome_annotations_args args) throws org.apache.thrift.TException {
        get_genome_annotations_result result = new get_genome_annotations_result();
        try {
          result.success = iface.get_genome_annotations(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_external_source_info<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_external_source_info_args> {
      public get_external_source_info() {
        super("get_external_source_info");
      }

      public get_external_source_info_args getEmptyArgsInstance() {
        return new get_external_source_info_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_external_source_info_result getResult(I iface, get_external_source_info_args args) throws org.apache.thrift.TException {
        get_external_source_info_result result = new get_external_source_info_result();
        try {
          result.success = iface.get_external_source_info(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_stats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_stats_args> {
      public get_stats() {
        super("get_stats");
      }

      public get_stats_args getEmptyArgsInstance() {
        return new get_stats_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_stats_result getResult(I iface, get_stats_args args) throws org.apache.thrift.TException {
        get_stats_result result = new get_stats_result();
        try {
          result.success = iface.get_stats(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_number_contigs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_number_contigs_args> {
      public get_number_contigs() {
        super("get_number_contigs");
      }

      public get_number_contigs_args getEmptyArgsInstance() {
        return new get_number_contigs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_number_contigs_result getResult(I iface, get_number_contigs_args args) throws org.apache.thrift.TException {
        get_number_contigs_result result = new get_number_contigs_result();
        try {
          result.success = iface.get_number_contigs(args.token, args.ref);
          result.setSuccessIsSet(true);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_gc_content<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_gc_content_args> {
      public get_gc_content() {
        super("get_gc_content");
      }

      public get_gc_content_args getEmptyArgsInstance() {
        return new get_gc_content_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_gc_content_result getResult(I iface, get_gc_content_args args) throws org.apache.thrift.TException {
        get_gc_content_result result = new get_gc_content_result();
        try {
          result.success = iface.get_gc_content(args.token, args.ref);
          result.setSuccessIsSet(true);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_dna_size<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_dna_size_args> {
      public get_dna_size() {
        super("get_dna_size");
      }

      public get_dna_size_args getEmptyArgsInstance() {
        return new get_dna_size_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_dna_size_result getResult(I iface, get_dna_size_args args) throws org.apache.thrift.TException {
        get_dna_size_result result = new get_dna_size_result();
        try {
          result.success = iface.get_dna_size(args.token, args.ref);
          result.setSuccessIsSet(true);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_contig_ids<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_contig_ids_args> {
      public get_contig_ids() {
        super("get_contig_ids");
      }

      public get_contig_ids_args getEmptyArgsInstance() {
        return new get_contig_ids_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_contig_ids_result getResult(I iface, get_contig_ids_args args) throws org.apache.thrift.TException {
        get_contig_ids_result result = new get_contig_ids_result();
        try {
          result.success = iface.get_contig_ids(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_contig_lengths<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_contig_lengths_args> {
      public get_contig_lengths() {
        super("get_contig_lengths");
      }

      public get_contig_lengths_args getEmptyArgsInstance() {
        return new get_contig_lengths_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_contig_lengths_result getResult(I iface, get_contig_lengths_args args) throws org.apache.thrift.TException {
        get_contig_lengths_result result = new get_contig_lengths_result();
        try {
          result.success = iface.get_contig_lengths(args.token, args.ref, args.contig_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_contig_gc_content<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_contig_gc_content_args> {
      public get_contig_gc_content() {
        super("get_contig_gc_content");
      }

      public get_contig_gc_content_args getEmptyArgsInstance() {
        return new get_contig_gc_content_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_contig_gc_content_result getResult(I iface, get_contig_gc_content_args args) throws org.apache.thrift.TException {
        get_contig_gc_content_result result = new get_contig_gc_content_result();
        try {
          result.success = iface.get_contig_gc_content(args.token, args.ref, args.contig_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_contigs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_contigs_args> {
      public get_contigs() {
        super("get_contigs");
      }

      public get_contigs_args getEmptyArgsInstance() {
        return new get_contigs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_contigs_result getResult(I iface, get_contigs_args args) throws org.apache.thrift.TException {
        get_contigs_result result = new get_contigs_result();
        try {
          result.success = iface.get_contigs(args.token, args.ref, args.contig_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class to_fasta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, to_fasta_args> {
      public to_fasta() {
        super("to_fasta");
      }

      public to_fasta_args getEmptyArgsInstance() {
        return new to_fasta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public to_fasta_result getResult(I iface, to_fasta_args args) throws org.apache.thrift.TException {
        to_fasta_result result = new to_fasta_result();
        try {
          result.success = iface.to_fasta(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("get_assembly_id", new get_assembly_id());
      processMap.put("get_genome_annotations", new get_genome_annotations());
      processMap.put("get_external_source_info", new get_external_source_info());
      processMap.put("get_stats", new get_stats());
      processMap.put("get_number_contigs", new get_number_contigs());
      processMap.put("get_gc_content", new get_gc_content());
      processMap.put("get_dna_size", new get_dna_size());
      processMap.put("get_contig_ids", new get_contig_ids());
      processMap.put("get_contig_lengths", new get_contig_lengths());
      processMap.put("get_contig_gc_content", new get_contig_gc_content());
      processMap.put("get_contigs", new get_contigs());
      processMap.put("to_fasta", new to_fasta());
      return processMap;
    }

    public static class get_assembly_id<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_assembly_id_args, String> {
      public get_assembly_id() {
        super("get_assembly_id");
      }

      public get_assembly_id_args getEmptyArgsInstance() {
        return new get_assembly_id_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_assembly_id_result result = new get_assembly_id_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_assembly_id_result result = new get_assembly_id_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_assembly_id_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_assembly_id(args.token, args.ref,resultHandler);
      }
    }

    public static class get_genome_annotations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_genome_annotations_args, List<String>> {
      public get_genome_annotations() {
        super("get_genome_annotations");
      }

      public get_genome_annotations_args getEmptyArgsInstance() {
        return new get_genome_annotations_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            get_genome_annotations_result result = new get_genome_annotations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_genome_annotations_result result = new get_genome_annotations_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_genome_annotations_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.get_genome_annotations(args.token, args.ref,resultHandler);
      }
    }

    public static class get_external_source_info<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_external_source_info_args, AssemblyExternalSourceInfo> {
      public get_external_source_info() {
        super("get_external_source_info");
      }

      public get_external_source_info_args getEmptyArgsInstance() {
        return new get_external_source_info_args();
      }

      public AsyncMethodCallback<AssemblyExternalSourceInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AssemblyExternalSourceInfo>() { 
          public void onComplete(AssemblyExternalSourceInfo o) {
            get_external_source_info_result result = new get_external_source_info_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_external_source_info_result result = new get_external_source_info_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_external_source_info_args args, org.apache.thrift.async.AsyncMethodCallback<AssemblyExternalSourceInfo> resultHandler) throws TException {
        iface.get_external_source_info(args.token, args.ref,resultHandler);
      }
    }

    public static class get_stats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_stats_args, AssemblyStats> {
      public get_stats() {
        super("get_stats");
      }

      public get_stats_args getEmptyArgsInstance() {
        return new get_stats_args();
      }

      public AsyncMethodCallback<AssemblyStats> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AssemblyStats>() { 
          public void onComplete(AssemblyStats o) {
            get_stats_result result = new get_stats_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_stats_result result = new get_stats_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_stats_args args, org.apache.thrift.async.AsyncMethodCallback<AssemblyStats> resultHandler) throws TException {
        iface.get_stats(args.token, args.ref,resultHandler);
      }
    }

    public static class get_number_contigs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_number_contigs_args, Long> {
      public get_number_contigs() {
        super("get_number_contigs");
      }

      public get_number_contigs_args getEmptyArgsInstance() {
        return new get_number_contigs_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            get_number_contigs_result result = new get_number_contigs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_number_contigs_result result = new get_number_contigs_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_number_contigs_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.get_number_contigs(args.token, args.ref,resultHandler);
      }
    }

    public static class get_gc_content<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_gc_content_args, Double> {
      public get_gc_content() {
        super("get_gc_content");
      }

      public get_gc_content_args getEmptyArgsInstance() {
        return new get_gc_content_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            get_gc_content_result result = new get_gc_content_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_gc_content_result result = new get_gc_content_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_gc_content_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.get_gc_content(args.token, args.ref,resultHandler);
      }
    }

    public static class get_dna_size<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_dna_size_args, Long> {
      public get_dna_size() {
        super("get_dna_size");
      }

      public get_dna_size_args getEmptyArgsInstance() {
        return new get_dna_size_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            get_dna_size_result result = new get_dna_size_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_dna_size_result result = new get_dna_size_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_dna_size_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.get_dna_size(args.token, args.ref,resultHandler);
      }
    }

    public static class get_contig_ids<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_contig_ids_args, List<String>> {
      public get_contig_ids() {
        super("get_contig_ids");
      }

      public get_contig_ids_args getEmptyArgsInstance() {
        return new get_contig_ids_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            get_contig_ids_result result = new get_contig_ids_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_contig_ids_result result = new get_contig_ids_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_contig_ids_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.get_contig_ids(args.token, args.ref,resultHandler);
      }
    }

    public static class get_contig_lengths<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_contig_lengths_args, Map<String,Long>> {
      public get_contig_lengths() {
        super("get_contig_lengths");
      }

      public get_contig_lengths_args getEmptyArgsInstance() {
        return new get_contig_lengths_args();
      }

      public AsyncMethodCallback<Map<String,Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Long>>() { 
          public void onComplete(Map<String,Long> o) {
            get_contig_lengths_result result = new get_contig_lengths_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_contig_lengths_result result = new get_contig_lengths_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_contig_lengths_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Long>> resultHandler) throws TException {
        iface.get_contig_lengths(args.token, args.ref, args.contig_id_list,resultHandler);
      }
    }

    public static class get_contig_gc_content<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_contig_gc_content_args, Map<String,Double>> {
      public get_contig_gc_content() {
        super("get_contig_gc_content");
      }

      public get_contig_gc_content_args getEmptyArgsInstance() {
        return new get_contig_gc_content_args();
      }

      public AsyncMethodCallback<Map<String,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Double>>() { 
          public void onComplete(Map<String,Double> o) {
            get_contig_gc_content_result result = new get_contig_gc_content_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_contig_gc_content_result result = new get_contig_gc_content_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_contig_gc_content_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Double>> resultHandler) throws TException {
        iface.get_contig_gc_content(args.token, args.ref, args.contig_id_list,resultHandler);
      }
    }

    public static class get_contigs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_contigs_args, Map<String,AssemblyContig>> {
      public get_contigs() {
        super("get_contigs");
      }

      public get_contigs_args getEmptyArgsInstance() {
        return new get_contigs_args();
      }

      public AsyncMethodCallback<Map<String,AssemblyContig>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,AssemblyContig>>() { 
          public void onComplete(Map<String,AssemblyContig> o) {
            get_contigs_result result = new get_contigs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_contigs_result result = new get_contigs_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_contigs_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,AssemblyContig>> resultHandler) throws TException {
        iface.get_contigs(args.token, args.ref, args.contig_id_list,resultHandler);
      }
    }

    public static class to_fasta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, to_fasta_args, String> {
      public to_fasta() {
        super("to_fasta");
      }

      public to_fasta_args getEmptyArgsInstance() {
        return new to_fasta_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            to_fasta_result result = new to_fasta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            to_fasta_result result = new to_fasta_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, to_fasta_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.to_fasta(args.token, args.ref,resultHandler);
      }
    }

  }

  public static class get_assembly_id_args implements org.apache.thrift.TBase<get_assembly_id_args, get_assembly_id_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_assembly_id_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_assembly_id_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_assembly_id_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_assembly_id_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_assembly_id_args.class, metaDataMap);
    }

    public get_assembly_id_args() {
    }

    public get_assembly_id_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_assembly_id_args(get_assembly_id_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_assembly_id_args deepCopy() {
      return new get_assembly_id_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_assembly_id_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_assembly_id_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_assembly_id_args)
        return this.equals((get_assembly_id_args)that);
      return false;
    }

    public boolean equals(get_assembly_id_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_assembly_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_assembly_id_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_assembly_id_argsStandardSchemeFactory implements SchemeFactory {
      public get_assembly_id_argsStandardScheme getScheme() {
        return new get_assembly_id_argsStandardScheme();
      }
    }

    private static class get_assembly_id_argsStandardScheme extends StandardScheme<get_assembly_id_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_assembly_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_assembly_id_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_assembly_id_argsTupleSchemeFactory implements SchemeFactory {
      public get_assembly_id_argsTupleScheme getScheme() {
        return new get_assembly_id_argsTupleScheme();
      }
    }

    private static class get_assembly_id_argsTupleScheme extends TupleScheme<get_assembly_id_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_assembly_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_assembly_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_assembly_id_result implements org.apache.thrift.TBase<get_assembly_id_result, get_assembly_id_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_assembly_id_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_assembly_id_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_assembly_id_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_assembly_id_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_assembly_id_result.class, metaDataMap);
    }

    public get_assembly_id_result() {
    }

    public get_assembly_id_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_assembly_id_result(get_assembly_id_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_assembly_id_result deepCopy() {
      return new get_assembly_id_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_assembly_id_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_assembly_id_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_assembly_id_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_assembly_id_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_assembly_id_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_assembly_id_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_assembly_id_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_assembly_id_result)
        return this.equals((get_assembly_id_result)that);
      return false;
    }

    public boolean equals(get_assembly_id_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_assembly_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_assembly_id_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_assembly_id_resultStandardSchemeFactory implements SchemeFactory {
      public get_assembly_id_resultStandardScheme getScheme() {
        return new get_assembly_id_resultStandardScheme();
      }
    }

    private static class get_assembly_id_resultStandardScheme extends StandardScheme<get_assembly_id_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_assembly_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_assembly_id_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_assembly_id_resultTupleSchemeFactory implements SchemeFactory {
      public get_assembly_id_resultTupleScheme getScheme() {
        return new get_assembly_id_resultTupleScheme();
      }
    }

    private static class get_assembly_id_resultTupleScheme extends TupleScheme<get_assembly_id_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_assembly_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_assembly_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_genome_annotations_args implements org.apache.thrift.TBase<get_genome_annotations_args, get_genome_annotations_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_genome_annotations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_genome_annotations_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_genome_annotations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_genome_annotations_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_genome_annotations_args.class, metaDataMap);
    }

    public get_genome_annotations_args() {
    }

    public get_genome_annotations_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_genome_annotations_args(get_genome_annotations_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_genome_annotations_args deepCopy() {
      return new get_genome_annotations_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_genome_annotations_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_genome_annotations_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_genome_annotations_args)
        return this.equals((get_genome_annotations_args)that);
      return false;
    }

    public boolean equals(get_genome_annotations_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_genome_annotations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_genome_annotations_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_genome_annotations_argsStandardSchemeFactory implements SchemeFactory {
      public get_genome_annotations_argsStandardScheme getScheme() {
        return new get_genome_annotations_argsStandardScheme();
      }
    }

    private static class get_genome_annotations_argsStandardScheme extends StandardScheme<get_genome_annotations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_genome_annotations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_genome_annotations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_genome_annotations_argsTupleSchemeFactory implements SchemeFactory {
      public get_genome_annotations_argsTupleScheme getScheme() {
        return new get_genome_annotations_argsTupleScheme();
      }
    }

    private static class get_genome_annotations_argsTupleScheme extends TupleScheme<get_genome_annotations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_genome_annotations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_genome_annotations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_genome_annotations_result implements org.apache.thrift.TBase<get_genome_annotations_result, get_genome_annotations_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_genome_annotations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_genome_annotations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_genome_annotations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_genome_annotations_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "ObjectReference"))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_genome_annotations_result.class, metaDataMap);
    }

    public get_genome_annotations_result() {
    }

    public get_genome_annotations_result(
      List<String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_genome_annotations_result(get_genome_annotations_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success.size());
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_genome_annotations_result deepCopy() {
      return new get_genome_annotations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_genome_annotations_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_genome_annotations_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_genome_annotations_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_genome_annotations_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_genome_annotations_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_genome_annotations_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_genome_annotations_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_genome_annotations_result)
        return this.equals((get_genome_annotations_result)that);
      return false;
    }

    public boolean equals(get_genome_annotations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_genome_annotations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_genome_annotations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_genome_annotations_resultStandardSchemeFactory implements SchemeFactory {
      public get_genome_annotations_resultStandardScheme getScheme() {
        return new get_genome_annotations_resultStandardScheme();
      }
    }

    private static class get_genome_annotations_resultStandardScheme extends StandardScheme<get_genome_annotations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_genome_annotations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list18.size);
                  String _elem19;
                  for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                  {
                    _elem19 = iprot.readString();
                    struct.success.add(_elem19);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_genome_annotations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter21 : struct.success)
            {
              oprot.writeString(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_genome_annotations_resultTupleSchemeFactory implements SchemeFactory {
      public get_genome_annotations_resultTupleScheme getScheme() {
        return new get_genome_annotations_resultTupleScheme();
      }
    }

    private static class get_genome_annotations_resultTupleScheme extends TupleScheme<get_genome_annotations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_genome_annotations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter22 : struct.success)
            {
              oprot.writeString(_iter22);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_genome_annotations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list23.size);
            String _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              _elem24 = iprot.readString();
              struct.success.add(_elem24);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_external_source_info_args implements org.apache.thrift.TBase<get_external_source_info_args, get_external_source_info_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_external_source_info_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_external_source_info_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_external_source_info_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_external_source_info_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_external_source_info_args.class, metaDataMap);
    }

    public get_external_source_info_args() {
    }

    public get_external_source_info_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_external_source_info_args(get_external_source_info_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_external_source_info_args deepCopy() {
      return new get_external_source_info_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_external_source_info_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_external_source_info_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_external_source_info_args)
        return this.equals((get_external_source_info_args)that);
      return false;
    }

    public boolean equals(get_external_source_info_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_external_source_info_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_external_source_info_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_external_source_info_argsStandardSchemeFactory implements SchemeFactory {
      public get_external_source_info_argsStandardScheme getScheme() {
        return new get_external_source_info_argsStandardScheme();
      }
    }

    private static class get_external_source_info_argsStandardScheme extends StandardScheme<get_external_source_info_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_external_source_info_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_external_source_info_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_external_source_info_argsTupleSchemeFactory implements SchemeFactory {
      public get_external_source_info_argsTupleScheme getScheme() {
        return new get_external_source_info_argsTupleScheme();
      }
    }

    private static class get_external_source_info_argsTupleScheme extends TupleScheme<get_external_source_info_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_external_source_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_external_source_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_external_source_info_result implements org.apache.thrift.TBase<get_external_source_info_result, get_external_source_info_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_external_source_info_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_external_source_info_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_external_source_info_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_external_source_info_resultTupleSchemeFactory());
    }

    public AssemblyExternalSourceInfo success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssemblyExternalSourceInfo.class)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_external_source_info_result.class, metaDataMap);
    }

    public get_external_source_info_result() {
    }

    public get_external_source_info_result(
      AssemblyExternalSourceInfo success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_external_source_info_result(get_external_source_info_result other) {
      if (other.isSetSuccess()) {
        this.success = new AssemblyExternalSourceInfo(other.success);
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_external_source_info_result deepCopy() {
      return new get_external_source_info_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public AssemblyExternalSourceInfo getSuccess() {
      return this.success;
    }

    public get_external_source_info_result setSuccess(AssemblyExternalSourceInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_external_source_info_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_external_source_info_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_external_source_info_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_external_source_info_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_external_source_info_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_external_source_info_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AssemblyExternalSourceInfo)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_external_source_info_result)
        return this.equals((get_external_source_info_result)that);
      return false;
    }

    public boolean equals(get_external_source_info_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_external_source_info_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_external_source_info_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_external_source_info_resultStandardSchemeFactory implements SchemeFactory {
      public get_external_source_info_resultStandardScheme getScheme() {
        return new get_external_source_info_resultStandardScheme();
      }
    }

    private static class get_external_source_info_resultStandardScheme extends StandardScheme<get_external_source_info_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_external_source_info_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AssemblyExternalSourceInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_external_source_info_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_external_source_info_resultTupleSchemeFactory implements SchemeFactory {
      public get_external_source_info_resultTupleScheme getScheme() {
        return new get_external_source_info_resultTupleScheme();
      }
    }

    private static class get_external_source_info_resultTupleScheme extends TupleScheme<get_external_source_info_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_external_source_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_external_source_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = new AssemblyExternalSourceInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_stats_args implements org.apache.thrift.TBase<get_stats_args, get_stats_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_stats_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_stats_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_stats_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_stats_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_stats_args.class, metaDataMap);
    }

    public get_stats_args() {
    }

    public get_stats_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_stats_args(get_stats_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_stats_args deepCopy() {
      return new get_stats_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_stats_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_stats_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_stats_args)
        return this.equals((get_stats_args)that);
      return false;
    }

    public boolean equals(get_stats_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_stats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_stats_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_stats_argsStandardSchemeFactory implements SchemeFactory {
      public get_stats_argsStandardScheme getScheme() {
        return new get_stats_argsStandardScheme();
      }
    }

    private static class get_stats_argsStandardScheme extends StandardScheme<get_stats_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_stats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_stats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_stats_argsTupleSchemeFactory implements SchemeFactory {
      public get_stats_argsTupleScheme getScheme() {
        return new get_stats_argsTupleScheme();
      }
    }

    private static class get_stats_argsTupleScheme extends TupleScheme<get_stats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_stats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_stats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_stats_result implements org.apache.thrift.TBase<get_stats_result, get_stats_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_stats_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_stats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_stats_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_stats_resultTupleSchemeFactory());
    }

    public AssemblyStats success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssemblyStats.class)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_stats_result.class, metaDataMap);
    }

    public get_stats_result() {
    }

    public get_stats_result(
      AssemblyStats success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_stats_result(get_stats_result other) {
      if (other.isSetSuccess()) {
        this.success = new AssemblyStats(other.success);
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_stats_result deepCopy() {
      return new get_stats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public AssemblyStats getSuccess() {
      return this.success;
    }

    public get_stats_result setSuccess(AssemblyStats success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_stats_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_stats_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_stats_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_stats_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_stats_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_stats_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AssemblyStats)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_stats_result)
        return this.equals((get_stats_result)that);
      return false;
    }

    public boolean equals(get_stats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_stats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_stats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_stats_resultStandardSchemeFactory implements SchemeFactory {
      public get_stats_resultStandardScheme getScheme() {
        return new get_stats_resultStandardScheme();
      }
    }

    private static class get_stats_resultStandardScheme extends StandardScheme<get_stats_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_stats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AssemblyStats();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_stats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_stats_resultTupleSchemeFactory implements SchemeFactory {
      public get_stats_resultTupleScheme getScheme() {
        return new get_stats_resultTupleScheme();
      }
    }

    private static class get_stats_resultTupleScheme extends TupleScheme<get_stats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_stats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_stats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = new AssemblyStats();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_number_contigs_args implements org.apache.thrift.TBase<get_number_contigs_args, get_number_contigs_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_number_contigs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_number_contigs_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_number_contigs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_number_contigs_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_number_contigs_args.class, metaDataMap);
    }

    public get_number_contigs_args() {
    }

    public get_number_contigs_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_number_contigs_args(get_number_contigs_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_number_contigs_args deepCopy() {
      return new get_number_contigs_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_number_contigs_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_number_contigs_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_number_contigs_args)
        return this.equals((get_number_contigs_args)that);
      return false;
    }

    public boolean equals(get_number_contigs_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_number_contigs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_number_contigs_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_number_contigs_argsStandardSchemeFactory implements SchemeFactory {
      public get_number_contigs_argsStandardScheme getScheme() {
        return new get_number_contigs_argsStandardScheme();
      }
    }

    private static class get_number_contigs_argsStandardScheme extends StandardScheme<get_number_contigs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_number_contigs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_number_contigs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_number_contigs_argsTupleSchemeFactory implements SchemeFactory {
      public get_number_contigs_argsTupleScheme getScheme() {
        return new get_number_contigs_argsTupleScheme();
      }
    }

    private static class get_number_contigs_argsTupleScheme extends TupleScheme<get_number_contigs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_number_contigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_number_contigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_number_contigs_result implements org.apache.thrift.TBase<get_number_contigs_result, get_number_contigs_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_number_contigs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_number_contigs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_number_contigs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_number_contigs_resultTupleSchemeFactory());
    }

    public long success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_number_contigs_result.class, metaDataMap);
    }

    public get_number_contigs_result() {
    }

    public get_number_contigs_result(
      long success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_number_contigs_result(get_number_contigs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_number_contigs_result deepCopy() {
      return new get_number_contigs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public get_number_contigs_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_number_contigs_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_number_contigs_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_number_contigs_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_number_contigs_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_number_contigs_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_number_contigs_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_number_contigs_result)
        return this.equals((get_number_contigs_result)that);
      return false;
    }

    public boolean equals(get_number_contigs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_number_contigs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_number_contigs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_number_contigs_resultStandardSchemeFactory implements SchemeFactory {
      public get_number_contigs_resultStandardScheme getScheme() {
        return new get_number_contigs_resultStandardScheme();
      }
    }

    private static class get_number_contigs_resultStandardScheme extends StandardScheme<get_number_contigs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_number_contigs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_number_contigs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_number_contigs_resultTupleSchemeFactory implements SchemeFactory {
      public get_number_contigs_resultTupleScheme getScheme() {
        return new get_number_contigs_resultTupleScheme();
      }
    }

    private static class get_number_contigs_resultTupleScheme extends TupleScheme<get_number_contigs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_number_contigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_number_contigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_gc_content_args implements org.apache.thrift.TBase<get_gc_content_args, get_gc_content_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_gc_content_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_gc_content_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_gc_content_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_gc_content_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_gc_content_args.class, metaDataMap);
    }

    public get_gc_content_args() {
    }

    public get_gc_content_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_gc_content_args(get_gc_content_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_gc_content_args deepCopy() {
      return new get_gc_content_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_gc_content_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_gc_content_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_gc_content_args)
        return this.equals((get_gc_content_args)that);
      return false;
    }

    public boolean equals(get_gc_content_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_gc_content_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_gc_content_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_gc_content_argsStandardSchemeFactory implements SchemeFactory {
      public get_gc_content_argsStandardScheme getScheme() {
        return new get_gc_content_argsStandardScheme();
      }
    }

    private static class get_gc_content_argsStandardScheme extends StandardScheme<get_gc_content_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_gc_content_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_gc_content_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_gc_content_argsTupleSchemeFactory implements SchemeFactory {
      public get_gc_content_argsTupleScheme getScheme() {
        return new get_gc_content_argsTupleScheme();
      }
    }

    private static class get_gc_content_argsTupleScheme extends TupleScheme<get_gc_content_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_gc_content_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_gc_content_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_gc_content_result implements org.apache.thrift.TBase<get_gc_content_result, get_gc_content_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_gc_content_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_gc_content_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_gc_content_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_gc_content_resultTupleSchemeFactory());
    }

    public double success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_gc_content_result.class, metaDataMap);
    }

    public get_gc_content_result() {
    }

    public get_gc_content_result(
      double success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_gc_content_result(get_gc_content_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_gc_content_result deepCopy() {
      return new get_gc_content_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public get_gc_content_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_gc_content_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_gc_content_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_gc_content_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_gc_content_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_gc_content_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_gc_content_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_gc_content_result)
        return this.equals((get_gc_content_result)that);
      return false;
    }

    public boolean equals(get_gc_content_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_gc_content_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_gc_content_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_gc_content_resultStandardSchemeFactory implements SchemeFactory {
      public get_gc_content_resultStandardScheme getScheme() {
        return new get_gc_content_resultStandardScheme();
      }
    }

    private static class get_gc_content_resultStandardScheme extends StandardScheme<get_gc_content_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_gc_content_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_gc_content_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_gc_content_resultTupleSchemeFactory implements SchemeFactory {
      public get_gc_content_resultTupleScheme getScheme() {
        return new get_gc_content_resultTupleScheme();
      }
    }

    private static class get_gc_content_resultTupleScheme extends TupleScheme<get_gc_content_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_gc_content_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_gc_content_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_dna_size_args implements org.apache.thrift.TBase<get_dna_size_args, get_dna_size_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_dna_size_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_dna_size_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_dna_size_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_dna_size_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_dna_size_args.class, metaDataMap);
    }

    public get_dna_size_args() {
    }

    public get_dna_size_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_dna_size_args(get_dna_size_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_dna_size_args deepCopy() {
      return new get_dna_size_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_dna_size_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_dna_size_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_dna_size_args)
        return this.equals((get_dna_size_args)that);
      return false;
    }

    public boolean equals(get_dna_size_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_dna_size_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_dna_size_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_dna_size_argsStandardSchemeFactory implements SchemeFactory {
      public get_dna_size_argsStandardScheme getScheme() {
        return new get_dna_size_argsStandardScheme();
      }
    }

    private static class get_dna_size_argsStandardScheme extends StandardScheme<get_dna_size_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_dna_size_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_dna_size_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_dna_size_argsTupleSchemeFactory implements SchemeFactory {
      public get_dna_size_argsTupleScheme getScheme() {
        return new get_dna_size_argsTupleScheme();
      }
    }

    private static class get_dna_size_argsTupleScheme extends TupleScheme<get_dna_size_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_dna_size_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_dna_size_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_dna_size_result implements org.apache.thrift.TBase<get_dna_size_result, get_dna_size_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_dna_size_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_dna_size_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_dna_size_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_dna_size_resultTupleSchemeFactory());
    }

    public long success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_dna_size_result.class, metaDataMap);
    }

    public get_dna_size_result() {
    }

    public get_dna_size_result(
      long success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_dna_size_result(get_dna_size_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_dna_size_result deepCopy() {
      return new get_dna_size_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public get_dna_size_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_dna_size_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_dna_size_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_dna_size_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_dna_size_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_dna_size_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_dna_size_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_dna_size_result)
        return this.equals((get_dna_size_result)that);
      return false;
    }

    public boolean equals(get_dna_size_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_dna_size_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_dna_size_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_dna_size_resultStandardSchemeFactory implements SchemeFactory {
      public get_dna_size_resultStandardScheme getScheme() {
        return new get_dna_size_resultStandardScheme();
      }
    }

    private static class get_dna_size_resultStandardScheme extends StandardScheme<get_dna_size_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_dna_size_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_dna_size_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_dna_size_resultTupleSchemeFactory implements SchemeFactory {
      public get_dna_size_resultTupleScheme getScheme() {
        return new get_dna_size_resultTupleScheme();
      }
    }

    private static class get_dna_size_resultTupleScheme extends TupleScheme<get_dna_size_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_dna_size_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_dna_size_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_contig_ids_args implements org.apache.thrift.TBase<get_contig_ids_args, get_contig_ids_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_contig_ids_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_contig_ids_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_contig_ids_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_contig_ids_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_contig_ids_args.class, metaDataMap);
    }

    public get_contig_ids_args() {
    }

    public get_contig_ids_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_contig_ids_args(get_contig_ids_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_contig_ids_args deepCopy() {
      return new get_contig_ids_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_contig_ids_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_contig_ids_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_contig_ids_args)
        return this.equals((get_contig_ids_args)that);
      return false;
    }

    public boolean equals(get_contig_ids_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_contig_ids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_contig_ids_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_contig_ids_argsStandardSchemeFactory implements SchemeFactory {
      public get_contig_ids_argsStandardScheme getScheme() {
        return new get_contig_ids_argsStandardScheme();
      }
    }

    private static class get_contig_ids_argsStandardScheme extends StandardScheme<get_contig_ids_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_contig_ids_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_contig_ids_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_contig_ids_argsTupleSchemeFactory implements SchemeFactory {
      public get_contig_ids_argsTupleScheme getScheme() {
        return new get_contig_ids_argsTupleScheme();
      }
    }

    private static class get_contig_ids_argsTupleScheme extends TupleScheme<get_contig_ids_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_contig_ids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_contig_ids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_contig_ids_result implements org.apache.thrift.TBase<get_contig_ids_result, get_contig_ids_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_contig_ids_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_contig_ids_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_contig_ids_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_contig_ids_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_contig_ids_result.class, metaDataMap);
    }

    public get_contig_ids_result() {
    }

    public get_contig_ids_result(
      List<String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_contig_ids_result(get_contig_ids_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_contig_ids_result deepCopy() {
      return new get_contig_ids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_contig_ids_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_contig_ids_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_contig_ids_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_contig_ids_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_contig_ids_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_contig_ids_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_contig_ids_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_contig_ids_result)
        return this.equals((get_contig_ids_result)that);
      return false;
    }

    public boolean equals(get_contig_ids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_contig_ids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_contig_ids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_contig_ids_resultStandardSchemeFactory implements SchemeFactory {
      public get_contig_ids_resultStandardScheme getScheme() {
        return new get_contig_ids_resultStandardScheme();
      }
    }

    private static class get_contig_ids_resultStandardScheme extends StandardScheme<get_contig_ids_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_contig_ids_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list26.size);
                  String _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = iprot.readString();
                    struct.success.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_contig_ids_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter29 : struct.success)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_contig_ids_resultTupleSchemeFactory implements SchemeFactory {
      public get_contig_ids_resultTupleScheme getScheme() {
        return new get_contig_ids_resultTupleScheme();
      }
    }

    private static class get_contig_ids_resultTupleScheme extends TupleScheme<get_contig_ids_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_contig_ids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter30 : struct.success)
            {
              oprot.writeString(_iter30);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_contig_ids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list31.size);
            String _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = iprot.readString();
              struct.success.add(_elem32);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_contig_lengths_args implements org.apache.thrift.TBase<get_contig_lengths_args, get_contig_lengths_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_contig_lengths_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_contig_lengths_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTIG_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("contig_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_contig_lengths_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_contig_lengths_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> contig_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      CONTIG_ID_LIST((short)3, "contig_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // CONTIG_ID_LIST
            return CONTIG_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.CONTIG_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("contig_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_contig_lengths_args.class, metaDataMap);
    }

    public get_contig_lengths_args() {
    }

    public get_contig_lengths_args(
      String token,
      String ref,
      List<String> contig_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.contig_id_list = contig_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_contig_lengths_args(get_contig_lengths_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetContig_id_list()) {
        List<String> __this__contig_id_list = new ArrayList<String>(other.contig_id_list);
        this.contig_id_list = __this__contig_id_list;
      }
    }

    public get_contig_lengths_args deepCopy() {
      return new get_contig_lengths_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.contig_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_contig_lengths_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_contig_lengths_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getContig_id_listSize() {
      return (this.contig_id_list == null) ? 0 : this.contig_id_list.size();
    }

    public java.util.Iterator<String> getContig_id_listIterator() {
      return (this.contig_id_list == null) ? null : this.contig_id_list.iterator();
    }

    public void addToContig_id_list(String elem) {
      if (this.contig_id_list == null) {
        this.contig_id_list = new ArrayList<String>();
      }
      this.contig_id_list.add(elem);
    }

    public List<String> getContig_id_list() {
      return this.contig_id_list;
    }

    public get_contig_lengths_args setContig_id_list(List<String> contig_id_list) {
      this.contig_id_list = contig_id_list;
      return this;
    }

    public void unsetContig_id_list() {
      this.contig_id_list = null;
    }

    /** Returns true if field contig_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetContig_id_list() {
      return this.contig_id_list != null;
    }

    public void setContig_id_listIsSet(boolean value) {
      if (!value) {
        this.contig_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case CONTIG_ID_LIST:
        if (value == null) {
          unsetContig_id_list();
        } else {
          setContig_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case CONTIG_ID_LIST:
        return getContig_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case CONTIG_ID_LIST:
        return isSetContig_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_contig_lengths_args)
        return this.equals((get_contig_lengths_args)that);
      return false;
    }

    public boolean equals(get_contig_lengths_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_contig_id_list = true && this.isSetContig_id_list();
      boolean that_present_contig_id_list = true && that.isSetContig_id_list();
      if (this_present_contig_id_list || that_present_contig_id_list) {
        if (!(this_present_contig_id_list && that_present_contig_id_list))
          return false;
        if (!this.contig_id_list.equals(that.contig_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_contig_id_list = true && (isSetContig_id_list());
      list.add(present_contig_id_list);
      if (present_contig_id_list)
        list.add(contig_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_contig_lengths_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContig_id_list()).compareTo(other.isSetContig_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContig_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contig_id_list, other.contig_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_contig_lengths_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contig_id_list:");
      if (this.contig_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.contig_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_contig_lengths_argsStandardSchemeFactory implements SchemeFactory {
      public get_contig_lengths_argsStandardScheme getScheme() {
        return new get_contig_lengths_argsStandardScheme();
      }
    }

    private static class get_contig_lengths_argsStandardScheme extends StandardScheme<get_contig_lengths_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_contig_lengths_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTIG_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.contig_id_list = new ArrayList<String>(_list34.size);
                  String _elem35;
                  for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                  {
                    _elem35 = iprot.readString();
                    struct.contig_id_list.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                struct.setContig_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_contig_lengths_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.contig_id_list != null) {
          oprot.writeFieldBegin(CONTIG_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.contig_id_list.size()));
            for (String _iter37 : struct.contig_id_list)
            {
              oprot.writeString(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_contig_lengths_argsTupleSchemeFactory implements SchemeFactory {
      public get_contig_lengths_argsTupleScheme getScheme() {
        return new get_contig_lengths_argsTupleScheme();
      }
    }

    private static class get_contig_lengths_argsTupleScheme extends TupleScheme<get_contig_lengths_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_contig_lengths_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetContig_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContig_id_list()) {
          {
            oprot.writeI32(struct.contig_id_list.size());
            for (String _iter38 : struct.contig_id_list)
            {
              oprot.writeString(_iter38);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_contig_lengths_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.contig_id_list = new ArrayList<String>(_list39.size);
            String _elem40;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = iprot.readString();
              struct.contig_id_list.add(_elem40);
            }
          }
          struct.setContig_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_contig_lengths_result implements org.apache.thrift.TBase<get_contig_lengths_result, get_contig_lengths_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_contig_lengths_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_contig_lengths_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_contig_lengths_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_contig_lengths_resultTupleSchemeFactory());
    }

    public Map<String,Long> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_contig_lengths_result.class, metaDataMap);
    }

    public get_contig_lengths_result() {
    }

    public get_contig_lengths_result(
      Map<String,Long> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_contig_lengths_result(get_contig_lengths_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new TreeMap<String,Long>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_contig_lengths_result deepCopy() {
      return new get_contig_lengths_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new TreeMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public get_contig_lengths_result setSuccess(Map<String,Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_contig_lengths_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_contig_lengths_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_contig_lengths_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_contig_lengths_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_contig_lengths_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_contig_lengths_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_contig_lengths_result)
        return this.equals((get_contig_lengths_result)that);
      return false;
    }

    public boolean equals(get_contig_lengths_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_contig_lengths_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_contig_lengths_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_contig_lengths_resultStandardSchemeFactory implements SchemeFactory {
      public get_contig_lengths_resultStandardScheme getScheme() {
        return new get_contig_lengths_resultStandardScheme();
      }
    }

    private static class get_contig_lengths_resultStandardScheme extends StandardScheme<get_contig_lengths_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_contig_lengths_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,Long>();
                  String _key43;
                  long _val44;
                  for (int _i45 = 0; _i45 < _map42.size; ++_i45)
                  {
                    _key43 = iprot.readString();
                    _val44 = iprot.readI64();
                    struct.success.put(_key43, _val44);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_contig_lengths_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter46 : struct.success.entrySet())
            {
              oprot.writeString(_iter46.getKey());
              oprot.writeI64(_iter46.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_contig_lengths_resultTupleSchemeFactory implements SchemeFactory {
      public get_contig_lengths_resultTupleScheme getScheme() {
        return new get_contig_lengths_resultTupleScheme();
      }
    }

    private static class get_contig_lengths_resultTupleScheme extends TupleScheme<get_contig_lengths_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_contig_lengths_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter47 : struct.success.entrySet())
            {
              oprot.writeString(_iter47.getKey());
              oprot.writeI64(_iter47.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_contig_lengths_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map48 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new TreeMap<String,Long>();
            String _key49;
            long _val50;
            for (int _i51 = 0; _i51 < _map48.size; ++_i51)
            {
              _key49 = iprot.readString();
              _val50 = iprot.readI64();
              struct.success.put(_key49, _val50);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_contig_gc_content_args implements org.apache.thrift.TBase<get_contig_gc_content_args, get_contig_gc_content_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_contig_gc_content_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_contig_gc_content_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTIG_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("contig_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_contig_gc_content_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_contig_gc_content_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> contig_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      CONTIG_ID_LIST((short)3, "contig_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // CONTIG_ID_LIST
            return CONTIG_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.CONTIG_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("contig_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_contig_gc_content_args.class, metaDataMap);
    }

    public get_contig_gc_content_args() {
    }

    public get_contig_gc_content_args(
      String token,
      String ref,
      List<String> contig_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.contig_id_list = contig_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_contig_gc_content_args(get_contig_gc_content_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetContig_id_list()) {
        List<String> __this__contig_id_list = new ArrayList<String>(other.contig_id_list);
        this.contig_id_list = __this__contig_id_list;
      }
    }

    public get_contig_gc_content_args deepCopy() {
      return new get_contig_gc_content_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.contig_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_contig_gc_content_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_contig_gc_content_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getContig_id_listSize() {
      return (this.contig_id_list == null) ? 0 : this.contig_id_list.size();
    }

    public java.util.Iterator<String> getContig_id_listIterator() {
      return (this.contig_id_list == null) ? null : this.contig_id_list.iterator();
    }

    public void addToContig_id_list(String elem) {
      if (this.contig_id_list == null) {
        this.contig_id_list = new ArrayList<String>();
      }
      this.contig_id_list.add(elem);
    }

    public List<String> getContig_id_list() {
      return this.contig_id_list;
    }

    public get_contig_gc_content_args setContig_id_list(List<String> contig_id_list) {
      this.contig_id_list = contig_id_list;
      return this;
    }

    public void unsetContig_id_list() {
      this.contig_id_list = null;
    }

    /** Returns true if field contig_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetContig_id_list() {
      return this.contig_id_list != null;
    }

    public void setContig_id_listIsSet(boolean value) {
      if (!value) {
        this.contig_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case CONTIG_ID_LIST:
        if (value == null) {
          unsetContig_id_list();
        } else {
          setContig_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case CONTIG_ID_LIST:
        return getContig_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case CONTIG_ID_LIST:
        return isSetContig_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_contig_gc_content_args)
        return this.equals((get_contig_gc_content_args)that);
      return false;
    }

    public boolean equals(get_contig_gc_content_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_contig_id_list = true && this.isSetContig_id_list();
      boolean that_present_contig_id_list = true && that.isSetContig_id_list();
      if (this_present_contig_id_list || that_present_contig_id_list) {
        if (!(this_present_contig_id_list && that_present_contig_id_list))
          return false;
        if (!this.contig_id_list.equals(that.contig_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_contig_id_list = true && (isSetContig_id_list());
      list.add(present_contig_id_list);
      if (present_contig_id_list)
        list.add(contig_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_contig_gc_content_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContig_id_list()).compareTo(other.isSetContig_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContig_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contig_id_list, other.contig_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_contig_gc_content_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contig_id_list:");
      if (this.contig_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.contig_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_contig_gc_content_argsStandardSchemeFactory implements SchemeFactory {
      public get_contig_gc_content_argsStandardScheme getScheme() {
        return new get_contig_gc_content_argsStandardScheme();
      }
    }

    private static class get_contig_gc_content_argsStandardScheme extends StandardScheme<get_contig_gc_content_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_contig_gc_content_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTIG_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                  struct.contig_id_list = new ArrayList<String>(_list52.size);
                  String _elem53;
                  for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                  {
                    _elem53 = iprot.readString();
                    struct.contig_id_list.add(_elem53);
                  }
                  iprot.readListEnd();
                }
                struct.setContig_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_contig_gc_content_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.contig_id_list != null) {
          oprot.writeFieldBegin(CONTIG_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.contig_id_list.size()));
            for (String _iter55 : struct.contig_id_list)
            {
              oprot.writeString(_iter55);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_contig_gc_content_argsTupleSchemeFactory implements SchemeFactory {
      public get_contig_gc_content_argsTupleScheme getScheme() {
        return new get_contig_gc_content_argsTupleScheme();
      }
    }

    private static class get_contig_gc_content_argsTupleScheme extends TupleScheme<get_contig_gc_content_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_contig_gc_content_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetContig_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContig_id_list()) {
          {
            oprot.writeI32(struct.contig_id_list.size());
            for (String _iter56 : struct.contig_id_list)
            {
              oprot.writeString(_iter56);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_contig_gc_content_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.contig_id_list = new ArrayList<String>(_list57.size);
            String _elem58;
            for (int _i59 = 0; _i59 < _list57.size; ++_i59)
            {
              _elem58 = iprot.readString();
              struct.contig_id_list.add(_elem58);
            }
          }
          struct.setContig_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_contig_gc_content_result implements org.apache.thrift.TBase<get_contig_gc_content_result, get_contig_gc_content_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_contig_gc_content_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_contig_gc_content_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_contig_gc_content_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_contig_gc_content_resultTupleSchemeFactory());
    }

    public Map<String,Double> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_contig_gc_content_result.class, metaDataMap);
    }

    public get_contig_gc_content_result() {
    }

    public get_contig_gc_content_result(
      Map<String,Double> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_contig_gc_content_result(get_contig_gc_content_result other) {
      if (other.isSetSuccess()) {
        Map<String,Double> __this__success = new TreeMap<String,Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_contig_gc_content_result deepCopy() {
      return new get_contig_gc_content_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, double val) {
      if (this.success == null) {
        this.success = new TreeMap<String,Double>();
      }
      this.success.put(key, val);
    }

    public Map<String,Double> getSuccess() {
      return this.success;
    }

    public get_contig_gc_content_result setSuccess(Map<String,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_contig_gc_content_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_contig_gc_content_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_contig_gc_content_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_contig_gc_content_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_contig_gc_content_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_contig_gc_content_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Double>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_contig_gc_content_result)
        return this.equals((get_contig_gc_content_result)that);
      return false;
    }

    public boolean equals(get_contig_gc_content_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_contig_gc_content_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_contig_gc_content_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_contig_gc_content_resultStandardSchemeFactory implements SchemeFactory {
      public get_contig_gc_content_resultStandardScheme getScheme() {
        return new get_contig_gc_content_resultStandardScheme();
      }
    }

    private static class get_contig_gc_content_resultStandardScheme extends StandardScheme<get_contig_gc_content_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_contig_gc_content_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,Double>();
                  String _key61;
                  double _val62;
                  for (int _i63 = 0; _i63 < _map60.size; ++_i63)
                  {
                    _key61 = iprot.readString();
                    _val62 = iprot.readDouble();
                    struct.success.put(_key61, _val62);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_contig_gc_content_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<String, Double> _iter64 : struct.success.entrySet())
            {
              oprot.writeString(_iter64.getKey());
              oprot.writeDouble(_iter64.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_contig_gc_content_resultTupleSchemeFactory implements SchemeFactory {
      public get_contig_gc_content_resultTupleScheme getScheme() {
        return new get_contig_gc_content_resultTupleScheme();
      }
    }

    private static class get_contig_gc_content_resultTupleScheme extends TupleScheme<get_contig_gc_content_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_contig_gc_content_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Double> _iter65 : struct.success.entrySet())
            {
              oprot.writeString(_iter65.getKey());
              oprot.writeDouble(_iter65.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_contig_gc_content_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new TreeMap<String,Double>();
            String _key67;
            double _val68;
            for (int _i69 = 0; _i69 < _map66.size; ++_i69)
            {
              _key67 = iprot.readString();
              _val68 = iprot.readDouble();
              struct.success.put(_key67, _val68);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_contigs_args implements org.apache.thrift.TBase<get_contigs_args, get_contigs_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_contigs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_contigs_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTIG_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("contig_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_contigs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_contigs_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> contig_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      CONTIG_ID_LIST((short)3, "contig_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // CONTIG_ID_LIST
            return CONTIG_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.CONTIG_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("contig_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_contigs_args.class, metaDataMap);
    }

    public get_contigs_args() {
    }

    public get_contigs_args(
      String token,
      String ref,
      List<String> contig_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.contig_id_list = contig_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_contigs_args(get_contigs_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetContig_id_list()) {
        List<String> __this__contig_id_list = new ArrayList<String>(other.contig_id_list);
        this.contig_id_list = __this__contig_id_list;
      }
    }

    public get_contigs_args deepCopy() {
      return new get_contigs_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.contig_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_contigs_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_contigs_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getContig_id_listSize() {
      return (this.contig_id_list == null) ? 0 : this.contig_id_list.size();
    }

    public java.util.Iterator<String> getContig_id_listIterator() {
      return (this.contig_id_list == null) ? null : this.contig_id_list.iterator();
    }

    public void addToContig_id_list(String elem) {
      if (this.contig_id_list == null) {
        this.contig_id_list = new ArrayList<String>();
      }
      this.contig_id_list.add(elem);
    }

    public List<String> getContig_id_list() {
      return this.contig_id_list;
    }

    public get_contigs_args setContig_id_list(List<String> contig_id_list) {
      this.contig_id_list = contig_id_list;
      return this;
    }

    public void unsetContig_id_list() {
      this.contig_id_list = null;
    }

    /** Returns true if field contig_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetContig_id_list() {
      return this.contig_id_list != null;
    }

    public void setContig_id_listIsSet(boolean value) {
      if (!value) {
        this.contig_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case CONTIG_ID_LIST:
        if (value == null) {
          unsetContig_id_list();
        } else {
          setContig_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case CONTIG_ID_LIST:
        return getContig_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case CONTIG_ID_LIST:
        return isSetContig_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_contigs_args)
        return this.equals((get_contigs_args)that);
      return false;
    }

    public boolean equals(get_contigs_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_contig_id_list = true && this.isSetContig_id_list();
      boolean that_present_contig_id_list = true && that.isSetContig_id_list();
      if (this_present_contig_id_list || that_present_contig_id_list) {
        if (!(this_present_contig_id_list && that_present_contig_id_list))
          return false;
        if (!this.contig_id_list.equals(that.contig_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_contig_id_list = true && (isSetContig_id_list());
      list.add(present_contig_id_list);
      if (present_contig_id_list)
        list.add(contig_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_contigs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContig_id_list()).compareTo(other.isSetContig_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContig_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contig_id_list, other.contig_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_contigs_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contig_id_list:");
      if (this.contig_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.contig_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_contigs_argsStandardSchemeFactory implements SchemeFactory {
      public get_contigs_argsStandardScheme getScheme() {
        return new get_contigs_argsStandardScheme();
      }
    }

    private static class get_contigs_argsStandardScheme extends StandardScheme<get_contigs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_contigs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTIG_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                  struct.contig_id_list = new ArrayList<String>(_list70.size);
                  String _elem71;
                  for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                  {
                    _elem71 = iprot.readString();
                    struct.contig_id_list.add(_elem71);
                  }
                  iprot.readListEnd();
                }
                struct.setContig_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_contigs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.contig_id_list != null) {
          oprot.writeFieldBegin(CONTIG_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.contig_id_list.size()));
            for (String _iter73 : struct.contig_id_list)
            {
              oprot.writeString(_iter73);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_contigs_argsTupleSchemeFactory implements SchemeFactory {
      public get_contigs_argsTupleScheme getScheme() {
        return new get_contigs_argsTupleScheme();
      }
    }

    private static class get_contigs_argsTupleScheme extends TupleScheme<get_contigs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_contigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetContig_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContig_id_list()) {
          {
            oprot.writeI32(struct.contig_id_list.size());
            for (String _iter74 : struct.contig_id_list)
            {
              oprot.writeString(_iter74);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_contigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.contig_id_list = new ArrayList<String>(_list75.size);
            String _elem76;
            for (int _i77 = 0; _i77 < _list75.size; ++_i77)
            {
              _elem76 = iprot.readString();
              struct.contig_id_list.add(_elem76);
            }
          }
          struct.setContig_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_contigs_result implements org.apache.thrift.TBase<get_contigs_result, get_contigs_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_contigs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_contigs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_contigs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_contigs_resultTupleSchemeFactory());
    }

    public Map<String,AssemblyContig> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssemblyContig.class))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_contigs_result.class, metaDataMap);
    }

    public get_contigs_result() {
    }

    public get_contigs_result(
      Map<String,AssemblyContig> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_contigs_result(get_contigs_result other) {
      if (other.isSetSuccess()) {
        Map<String,AssemblyContig> __this__success = new TreeMap<String,AssemblyContig>();
        for (Map.Entry<String, AssemblyContig> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          AssemblyContig other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          AssemblyContig __this__success_copy_value = new AssemblyContig(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_contigs_result deepCopy() {
      return new get_contigs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, AssemblyContig val) {
      if (this.success == null) {
        this.success = new TreeMap<String,AssemblyContig>();
      }
      this.success.put(key, val);
    }

    public Map<String,AssemblyContig> getSuccess() {
      return this.success;
    }

    public get_contigs_result setSuccess(Map<String,AssemblyContig> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_contigs_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_contigs_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_contigs_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_contigs_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_contigs_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_contigs_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,AssemblyContig>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_contigs_result)
        return this.equals((get_contigs_result)that);
      return false;
    }

    public boolean equals(get_contigs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_contigs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_contigs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_contigs_resultStandardSchemeFactory implements SchemeFactory {
      public get_contigs_resultStandardScheme getScheme() {
        return new get_contigs_resultStandardScheme();
      }
    }

    private static class get_contigs_resultStandardScheme extends StandardScheme<get_contigs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_contigs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map78 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,AssemblyContig>();
                  String _key79;
                  AssemblyContig _val80;
                  for (int _i81 = 0; _i81 < _map78.size; ++_i81)
                  {
                    _key79 = iprot.readString();
                    _val80 = new AssemblyContig();
                    _val80.read(iprot);
                    struct.success.put(_key79, _val80);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_contigs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, AssemblyContig> _iter82 : struct.success.entrySet())
            {
              oprot.writeString(_iter82.getKey());
              _iter82.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_contigs_resultTupleSchemeFactory implements SchemeFactory {
      public get_contigs_resultTupleScheme getScheme() {
        return new get_contigs_resultTupleScheme();
      }
    }

    private static class get_contigs_resultTupleScheme extends TupleScheme<get_contigs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_contigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, AssemblyContig> _iter83 : struct.success.entrySet())
            {
              oprot.writeString(_iter83.getKey());
              _iter83.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_contigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map84 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new TreeMap<String,AssemblyContig>();
            String _key85;
            AssemblyContig _val86;
            for (int _i87 = 0; _i87 < _map84.size; ++_i87)
            {
              _key85 = iprot.readString();
              _val86 = new AssemblyContig();
              _val86.read(iprot);
              struct.success.put(_key85, _val86);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class to_fasta_args implements org.apache.thrift.TBase<to_fasta_args, to_fasta_args._Fields>, java.io.Serializable, Cloneable, Comparable<to_fasta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("to_fasta_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new to_fasta_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new to_fasta_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(to_fasta_args.class, metaDataMap);
    }

    public to_fasta_args() {
    }

    public to_fasta_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public to_fasta_args(to_fasta_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public to_fasta_args deepCopy() {
      return new to_fasta_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public to_fasta_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public to_fasta_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof to_fasta_args)
        return this.equals((to_fasta_args)that);
      return false;
    }

    public boolean equals(to_fasta_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(to_fasta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("to_fasta_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class to_fasta_argsStandardSchemeFactory implements SchemeFactory {
      public to_fasta_argsStandardScheme getScheme() {
        return new to_fasta_argsStandardScheme();
      }
    }

    private static class to_fasta_argsStandardScheme extends StandardScheme<to_fasta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, to_fasta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, to_fasta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class to_fasta_argsTupleSchemeFactory implements SchemeFactory {
      public to_fasta_argsTupleScheme getScheme() {
        return new to_fasta_argsTupleScheme();
      }
    }

    private static class to_fasta_argsTupleScheme extends TupleScheme<to_fasta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, to_fasta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, to_fasta_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class to_fasta_result implements org.apache.thrift.TBase<to_fasta_result, to_fasta_result._Fields>, java.io.Serializable, Cloneable, Comparable<to_fasta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("to_fasta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new to_fasta_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new to_fasta_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(to_fasta_result.class, metaDataMap);
    }

    public to_fasta_result() {
    }

    public to_fasta_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public to_fasta_result(to_fasta_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public to_fasta_result deepCopy() {
      return new to_fasta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public to_fasta_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public to_fasta_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public to_fasta_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public to_fasta_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public to_fasta_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public to_fasta_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public to_fasta_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof to_fasta_result)
        return this.equals((to_fasta_result)that);
      return false;
    }

    public boolean equals(to_fasta_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(to_fasta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("to_fasta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class to_fasta_resultStandardSchemeFactory implements SchemeFactory {
      public to_fasta_resultStandardScheme getScheme() {
        return new to_fasta_resultStandardScheme();
      }
    }

    private static class to_fasta_resultStandardScheme extends StandardScheme<to_fasta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, to_fasta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, to_fasta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class to_fasta_resultTupleSchemeFactory implements SchemeFactory {
      public to_fasta_resultTupleScheme getScheme() {
        return new to_fasta_resultTupleScheme();
      }
    }

    private static class to_fasta_resultTupleScheme extends TupleScheme<to_fasta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, to_fasta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, to_fasta_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

}
