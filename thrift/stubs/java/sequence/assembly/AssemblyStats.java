/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Derived statistical information about an assembly.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-20")
public class AssemblyStats implements org.apache.thrift.TBase<AssemblyStats, AssemblyStats._Fields>, java.io.Serializable, Cloneable, Comparable<AssemblyStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssemblyStats");

  private static final org.apache.thrift.protocol.TField NUM_CONTIGS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_contigs", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DNA_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("dna_size", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GC_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("gc_content", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AssemblyStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AssemblyStatsTupleSchemeFactory());
  }

  /**
   * Total number of contiguous sequences.
   */
  public long num_contigs; // required
  /**
   * Total length of all dna sequences.
   */
  public long dna_size; // required
  /**
   * Proportion of guanine (G) and cytosine (C) content.
   */
  public double gc_content; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Total number of contiguous sequences.
     */
    NUM_CONTIGS((short)1, "num_contigs"),
    /**
     * Total length of all dna sequences.
     */
    DNA_SIZE((short)2, "dna_size"),
    /**
     * Proportion of guanine (G) and cytosine (C) content.
     */
    GC_CONTENT((short)3, "gc_content");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_CONTIGS
          return NUM_CONTIGS;
        case 2: // DNA_SIZE
          return DNA_SIZE;
        case 3: // GC_CONTENT
          return GC_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_CONTIGS_ISSET_ID = 0;
  private static final int __DNA_SIZE_ISSET_ID = 1;
  private static final int __GC_CONTENT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_CONTIGS, new org.apache.thrift.meta_data.FieldMetaData("num_contigs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DNA_SIZE, new org.apache.thrift.meta_data.FieldMetaData("dna_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GC_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("gc_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssemblyStats.class, metaDataMap);
  }

  public AssemblyStats() {
  }

  public AssemblyStats(
    long num_contigs,
    long dna_size,
    double gc_content)
  {
    this();
    this.num_contigs = num_contigs;
    setNum_contigsIsSet(true);
    this.dna_size = dna_size;
    setDna_sizeIsSet(true);
    this.gc_content = gc_content;
    setGc_contentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AssemblyStats(AssemblyStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_contigs = other.num_contigs;
    this.dna_size = other.dna_size;
    this.gc_content = other.gc_content;
  }

  public AssemblyStats deepCopy() {
    return new AssemblyStats(this);
  }

  @Override
  public void clear() {
    setNum_contigsIsSet(false);
    this.num_contigs = 0;
    setDna_sizeIsSet(false);
    this.dna_size = 0;
    setGc_contentIsSet(false);
    this.gc_content = 0.0;
  }

  /**
   * Total number of contiguous sequences.
   */
  public long getNum_contigs() {
    return this.num_contigs;
  }

  /**
   * Total number of contiguous sequences.
   */
  public AssemblyStats setNum_contigs(long num_contigs) {
    this.num_contigs = num_contigs;
    setNum_contigsIsSet(true);
    return this;
  }

  public void unsetNum_contigs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_CONTIGS_ISSET_ID);
  }

  /** Returns true if field num_contigs is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_contigs() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_CONTIGS_ISSET_ID);
  }

  public void setNum_contigsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_CONTIGS_ISSET_ID, value);
  }

  /**
   * Total length of all dna sequences.
   */
  public long getDna_size() {
    return this.dna_size;
  }

  /**
   * Total length of all dna sequences.
   */
  public AssemblyStats setDna_size(long dna_size) {
    this.dna_size = dna_size;
    setDna_sizeIsSet(true);
    return this;
  }

  public void unsetDna_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DNA_SIZE_ISSET_ID);
  }

  /** Returns true if field dna_size is set (has been assigned a value) and false otherwise */
  public boolean isSetDna_size() {
    return EncodingUtils.testBit(__isset_bitfield, __DNA_SIZE_ISSET_ID);
  }

  public void setDna_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DNA_SIZE_ISSET_ID, value);
  }

  /**
   * Proportion of guanine (G) and cytosine (C) content.
   */
  public double getGc_content() {
    return this.gc_content;
  }

  /**
   * Proportion of guanine (G) and cytosine (C) content.
   */
  public AssemblyStats setGc_content(double gc_content) {
    this.gc_content = gc_content;
    setGc_contentIsSet(true);
    return this;
  }

  public void unsetGc_content() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GC_CONTENT_ISSET_ID);
  }

  /** Returns true if field gc_content is set (has been assigned a value) and false otherwise */
  public boolean isSetGc_content() {
    return EncodingUtils.testBit(__isset_bitfield, __GC_CONTENT_ISSET_ID);
  }

  public void setGc_contentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GC_CONTENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_CONTIGS:
      if (value == null) {
        unsetNum_contigs();
      } else {
        setNum_contigs((Long)value);
      }
      break;

    case DNA_SIZE:
      if (value == null) {
        unsetDna_size();
      } else {
        setDna_size((Long)value);
      }
      break;

    case GC_CONTENT:
      if (value == null) {
        unsetGc_content();
      } else {
        setGc_content((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_CONTIGS:
      return Long.valueOf(getNum_contigs());

    case DNA_SIZE:
      return Long.valueOf(getDna_size());

    case GC_CONTENT:
      return Double.valueOf(getGc_content());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_CONTIGS:
      return isSetNum_contigs();
    case DNA_SIZE:
      return isSetDna_size();
    case GC_CONTENT:
      return isSetGc_content();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AssemblyStats)
      return this.equals((AssemblyStats)that);
    return false;
  }

  public boolean equals(AssemblyStats that) {
    if (that == null)
      return false;

    boolean this_present_num_contigs = true;
    boolean that_present_num_contigs = true;
    if (this_present_num_contigs || that_present_num_contigs) {
      if (!(this_present_num_contigs && that_present_num_contigs))
        return false;
      if (this.num_contigs != that.num_contigs)
        return false;
    }

    boolean this_present_dna_size = true;
    boolean that_present_dna_size = true;
    if (this_present_dna_size || that_present_dna_size) {
      if (!(this_present_dna_size && that_present_dna_size))
        return false;
      if (this.dna_size != that.dna_size)
        return false;
    }

    boolean this_present_gc_content = true;
    boolean that_present_gc_content = true;
    if (this_present_gc_content || that_present_gc_content) {
      if (!(this_present_gc_content && that_present_gc_content))
        return false;
      if (this.gc_content != that.gc_content)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_num_contigs = true;
    list.add(present_num_contigs);
    if (present_num_contigs)
      list.add(num_contigs);

    boolean present_dna_size = true;
    list.add(present_dna_size);
    if (present_dna_size)
      list.add(dna_size);

    boolean present_gc_content = true;
    list.add(present_gc_content);
    if (present_gc_content)
      list.add(gc_content);

    return list.hashCode();
  }

  @Override
  public int compareTo(AssemblyStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNum_contigs()).compareTo(other.isSetNum_contigs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_contigs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_contigs, other.num_contigs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDna_size()).compareTo(other.isSetDna_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDna_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dna_size, other.dna_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc_content()).compareTo(other.isSetGc_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc_content, other.gc_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AssemblyStats(");
    boolean first = true;

    sb.append("num_contigs:");
    sb.append(this.num_contigs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dna_size:");
    sb.append(this.dna_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gc_content:");
    sb.append(this.gc_content);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssemblyStatsStandardSchemeFactory implements SchemeFactory {
    public AssemblyStatsStandardScheme getScheme() {
      return new AssemblyStatsStandardScheme();
    }
  }

  private static class AssemblyStatsStandardScheme extends StandardScheme<AssemblyStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AssemblyStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_CONTIGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_contigs = iprot.readI64();
              struct.setNum_contigsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DNA_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dna_size = iprot.readI64();
              struct.setDna_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GC_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.gc_content = iprot.readDouble();
              struct.setGc_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AssemblyStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_CONTIGS_FIELD_DESC);
      oprot.writeI64(struct.num_contigs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DNA_SIZE_FIELD_DESC);
      oprot.writeI64(struct.dna_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GC_CONTENT_FIELD_DESC);
      oprot.writeDouble(struct.gc_content);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssemblyStatsTupleSchemeFactory implements SchemeFactory {
    public AssemblyStatsTupleScheme getScheme() {
      return new AssemblyStatsTupleScheme();
    }
  }

  private static class AssemblyStatsTupleScheme extends TupleScheme<AssemblyStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AssemblyStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNum_contigs()) {
        optionals.set(0);
      }
      if (struct.isSetDna_size()) {
        optionals.set(1);
      }
      if (struct.isSetGc_content()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNum_contigs()) {
        oprot.writeI64(struct.num_contigs);
      }
      if (struct.isSetDna_size()) {
        oprot.writeI64(struct.dna_size);
      }
      if (struct.isSetGc_content()) {
        oprot.writeDouble(struct.gc_content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AssemblyStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.num_contigs = iprot.readI64();
        struct.setNum_contigsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dna_size = iprot.readI64();
        struct.setDna_sizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gc_content = iprot.readDouble();
        struct.setGc_contentIsSet(true);
      }
    }
  }

}

