/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genome_annotation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-25")
public class Region implements org.apache.thrift.TBase<Region, Region._Fields>, java.io.Serializable, Cloneable, Comparable<Region> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Region");

  private static final org.apache.thrift.protocol.TField CONTIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contig_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("strand", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegionTupleSchemeFactory());
  }

  public String contig_id; // required
  public String strand; // required
  public long start; // required
  public long length; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTIG_ID((short)1, "contig_id"),
    STRAND((short)2, "strand"),
    START((short)3, "start"),
    LENGTH((short)4, "length");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTIG_ID
          return CONTIG_ID;
        case 2: // STRAND
          return STRAND;
        case 3: // START
          return START;
        case 4: // LENGTH
          return LENGTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTIG_ID, new org.apache.thrift.meta_data.FieldMetaData("contig_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRAND, new org.apache.thrift.meta_data.FieldMetaData("strand", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Region.class, metaDataMap);
  }

  public Region() {
  }

  public Region(
    String contig_id,
    String strand,
    long start,
    long length)
  {
    this();
    this.contig_id = contig_id;
    this.strand = strand;
    this.start = start;
    setStartIsSet(true);
    this.length = length;
    setLengthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Region(Region other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContig_id()) {
      this.contig_id = other.contig_id;
    }
    if (other.isSetStrand()) {
      this.strand = other.strand;
    }
    this.start = other.start;
    this.length = other.length;
  }

  public Region deepCopy() {
    return new Region(this);
  }

  @Override
  public void clear() {
    this.contig_id = null;
    this.strand = null;
    setStartIsSet(false);
    this.start = 0;
    setLengthIsSet(false);
    this.length = 0;
  }

  public String getContig_id() {
    return this.contig_id;
  }

  public Region setContig_id(String contig_id) {
    this.contig_id = contig_id;
    return this;
  }

  public void unsetContig_id() {
    this.contig_id = null;
  }

  /** Returns true if field contig_id is set (has been assigned a value) and false otherwise */
  public boolean isSetContig_id() {
    return this.contig_id != null;
  }

  public void setContig_idIsSet(boolean value) {
    if (!value) {
      this.contig_id = null;
    }
  }

  public String getStrand() {
    return this.strand;
  }

  public Region setStrand(String strand) {
    this.strand = strand;
    return this;
  }

  public void unsetStrand() {
    this.strand = null;
  }

  /** Returns true if field strand is set (has been assigned a value) and false otherwise */
  public boolean isSetStrand() {
    return this.strand != null;
  }

  public void setStrandIsSet(boolean value) {
    if (!value) {
      this.strand = null;
    }
  }

  public long getStart() {
    return this.start;
  }

  public Region setStart(long start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public long getLength() {
    return this.length;
  }

  public Region setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTIG_ID:
      if (value == null) {
        unsetContig_id();
      } else {
        setContig_id((String)value);
      }
      break;

    case STRAND:
      if (value == null) {
        unsetStrand();
      } else {
        setStrand((String)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Long)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTIG_ID:
      return getContig_id();

    case STRAND:
      return getStrand();

    case START:
      return Long.valueOf(getStart());

    case LENGTH:
      return Long.valueOf(getLength());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTIG_ID:
      return isSetContig_id();
    case STRAND:
      return isSetStrand();
    case START:
      return isSetStart();
    case LENGTH:
      return isSetLength();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Region)
      return this.equals((Region)that);
    return false;
  }

  public boolean equals(Region that) {
    if (that == null)
      return false;

    boolean this_present_contig_id = true && this.isSetContig_id();
    boolean that_present_contig_id = true && that.isSetContig_id();
    if (this_present_contig_id || that_present_contig_id) {
      if (!(this_present_contig_id && that_present_contig_id))
        return false;
      if (!this.contig_id.equals(that.contig_id))
        return false;
    }

    boolean this_present_strand = true && this.isSetStrand();
    boolean that_present_strand = true && that.isSetStrand();
    if (this_present_strand || that_present_strand) {
      if (!(this_present_strand && that_present_strand))
        return false;
      if (!this.strand.equals(that.strand))
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_contig_id = true && (isSetContig_id());
    list.add(present_contig_id);
    if (present_contig_id)
      list.add(contig_id);

    boolean present_strand = true && (isSetStrand());
    list.add(present_strand);
    if (present_strand)
      list.add(strand);

    boolean present_start = true;
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    return list.hashCode();
  }

  @Override
  public int compareTo(Region other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContig_id()).compareTo(other.isSetContig_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContig_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contig_id, other.contig_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrand()).compareTo(other.isSetStrand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strand, other.strand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Region(");
    boolean first = true;

    sb.append("contig_id:");
    if (this.contig_id == null) {
      sb.append("null");
    } else {
      sb.append(this.contig_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strand:");
    if (this.strand == null) {
      sb.append("null");
    } else {
      sb.append(this.strand);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegionStandardSchemeFactory implements SchemeFactory {
    public RegionStandardScheme getScheme() {
      return new RegionStandardScheme();
    }
  }

  private static class RegionStandardScheme extends StandardScheme<Region> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Region struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contig_id = iprot.readString();
              struct.setContig_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strand = iprot.readString();
              struct.setStrandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start = iprot.readI64();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Region struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contig_id != null) {
        oprot.writeFieldBegin(CONTIG_ID_FIELD_DESC);
        oprot.writeString(struct.contig_id);
        oprot.writeFieldEnd();
      }
      if (struct.strand != null) {
        oprot.writeFieldBegin(STRAND_FIELD_DESC);
        oprot.writeString(struct.strand);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegionTupleSchemeFactory implements SchemeFactory {
    public RegionTupleScheme getScheme() {
      return new RegionTupleScheme();
    }
  }

  private static class RegionTupleScheme extends TupleScheme<Region> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Region struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContig_id()) {
        optionals.set(0);
      }
      if (struct.isSetStrand()) {
        optionals.set(1);
      }
      if (struct.isSetStart()) {
        optionals.set(2);
      }
      if (struct.isSetLength()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetContig_id()) {
        oprot.writeString(struct.contig_id);
      }
      if (struct.isSetStrand()) {
        oprot.writeString(struct.strand);
      }
      if (struct.isSetStart()) {
        oprot.writeI64(struct.start);
      }
      if (struct.isSetLength()) {
        oprot.writeI64(struct.length);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Region struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.contig_id = iprot.readString();
        struct.setContig_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.strand = iprot.readString();
        struct.setStrandIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start = iprot.readI64();
        struct.setStartIsSet(true);
      }
      if (incoming.get(3)) {
        struct.length = iprot.readI64();
        struct.setLengthIsSet(true);
      }
    }
  }

}

