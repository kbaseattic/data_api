/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genome_annotation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-24")
public class Feature_data_mapping implements org.apache.thrift.TBase<Feature_data_mapping, Feature_data_mapping._Fields>, java.io.Serializable, Cloneable, Comparable<Feature_data_mapping> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Feature_data_mapping");

  private static final org.apache.thrift.protocol.TField FEATURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FEATURE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FEATURE_FUNCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_function", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FEATURE_ALIASES_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_aliases", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField FEATURE_DNA_SEQUENCE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_dna_sequence_length", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FEATURE_DNA_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_dna_sequence", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FEATURE_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_md5", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FEATURE_LOCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_locations", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField FEATURE_PUBLICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_publications", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField FEATURE_QUALITY_WARNINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_quality_warnings", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField FEATURE_QUALITY_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_quality_score", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField FEATURE_NOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_notes", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField FEATURE_INFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_inference", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Feature_data_mappingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Feature_data_mappingTupleSchemeFactory());
  }

  public String feature_id; // required
  public String feature_type; // required
  public String feature_function; // required
  public Map<String,List<String>> feature_aliases; // required
  public long feature_dna_sequence_length; // required
  public String feature_dna_sequence; // required
  public String feature_md5; // required
  public List<Region> feature_locations; // required
  public List<String> feature_publications; // required
  public List<String> feature_quality_warnings; // required
  public List<String> feature_quality_score; // required
  public List<String> feature_notes; // required
  public String feature_inference; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FEATURE_ID((short)1, "feature_id"),
    FEATURE_TYPE((short)2, "feature_type"),
    FEATURE_FUNCTION((short)3, "feature_function"),
    FEATURE_ALIASES((short)4, "feature_aliases"),
    FEATURE_DNA_SEQUENCE_LENGTH((short)5, "feature_dna_sequence_length"),
    FEATURE_DNA_SEQUENCE((short)6, "feature_dna_sequence"),
    FEATURE_MD5((short)7, "feature_md5"),
    FEATURE_LOCATIONS((short)8, "feature_locations"),
    FEATURE_PUBLICATIONS((short)9, "feature_publications"),
    FEATURE_QUALITY_WARNINGS((short)10, "feature_quality_warnings"),
    FEATURE_QUALITY_SCORE((short)11, "feature_quality_score"),
    FEATURE_NOTES((short)12, "feature_notes"),
    FEATURE_INFERENCE((short)13, "feature_inference");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FEATURE_ID
          return FEATURE_ID;
        case 2: // FEATURE_TYPE
          return FEATURE_TYPE;
        case 3: // FEATURE_FUNCTION
          return FEATURE_FUNCTION;
        case 4: // FEATURE_ALIASES
          return FEATURE_ALIASES;
        case 5: // FEATURE_DNA_SEQUENCE_LENGTH
          return FEATURE_DNA_SEQUENCE_LENGTH;
        case 6: // FEATURE_DNA_SEQUENCE
          return FEATURE_DNA_SEQUENCE;
        case 7: // FEATURE_MD5
          return FEATURE_MD5;
        case 8: // FEATURE_LOCATIONS
          return FEATURE_LOCATIONS;
        case 9: // FEATURE_PUBLICATIONS
          return FEATURE_PUBLICATIONS;
        case 10: // FEATURE_QUALITY_WARNINGS
          return FEATURE_QUALITY_WARNINGS;
        case 11: // FEATURE_QUALITY_SCORE
          return FEATURE_QUALITY_SCORE;
        case 12: // FEATURE_NOTES
          return FEATURE_NOTES;
        case 13: // FEATURE_INFERENCE
          return FEATURE_INFERENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FEATURE_DNA_SEQUENCE_LENGTH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FEATURE_ID, new org.apache.thrift.meta_data.FieldMetaData("feature_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("feature_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE_FUNCTION, new org.apache.thrift.meta_data.FieldMetaData("feature_function", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE_ALIASES, new org.apache.thrift.meta_data.FieldMetaData("feature_aliases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.FEATURE_DNA_SEQUENCE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("feature_dna_sequence_length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FEATURE_DNA_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("feature_dna_sequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE_MD5, new org.apache.thrift.meta_data.FieldMetaData("feature_md5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE_LOCATIONS, new org.apache.thrift.meta_data.FieldMetaData("feature_locations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Region.class))));
    tmpMap.put(_Fields.FEATURE_PUBLICATIONS, new org.apache.thrift.meta_data.FieldMetaData("feature_publications", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FEATURE_QUALITY_WARNINGS, new org.apache.thrift.meta_data.FieldMetaData("feature_quality_warnings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FEATURE_QUALITY_SCORE, new org.apache.thrift.meta_data.FieldMetaData("feature_quality_score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FEATURE_NOTES, new org.apache.thrift.meta_data.FieldMetaData("feature_notes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FEATURE_INFERENCE, new org.apache.thrift.meta_data.FieldMetaData("feature_inference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Feature_data_mapping.class, metaDataMap);
  }

  public Feature_data_mapping() {
  }

  public Feature_data_mapping(
    String feature_id,
    String feature_type,
    String feature_function,
    Map<String,List<String>> feature_aliases,
    long feature_dna_sequence_length,
    String feature_dna_sequence,
    String feature_md5,
    List<Region> feature_locations,
    List<String> feature_publications,
    List<String> feature_quality_warnings,
    List<String> feature_quality_score,
    List<String> feature_notes,
    String feature_inference)
  {
    this();
    this.feature_id = feature_id;
    this.feature_type = feature_type;
    this.feature_function = feature_function;
    this.feature_aliases = feature_aliases;
    this.feature_dna_sequence_length = feature_dna_sequence_length;
    setFeature_dna_sequence_lengthIsSet(true);
    this.feature_dna_sequence = feature_dna_sequence;
    this.feature_md5 = feature_md5;
    this.feature_locations = feature_locations;
    this.feature_publications = feature_publications;
    this.feature_quality_warnings = feature_quality_warnings;
    this.feature_quality_score = feature_quality_score;
    this.feature_notes = feature_notes;
    this.feature_inference = feature_inference;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Feature_data_mapping(Feature_data_mapping other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFeature_id()) {
      this.feature_id = other.feature_id;
    }
    if (other.isSetFeature_type()) {
      this.feature_type = other.feature_type;
    }
    if (other.isSetFeature_function()) {
      this.feature_function = other.feature_function;
    }
    if (other.isSetFeature_aliases()) {
      Map<String,List<String>> __this__feature_aliases = new TreeMap<String,List<String>>();
      for (Map.Entry<String, List<String>> other_element : other.feature_aliases.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__feature_aliases_copy_key = other_element_key;

        List<String> __this__feature_aliases_copy_value = new ArrayList<String>(other_element_value);

        __this__feature_aliases.put(__this__feature_aliases_copy_key, __this__feature_aliases_copy_value);
      }
      this.feature_aliases = __this__feature_aliases;
    }
    this.feature_dna_sequence_length = other.feature_dna_sequence_length;
    if (other.isSetFeature_dna_sequence()) {
      this.feature_dna_sequence = other.feature_dna_sequence;
    }
    if (other.isSetFeature_md5()) {
      this.feature_md5 = other.feature_md5;
    }
    if (other.isSetFeature_locations()) {
      List<Region> __this__feature_locations = new ArrayList<Region>(other.feature_locations.size());
      for (Region other_element : other.feature_locations) {
        __this__feature_locations.add(new Region(other_element));
      }
      this.feature_locations = __this__feature_locations;
    }
    if (other.isSetFeature_publications()) {
      List<String> __this__feature_publications = new ArrayList<String>(other.feature_publications);
      this.feature_publications = __this__feature_publications;
    }
    if (other.isSetFeature_quality_warnings()) {
      List<String> __this__feature_quality_warnings = new ArrayList<String>(other.feature_quality_warnings);
      this.feature_quality_warnings = __this__feature_quality_warnings;
    }
    if (other.isSetFeature_quality_score()) {
      List<String> __this__feature_quality_score = new ArrayList<String>(other.feature_quality_score);
      this.feature_quality_score = __this__feature_quality_score;
    }
    if (other.isSetFeature_notes()) {
      List<String> __this__feature_notes = new ArrayList<String>(other.feature_notes);
      this.feature_notes = __this__feature_notes;
    }
    if (other.isSetFeature_inference()) {
      this.feature_inference = other.feature_inference;
    }
  }

  public Feature_data_mapping deepCopy() {
    return new Feature_data_mapping(this);
  }

  @Override
  public void clear() {
    this.feature_id = null;
    this.feature_type = null;
    this.feature_function = null;
    this.feature_aliases = null;
    setFeature_dna_sequence_lengthIsSet(false);
    this.feature_dna_sequence_length = 0;
    this.feature_dna_sequence = null;
    this.feature_md5 = null;
    this.feature_locations = null;
    this.feature_publications = null;
    this.feature_quality_warnings = null;
    this.feature_quality_score = null;
    this.feature_notes = null;
    this.feature_inference = null;
  }

  public String getFeature_id() {
    return this.feature_id;
  }

  public Feature_data_mapping setFeature_id(String feature_id) {
    this.feature_id = feature_id;
    return this;
  }

  public void unsetFeature_id() {
    this.feature_id = null;
  }

  /** Returns true if field feature_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_id() {
    return this.feature_id != null;
  }

  public void setFeature_idIsSet(boolean value) {
    if (!value) {
      this.feature_id = null;
    }
  }

  public String getFeature_type() {
    return this.feature_type;
  }

  public Feature_data_mapping setFeature_type(String feature_type) {
    this.feature_type = feature_type;
    return this;
  }

  public void unsetFeature_type() {
    this.feature_type = null;
  }

  /** Returns true if field feature_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_type() {
    return this.feature_type != null;
  }

  public void setFeature_typeIsSet(boolean value) {
    if (!value) {
      this.feature_type = null;
    }
  }

  public String getFeature_function() {
    return this.feature_function;
  }

  public Feature_data_mapping setFeature_function(String feature_function) {
    this.feature_function = feature_function;
    return this;
  }

  public void unsetFeature_function() {
    this.feature_function = null;
  }

  /** Returns true if field feature_function is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_function() {
    return this.feature_function != null;
  }

  public void setFeature_functionIsSet(boolean value) {
    if (!value) {
      this.feature_function = null;
    }
  }

  public int getFeature_aliasesSize() {
    return (this.feature_aliases == null) ? 0 : this.feature_aliases.size();
  }

  public void putToFeature_aliases(String key, List<String> val) {
    if (this.feature_aliases == null) {
      this.feature_aliases = new TreeMap<String,List<String>>();
    }
    this.feature_aliases.put(key, val);
  }

  public Map<String,List<String>> getFeature_aliases() {
    return this.feature_aliases;
  }

  public Feature_data_mapping setFeature_aliases(Map<String,List<String>> feature_aliases) {
    this.feature_aliases = feature_aliases;
    return this;
  }

  public void unsetFeature_aliases() {
    this.feature_aliases = null;
  }

  /** Returns true if field feature_aliases is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_aliases() {
    return this.feature_aliases != null;
  }

  public void setFeature_aliasesIsSet(boolean value) {
    if (!value) {
      this.feature_aliases = null;
    }
  }

  public long getFeature_dna_sequence_length() {
    return this.feature_dna_sequence_length;
  }

  public Feature_data_mapping setFeature_dna_sequence_length(long feature_dna_sequence_length) {
    this.feature_dna_sequence_length = feature_dna_sequence_length;
    setFeature_dna_sequence_lengthIsSet(true);
    return this;
  }

  public void unsetFeature_dna_sequence_length() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEATURE_DNA_SEQUENCE_LENGTH_ISSET_ID);
  }

  /** Returns true if field feature_dna_sequence_length is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_dna_sequence_length() {
    return EncodingUtils.testBit(__isset_bitfield, __FEATURE_DNA_SEQUENCE_LENGTH_ISSET_ID);
  }

  public void setFeature_dna_sequence_lengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEATURE_DNA_SEQUENCE_LENGTH_ISSET_ID, value);
  }

  public String getFeature_dna_sequence() {
    return this.feature_dna_sequence;
  }

  public Feature_data_mapping setFeature_dna_sequence(String feature_dna_sequence) {
    this.feature_dna_sequence = feature_dna_sequence;
    return this;
  }

  public void unsetFeature_dna_sequence() {
    this.feature_dna_sequence = null;
  }

  /** Returns true if field feature_dna_sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_dna_sequence() {
    return this.feature_dna_sequence != null;
  }

  public void setFeature_dna_sequenceIsSet(boolean value) {
    if (!value) {
      this.feature_dna_sequence = null;
    }
  }

  public String getFeature_md5() {
    return this.feature_md5;
  }

  public Feature_data_mapping setFeature_md5(String feature_md5) {
    this.feature_md5 = feature_md5;
    return this;
  }

  public void unsetFeature_md5() {
    this.feature_md5 = null;
  }

  /** Returns true if field feature_md5 is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_md5() {
    return this.feature_md5 != null;
  }

  public void setFeature_md5IsSet(boolean value) {
    if (!value) {
      this.feature_md5 = null;
    }
  }

  public int getFeature_locationsSize() {
    return (this.feature_locations == null) ? 0 : this.feature_locations.size();
  }

  public java.util.Iterator<Region> getFeature_locationsIterator() {
    return (this.feature_locations == null) ? null : this.feature_locations.iterator();
  }

  public void addToFeature_locations(Region elem) {
    if (this.feature_locations == null) {
      this.feature_locations = new ArrayList<Region>();
    }
    this.feature_locations.add(elem);
  }

  public List<Region> getFeature_locations() {
    return this.feature_locations;
  }

  public Feature_data_mapping setFeature_locations(List<Region> feature_locations) {
    this.feature_locations = feature_locations;
    return this;
  }

  public void unsetFeature_locations() {
    this.feature_locations = null;
  }

  /** Returns true if field feature_locations is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_locations() {
    return this.feature_locations != null;
  }

  public void setFeature_locationsIsSet(boolean value) {
    if (!value) {
      this.feature_locations = null;
    }
  }

  public int getFeature_publicationsSize() {
    return (this.feature_publications == null) ? 0 : this.feature_publications.size();
  }

  public java.util.Iterator<String> getFeature_publicationsIterator() {
    return (this.feature_publications == null) ? null : this.feature_publications.iterator();
  }

  public void addToFeature_publications(String elem) {
    if (this.feature_publications == null) {
      this.feature_publications = new ArrayList<String>();
    }
    this.feature_publications.add(elem);
  }

  public List<String> getFeature_publications() {
    return this.feature_publications;
  }

  public Feature_data_mapping setFeature_publications(List<String> feature_publications) {
    this.feature_publications = feature_publications;
    return this;
  }

  public void unsetFeature_publications() {
    this.feature_publications = null;
  }

  /** Returns true if field feature_publications is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_publications() {
    return this.feature_publications != null;
  }

  public void setFeature_publicationsIsSet(boolean value) {
    if (!value) {
      this.feature_publications = null;
    }
  }

  public int getFeature_quality_warningsSize() {
    return (this.feature_quality_warnings == null) ? 0 : this.feature_quality_warnings.size();
  }

  public java.util.Iterator<String> getFeature_quality_warningsIterator() {
    return (this.feature_quality_warnings == null) ? null : this.feature_quality_warnings.iterator();
  }

  public void addToFeature_quality_warnings(String elem) {
    if (this.feature_quality_warnings == null) {
      this.feature_quality_warnings = new ArrayList<String>();
    }
    this.feature_quality_warnings.add(elem);
  }

  public List<String> getFeature_quality_warnings() {
    return this.feature_quality_warnings;
  }

  public Feature_data_mapping setFeature_quality_warnings(List<String> feature_quality_warnings) {
    this.feature_quality_warnings = feature_quality_warnings;
    return this;
  }

  public void unsetFeature_quality_warnings() {
    this.feature_quality_warnings = null;
  }

  /** Returns true if field feature_quality_warnings is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_quality_warnings() {
    return this.feature_quality_warnings != null;
  }

  public void setFeature_quality_warningsIsSet(boolean value) {
    if (!value) {
      this.feature_quality_warnings = null;
    }
  }

  public int getFeature_quality_scoreSize() {
    return (this.feature_quality_score == null) ? 0 : this.feature_quality_score.size();
  }

  public java.util.Iterator<String> getFeature_quality_scoreIterator() {
    return (this.feature_quality_score == null) ? null : this.feature_quality_score.iterator();
  }

  public void addToFeature_quality_score(String elem) {
    if (this.feature_quality_score == null) {
      this.feature_quality_score = new ArrayList<String>();
    }
    this.feature_quality_score.add(elem);
  }

  public List<String> getFeature_quality_score() {
    return this.feature_quality_score;
  }

  public Feature_data_mapping setFeature_quality_score(List<String> feature_quality_score) {
    this.feature_quality_score = feature_quality_score;
    return this;
  }

  public void unsetFeature_quality_score() {
    this.feature_quality_score = null;
  }

  /** Returns true if field feature_quality_score is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_quality_score() {
    return this.feature_quality_score != null;
  }

  public void setFeature_quality_scoreIsSet(boolean value) {
    if (!value) {
      this.feature_quality_score = null;
    }
  }

  public int getFeature_notesSize() {
    return (this.feature_notes == null) ? 0 : this.feature_notes.size();
  }

  public java.util.Iterator<String> getFeature_notesIterator() {
    return (this.feature_notes == null) ? null : this.feature_notes.iterator();
  }

  public void addToFeature_notes(String elem) {
    if (this.feature_notes == null) {
      this.feature_notes = new ArrayList<String>();
    }
    this.feature_notes.add(elem);
  }

  public List<String> getFeature_notes() {
    return this.feature_notes;
  }

  public Feature_data_mapping setFeature_notes(List<String> feature_notes) {
    this.feature_notes = feature_notes;
    return this;
  }

  public void unsetFeature_notes() {
    this.feature_notes = null;
  }

  /** Returns true if field feature_notes is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_notes() {
    return this.feature_notes != null;
  }

  public void setFeature_notesIsSet(boolean value) {
    if (!value) {
      this.feature_notes = null;
    }
  }

  public String getFeature_inference() {
    return this.feature_inference;
  }

  public Feature_data_mapping setFeature_inference(String feature_inference) {
    this.feature_inference = feature_inference;
    return this;
  }

  public void unsetFeature_inference() {
    this.feature_inference = null;
  }

  /** Returns true if field feature_inference is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_inference() {
    return this.feature_inference != null;
  }

  public void setFeature_inferenceIsSet(boolean value) {
    if (!value) {
      this.feature_inference = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FEATURE_ID:
      if (value == null) {
        unsetFeature_id();
      } else {
        setFeature_id((String)value);
      }
      break;

    case FEATURE_TYPE:
      if (value == null) {
        unsetFeature_type();
      } else {
        setFeature_type((String)value);
      }
      break;

    case FEATURE_FUNCTION:
      if (value == null) {
        unsetFeature_function();
      } else {
        setFeature_function((String)value);
      }
      break;

    case FEATURE_ALIASES:
      if (value == null) {
        unsetFeature_aliases();
      } else {
        setFeature_aliases((Map<String,List<String>>)value);
      }
      break;

    case FEATURE_DNA_SEQUENCE_LENGTH:
      if (value == null) {
        unsetFeature_dna_sequence_length();
      } else {
        setFeature_dna_sequence_length((Long)value);
      }
      break;

    case FEATURE_DNA_SEQUENCE:
      if (value == null) {
        unsetFeature_dna_sequence();
      } else {
        setFeature_dna_sequence((String)value);
      }
      break;

    case FEATURE_MD5:
      if (value == null) {
        unsetFeature_md5();
      } else {
        setFeature_md5((String)value);
      }
      break;

    case FEATURE_LOCATIONS:
      if (value == null) {
        unsetFeature_locations();
      } else {
        setFeature_locations((List<Region>)value);
      }
      break;

    case FEATURE_PUBLICATIONS:
      if (value == null) {
        unsetFeature_publications();
      } else {
        setFeature_publications((List<String>)value);
      }
      break;

    case FEATURE_QUALITY_WARNINGS:
      if (value == null) {
        unsetFeature_quality_warnings();
      } else {
        setFeature_quality_warnings((List<String>)value);
      }
      break;

    case FEATURE_QUALITY_SCORE:
      if (value == null) {
        unsetFeature_quality_score();
      } else {
        setFeature_quality_score((List<String>)value);
      }
      break;

    case FEATURE_NOTES:
      if (value == null) {
        unsetFeature_notes();
      } else {
        setFeature_notes((List<String>)value);
      }
      break;

    case FEATURE_INFERENCE:
      if (value == null) {
        unsetFeature_inference();
      } else {
        setFeature_inference((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FEATURE_ID:
      return getFeature_id();

    case FEATURE_TYPE:
      return getFeature_type();

    case FEATURE_FUNCTION:
      return getFeature_function();

    case FEATURE_ALIASES:
      return getFeature_aliases();

    case FEATURE_DNA_SEQUENCE_LENGTH:
      return Long.valueOf(getFeature_dna_sequence_length());

    case FEATURE_DNA_SEQUENCE:
      return getFeature_dna_sequence();

    case FEATURE_MD5:
      return getFeature_md5();

    case FEATURE_LOCATIONS:
      return getFeature_locations();

    case FEATURE_PUBLICATIONS:
      return getFeature_publications();

    case FEATURE_QUALITY_WARNINGS:
      return getFeature_quality_warnings();

    case FEATURE_QUALITY_SCORE:
      return getFeature_quality_score();

    case FEATURE_NOTES:
      return getFeature_notes();

    case FEATURE_INFERENCE:
      return getFeature_inference();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FEATURE_ID:
      return isSetFeature_id();
    case FEATURE_TYPE:
      return isSetFeature_type();
    case FEATURE_FUNCTION:
      return isSetFeature_function();
    case FEATURE_ALIASES:
      return isSetFeature_aliases();
    case FEATURE_DNA_SEQUENCE_LENGTH:
      return isSetFeature_dna_sequence_length();
    case FEATURE_DNA_SEQUENCE:
      return isSetFeature_dna_sequence();
    case FEATURE_MD5:
      return isSetFeature_md5();
    case FEATURE_LOCATIONS:
      return isSetFeature_locations();
    case FEATURE_PUBLICATIONS:
      return isSetFeature_publications();
    case FEATURE_QUALITY_WARNINGS:
      return isSetFeature_quality_warnings();
    case FEATURE_QUALITY_SCORE:
      return isSetFeature_quality_score();
    case FEATURE_NOTES:
      return isSetFeature_notes();
    case FEATURE_INFERENCE:
      return isSetFeature_inference();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Feature_data_mapping)
      return this.equals((Feature_data_mapping)that);
    return false;
  }

  public boolean equals(Feature_data_mapping that) {
    if (that == null)
      return false;

    boolean this_present_feature_id = true && this.isSetFeature_id();
    boolean that_present_feature_id = true && that.isSetFeature_id();
    if (this_present_feature_id || that_present_feature_id) {
      if (!(this_present_feature_id && that_present_feature_id))
        return false;
      if (!this.feature_id.equals(that.feature_id))
        return false;
    }

    boolean this_present_feature_type = true && this.isSetFeature_type();
    boolean that_present_feature_type = true && that.isSetFeature_type();
    if (this_present_feature_type || that_present_feature_type) {
      if (!(this_present_feature_type && that_present_feature_type))
        return false;
      if (!this.feature_type.equals(that.feature_type))
        return false;
    }

    boolean this_present_feature_function = true && this.isSetFeature_function();
    boolean that_present_feature_function = true && that.isSetFeature_function();
    if (this_present_feature_function || that_present_feature_function) {
      if (!(this_present_feature_function && that_present_feature_function))
        return false;
      if (!this.feature_function.equals(that.feature_function))
        return false;
    }

    boolean this_present_feature_aliases = true && this.isSetFeature_aliases();
    boolean that_present_feature_aliases = true && that.isSetFeature_aliases();
    if (this_present_feature_aliases || that_present_feature_aliases) {
      if (!(this_present_feature_aliases && that_present_feature_aliases))
        return false;
      if (!this.feature_aliases.equals(that.feature_aliases))
        return false;
    }

    boolean this_present_feature_dna_sequence_length = true;
    boolean that_present_feature_dna_sequence_length = true;
    if (this_present_feature_dna_sequence_length || that_present_feature_dna_sequence_length) {
      if (!(this_present_feature_dna_sequence_length && that_present_feature_dna_sequence_length))
        return false;
      if (this.feature_dna_sequence_length != that.feature_dna_sequence_length)
        return false;
    }

    boolean this_present_feature_dna_sequence = true && this.isSetFeature_dna_sequence();
    boolean that_present_feature_dna_sequence = true && that.isSetFeature_dna_sequence();
    if (this_present_feature_dna_sequence || that_present_feature_dna_sequence) {
      if (!(this_present_feature_dna_sequence && that_present_feature_dna_sequence))
        return false;
      if (!this.feature_dna_sequence.equals(that.feature_dna_sequence))
        return false;
    }

    boolean this_present_feature_md5 = true && this.isSetFeature_md5();
    boolean that_present_feature_md5 = true && that.isSetFeature_md5();
    if (this_present_feature_md5 || that_present_feature_md5) {
      if (!(this_present_feature_md5 && that_present_feature_md5))
        return false;
      if (!this.feature_md5.equals(that.feature_md5))
        return false;
    }

    boolean this_present_feature_locations = true && this.isSetFeature_locations();
    boolean that_present_feature_locations = true && that.isSetFeature_locations();
    if (this_present_feature_locations || that_present_feature_locations) {
      if (!(this_present_feature_locations && that_present_feature_locations))
        return false;
      if (!this.feature_locations.equals(that.feature_locations))
        return false;
    }

    boolean this_present_feature_publications = true && this.isSetFeature_publications();
    boolean that_present_feature_publications = true && that.isSetFeature_publications();
    if (this_present_feature_publications || that_present_feature_publications) {
      if (!(this_present_feature_publications && that_present_feature_publications))
        return false;
      if (!this.feature_publications.equals(that.feature_publications))
        return false;
    }

    boolean this_present_feature_quality_warnings = true && this.isSetFeature_quality_warnings();
    boolean that_present_feature_quality_warnings = true && that.isSetFeature_quality_warnings();
    if (this_present_feature_quality_warnings || that_present_feature_quality_warnings) {
      if (!(this_present_feature_quality_warnings && that_present_feature_quality_warnings))
        return false;
      if (!this.feature_quality_warnings.equals(that.feature_quality_warnings))
        return false;
    }

    boolean this_present_feature_quality_score = true && this.isSetFeature_quality_score();
    boolean that_present_feature_quality_score = true && that.isSetFeature_quality_score();
    if (this_present_feature_quality_score || that_present_feature_quality_score) {
      if (!(this_present_feature_quality_score && that_present_feature_quality_score))
        return false;
      if (!this.feature_quality_score.equals(that.feature_quality_score))
        return false;
    }

    boolean this_present_feature_notes = true && this.isSetFeature_notes();
    boolean that_present_feature_notes = true && that.isSetFeature_notes();
    if (this_present_feature_notes || that_present_feature_notes) {
      if (!(this_present_feature_notes && that_present_feature_notes))
        return false;
      if (!this.feature_notes.equals(that.feature_notes))
        return false;
    }

    boolean this_present_feature_inference = true && this.isSetFeature_inference();
    boolean that_present_feature_inference = true && that.isSetFeature_inference();
    if (this_present_feature_inference || that_present_feature_inference) {
      if (!(this_present_feature_inference && that_present_feature_inference))
        return false;
      if (!this.feature_inference.equals(that.feature_inference))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_feature_id = true && (isSetFeature_id());
    list.add(present_feature_id);
    if (present_feature_id)
      list.add(feature_id);

    boolean present_feature_type = true && (isSetFeature_type());
    list.add(present_feature_type);
    if (present_feature_type)
      list.add(feature_type);

    boolean present_feature_function = true && (isSetFeature_function());
    list.add(present_feature_function);
    if (present_feature_function)
      list.add(feature_function);

    boolean present_feature_aliases = true && (isSetFeature_aliases());
    list.add(present_feature_aliases);
    if (present_feature_aliases)
      list.add(feature_aliases);

    boolean present_feature_dna_sequence_length = true;
    list.add(present_feature_dna_sequence_length);
    if (present_feature_dna_sequence_length)
      list.add(feature_dna_sequence_length);

    boolean present_feature_dna_sequence = true && (isSetFeature_dna_sequence());
    list.add(present_feature_dna_sequence);
    if (present_feature_dna_sequence)
      list.add(feature_dna_sequence);

    boolean present_feature_md5 = true && (isSetFeature_md5());
    list.add(present_feature_md5);
    if (present_feature_md5)
      list.add(feature_md5);

    boolean present_feature_locations = true && (isSetFeature_locations());
    list.add(present_feature_locations);
    if (present_feature_locations)
      list.add(feature_locations);

    boolean present_feature_publications = true && (isSetFeature_publications());
    list.add(present_feature_publications);
    if (present_feature_publications)
      list.add(feature_publications);

    boolean present_feature_quality_warnings = true && (isSetFeature_quality_warnings());
    list.add(present_feature_quality_warnings);
    if (present_feature_quality_warnings)
      list.add(feature_quality_warnings);

    boolean present_feature_quality_score = true && (isSetFeature_quality_score());
    list.add(present_feature_quality_score);
    if (present_feature_quality_score)
      list.add(feature_quality_score);

    boolean present_feature_notes = true && (isSetFeature_notes());
    list.add(present_feature_notes);
    if (present_feature_notes)
      list.add(feature_notes);

    boolean present_feature_inference = true && (isSetFeature_inference());
    list.add(present_feature_inference);
    if (present_feature_inference)
      list.add(feature_inference);

    return list.hashCode();
  }

  @Override
  public int compareTo(Feature_data_mapping other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFeature_id()).compareTo(other.isSetFeature_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_id, other.feature_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_type()).compareTo(other.isSetFeature_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_type, other.feature_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_function()).compareTo(other.isSetFeature_function());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_function()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_function, other.feature_function);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_aliases()).compareTo(other.isSetFeature_aliases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_aliases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_aliases, other.feature_aliases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_dna_sequence_length()).compareTo(other.isSetFeature_dna_sequence_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_dna_sequence_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_dna_sequence_length, other.feature_dna_sequence_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_dna_sequence()).compareTo(other.isSetFeature_dna_sequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_dna_sequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_dna_sequence, other.feature_dna_sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_md5()).compareTo(other.isSetFeature_md5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_md5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_md5, other.feature_md5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_locations()).compareTo(other.isSetFeature_locations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_locations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_locations, other.feature_locations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_publications()).compareTo(other.isSetFeature_publications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_publications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_publications, other.feature_publications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_quality_warnings()).compareTo(other.isSetFeature_quality_warnings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_quality_warnings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_quality_warnings, other.feature_quality_warnings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_quality_score()).compareTo(other.isSetFeature_quality_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_quality_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_quality_score, other.feature_quality_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_notes()).compareTo(other.isSetFeature_notes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_notes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_notes, other.feature_notes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_inference()).compareTo(other.isSetFeature_inference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_inference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_inference, other.feature_inference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Feature_data_mapping(");
    boolean first = true;

    sb.append("feature_id:");
    if (this.feature_id == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_type:");
    if (this.feature_type == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_function:");
    if (this.feature_function == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_function);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_aliases:");
    if (this.feature_aliases == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_aliases);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_dna_sequence_length:");
    sb.append(this.feature_dna_sequence_length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_dna_sequence:");
    if (this.feature_dna_sequence == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_dna_sequence);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_md5:");
    if (this.feature_md5 == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_md5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_locations:");
    if (this.feature_locations == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_locations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_publications:");
    if (this.feature_publications == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_publications);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_quality_warnings:");
    if (this.feature_quality_warnings == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_quality_warnings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_quality_score:");
    if (this.feature_quality_score == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_quality_score);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_notes:");
    if (this.feature_notes == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_notes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_inference:");
    if (this.feature_inference == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_inference);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Feature_data_mappingStandardSchemeFactory implements SchemeFactory {
    public Feature_data_mappingStandardScheme getScheme() {
      return new Feature_data_mappingStandardScheme();
    }
  }

  private static class Feature_data_mappingStandardScheme extends StandardScheme<Feature_data_mapping> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Feature_data_mapping struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FEATURE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature_id = iprot.readString();
              struct.setFeature_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FEATURE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature_type = iprot.readString();
              struct.setFeature_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FEATURE_FUNCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature_function = iprot.readString();
              struct.setFeature_functionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FEATURE_ALIASES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map142 = iprot.readMapBegin();
                struct.feature_aliases = new TreeMap<String,List<String>>();
                String _key143;
                List<String> _val144;
                for (int _i145 = 0; _i145 < _map142.size; ++_i145)
                {
                  _key143 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                    _val144 = new ArrayList<String>(_list146.size);
                    String _elem147;
                    for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                    {
                      _elem147 = iprot.readString();
                      _val144.add(_elem147);
                    }
                    iprot.readListEnd();
                  }
                  struct.feature_aliases.put(_key143, _val144);
                }
                iprot.readMapEnd();
              }
              struct.setFeature_aliasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FEATURE_DNA_SEQUENCE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.feature_dna_sequence_length = iprot.readI64();
              struct.setFeature_dna_sequence_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FEATURE_DNA_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature_dna_sequence = iprot.readString();
              struct.setFeature_dna_sequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FEATURE_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature_md5 = iprot.readString();
              struct.setFeature_md5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FEATURE_LOCATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list149 = iprot.readListBegin();
                struct.feature_locations = new ArrayList<Region>(_list149.size);
                Region _elem150;
                for (int _i151 = 0; _i151 < _list149.size; ++_i151)
                {
                  _elem150 = new Region();
                  _elem150.read(iprot);
                  struct.feature_locations.add(_elem150);
                }
                iprot.readListEnd();
              }
              struct.setFeature_locationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FEATURE_PUBLICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                struct.feature_publications = new ArrayList<String>(_list152.size);
                String _elem153;
                for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                {
                  _elem153 = iprot.readString();
                  struct.feature_publications.add(_elem153);
                }
                iprot.readListEnd();
              }
              struct.setFeature_publicationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FEATURE_QUALITY_WARNINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                struct.feature_quality_warnings = new ArrayList<String>(_list155.size);
                String _elem156;
                for (int _i157 = 0; _i157 < _list155.size; ++_i157)
                {
                  _elem156 = iprot.readString();
                  struct.feature_quality_warnings.add(_elem156);
                }
                iprot.readListEnd();
              }
              struct.setFeature_quality_warningsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FEATURE_QUALITY_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                struct.feature_quality_score = new ArrayList<String>(_list158.size);
                String _elem159;
                for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                {
                  _elem159 = iprot.readString();
                  struct.feature_quality_score.add(_elem159);
                }
                iprot.readListEnd();
              }
              struct.setFeature_quality_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FEATURE_NOTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list161 = iprot.readListBegin();
                struct.feature_notes = new ArrayList<String>(_list161.size);
                String _elem162;
                for (int _i163 = 0; _i163 < _list161.size; ++_i163)
                {
                  _elem162 = iprot.readString();
                  struct.feature_notes.add(_elem162);
                }
                iprot.readListEnd();
              }
              struct.setFeature_notesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FEATURE_INFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feature_inference = iprot.readString();
              struct.setFeature_inferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Feature_data_mapping struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.feature_id != null) {
        oprot.writeFieldBegin(FEATURE_ID_FIELD_DESC);
        oprot.writeString(struct.feature_id);
        oprot.writeFieldEnd();
      }
      if (struct.feature_type != null) {
        oprot.writeFieldBegin(FEATURE_TYPE_FIELD_DESC);
        oprot.writeString(struct.feature_type);
        oprot.writeFieldEnd();
      }
      if (struct.feature_function != null) {
        oprot.writeFieldBegin(FEATURE_FUNCTION_FIELD_DESC);
        oprot.writeString(struct.feature_function);
        oprot.writeFieldEnd();
      }
      if (struct.feature_aliases != null) {
        oprot.writeFieldBegin(FEATURE_ALIASES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.feature_aliases.size()));
          for (Map.Entry<String, List<String>> _iter164 : struct.feature_aliases.entrySet())
          {
            oprot.writeString(_iter164.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter164.getValue().size()));
              for (String _iter165 : _iter164.getValue())
              {
                oprot.writeString(_iter165);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FEATURE_DNA_SEQUENCE_LENGTH_FIELD_DESC);
      oprot.writeI64(struct.feature_dna_sequence_length);
      oprot.writeFieldEnd();
      if (struct.feature_dna_sequence != null) {
        oprot.writeFieldBegin(FEATURE_DNA_SEQUENCE_FIELD_DESC);
        oprot.writeString(struct.feature_dna_sequence);
        oprot.writeFieldEnd();
      }
      if (struct.feature_md5 != null) {
        oprot.writeFieldBegin(FEATURE_MD5_FIELD_DESC);
        oprot.writeString(struct.feature_md5);
        oprot.writeFieldEnd();
      }
      if (struct.feature_locations != null) {
        oprot.writeFieldBegin(FEATURE_LOCATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.feature_locations.size()));
          for (Region _iter166 : struct.feature_locations)
          {
            _iter166.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.feature_publications != null) {
        oprot.writeFieldBegin(FEATURE_PUBLICATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_publications.size()));
          for (String _iter167 : struct.feature_publications)
          {
            oprot.writeString(_iter167);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.feature_quality_warnings != null) {
        oprot.writeFieldBegin(FEATURE_QUALITY_WARNINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_quality_warnings.size()));
          for (String _iter168 : struct.feature_quality_warnings)
          {
            oprot.writeString(_iter168);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.feature_quality_score != null) {
        oprot.writeFieldBegin(FEATURE_QUALITY_SCORE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_quality_score.size()));
          for (String _iter169 : struct.feature_quality_score)
          {
            oprot.writeString(_iter169);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.feature_notes != null) {
        oprot.writeFieldBegin(FEATURE_NOTES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_notes.size()));
          for (String _iter170 : struct.feature_notes)
          {
            oprot.writeString(_iter170);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.feature_inference != null) {
        oprot.writeFieldBegin(FEATURE_INFERENCE_FIELD_DESC);
        oprot.writeString(struct.feature_inference);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Feature_data_mappingTupleSchemeFactory implements SchemeFactory {
    public Feature_data_mappingTupleScheme getScheme() {
      return new Feature_data_mappingTupleScheme();
    }
  }

  private static class Feature_data_mappingTupleScheme extends TupleScheme<Feature_data_mapping> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Feature_data_mapping struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFeature_id()) {
        optionals.set(0);
      }
      if (struct.isSetFeature_type()) {
        optionals.set(1);
      }
      if (struct.isSetFeature_function()) {
        optionals.set(2);
      }
      if (struct.isSetFeature_aliases()) {
        optionals.set(3);
      }
      if (struct.isSetFeature_dna_sequence_length()) {
        optionals.set(4);
      }
      if (struct.isSetFeature_dna_sequence()) {
        optionals.set(5);
      }
      if (struct.isSetFeature_md5()) {
        optionals.set(6);
      }
      if (struct.isSetFeature_locations()) {
        optionals.set(7);
      }
      if (struct.isSetFeature_publications()) {
        optionals.set(8);
      }
      if (struct.isSetFeature_quality_warnings()) {
        optionals.set(9);
      }
      if (struct.isSetFeature_quality_score()) {
        optionals.set(10);
      }
      if (struct.isSetFeature_notes()) {
        optionals.set(11);
      }
      if (struct.isSetFeature_inference()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetFeature_id()) {
        oprot.writeString(struct.feature_id);
      }
      if (struct.isSetFeature_type()) {
        oprot.writeString(struct.feature_type);
      }
      if (struct.isSetFeature_function()) {
        oprot.writeString(struct.feature_function);
      }
      if (struct.isSetFeature_aliases()) {
        {
          oprot.writeI32(struct.feature_aliases.size());
          for (Map.Entry<String, List<String>> _iter171 : struct.feature_aliases.entrySet())
          {
            oprot.writeString(_iter171.getKey());
            {
              oprot.writeI32(_iter171.getValue().size());
              for (String _iter172 : _iter171.getValue())
              {
                oprot.writeString(_iter172);
              }
            }
          }
        }
      }
      if (struct.isSetFeature_dna_sequence_length()) {
        oprot.writeI64(struct.feature_dna_sequence_length);
      }
      if (struct.isSetFeature_dna_sequence()) {
        oprot.writeString(struct.feature_dna_sequence);
      }
      if (struct.isSetFeature_md5()) {
        oprot.writeString(struct.feature_md5);
      }
      if (struct.isSetFeature_locations()) {
        {
          oprot.writeI32(struct.feature_locations.size());
          for (Region _iter173 : struct.feature_locations)
          {
            _iter173.write(oprot);
          }
        }
      }
      if (struct.isSetFeature_publications()) {
        {
          oprot.writeI32(struct.feature_publications.size());
          for (String _iter174 : struct.feature_publications)
          {
            oprot.writeString(_iter174);
          }
        }
      }
      if (struct.isSetFeature_quality_warnings()) {
        {
          oprot.writeI32(struct.feature_quality_warnings.size());
          for (String _iter175 : struct.feature_quality_warnings)
          {
            oprot.writeString(_iter175);
          }
        }
      }
      if (struct.isSetFeature_quality_score()) {
        {
          oprot.writeI32(struct.feature_quality_score.size());
          for (String _iter176 : struct.feature_quality_score)
          {
            oprot.writeString(_iter176);
          }
        }
      }
      if (struct.isSetFeature_notes()) {
        {
          oprot.writeI32(struct.feature_notes.size());
          for (String _iter177 : struct.feature_notes)
          {
            oprot.writeString(_iter177);
          }
        }
      }
      if (struct.isSetFeature_inference()) {
        oprot.writeString(struct.feature_inference);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Feature_data_mapping struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.feature_id = iprot.readString();
        struct.setFeature_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.feature_type = iprot.readString();
        struct.setFeature_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.feature_function = iprot.readString();
        struct.setFeature_functionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map178 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.feature_aliases = new TreeMap<String,List<String>>();
          String _key179;
          List<String> _val180;
          for (int _i181 = 0; _i181 < _map178.size; ++_i181)
          {
            _key179 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list182 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val180 = new ArrayList<String>(_list182.size);
              String _elem183;
              for (int _i184 = 0; _i184 < _list182.size; ++_i184)
              {
                _elem183 = iprot.readString();
                _val180.add(_elem183);
              }
            }
            struct.feature_aliases.put(_key179, _val180);
          }
        }
        struct.setFeature_aliasesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.feature_dna_sequence_length = iprot.readI64();
        struct.setFeature_dna_sequence_lengthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.feature_dna_sequence = iprot.readString();
        struct.setFeature_dna_sequenceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.feature_md5 = iprot.readString();
        struct.setFeature_md5IsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list185 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.feature_locations = new ArrayList<Region>(_list185.size);
          Region _elem186;
          for (int _i187 = 0; _i187 < _list185.size; ++_i187)
          {
            _elem186 = new Region();
            _elem186.read(iprot);
            struct.feature_locations.add(_elem186);
          }
        }
        struct.setFeature_locationsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list188 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.feature_publications = new ArrayList<String>(_list188.size);
          String _elem189;
          for (int _i190 = 0; _i190 < _list188.size; ++_i190)
          {
            _elem189 = iprot.readString();
            struct.feature_publications.add(_elem189);
          }
        }
        struct.setFeature_publicationsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.feature_quality_warnings = new ArrayList<String>(_list191.size);
          String _elem192;
          for (int _i193 = 0; _i193 < _list191.size; ++_i193)
          {
            _elem192 = iprot.readString();
            struct.feature_quality_warnings.add(_elem192);
          }
        }
        struct.setFeature_quality_warningsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list194 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.feature_quality_score = new ArrayList<String>(_list194.size);
          String _elem195;
          for (int _i196 = 0; _i196 < _list194.size; ++_i196)
          {
            _elem195 = iprot.readString();
            struct.feature_quality_score.add(_elem195);
          }
        }
        struct.setFeature_quality_scoreIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.feature_notes = new ArrayList<String>(_list197.size);
          String _elem198;
          for (int _i199 = 0; _i199 < _list197.size; ++_i199)
          {
            _elem198 = iprot.readString();
            struct.feature_notes.add(_elem198);
          }
        }
        struct.setFeature_notesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.feature_inference = iprot.readString();
        struct.setFeature_inferenceIsSet(true);
      }
    }
  }

}

