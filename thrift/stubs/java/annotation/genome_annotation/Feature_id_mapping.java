/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genome_annotation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-25")
public class Feature_id_mapping implements org.apache.thrift.TBase<Feature_id_mapping, Feature_id_mapping._Fields>, java.io.Serializable, Cloneable, Comparable<Feature_id_mapping> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Feature_id_mapping");

  private static final org.apache.thrift.protocol.TField BY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("by_type", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField BY_REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("by_region", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField BY_FUNCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("by_function", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField BY_ALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("by_alias", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Feature_id_mappingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Feature_id_mappingTupleSchemeFactory());
  }

  public Map<String,List<String>> by_type; // required
  public Map<String,Map<String,Map<String,List<String>>>> by_region; // required
  public Map<String,List<String>> by_function; // required
  public Map<String,List<String>> by_alias; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BY_TYPE((short)1, "by_type"),
    BY_REGION((short)2, "by_region"),
    BY_FUNCTION((short)3, "by_function"),
    BY_ALIAS((short)4, "by_alias");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BY_TYPE
          return BY_TYPE;
        case 2: // BY_REGION
          return BY_REGION;
        case 3: // BY_FUNCTION
          return BY_FUNCTION;
        case 4: // BY_ALIAS
          return BY_ALIAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("by_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.BY_REGION, new org.apache.thrift.meta_data.FieldMetaData("by_region", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))))));
    tmpMap.put(_Fields.BY_FUNCTION, new org.apache.thrift.meta_data.FieldMetaData("by_function", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.BY_ALIAS, new org.apache.thrift.meta_data.FieldMetaData("by_alias", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Feature_id_mapping.class, metaDataMap);
  }

  public Feature_id_mapping() {
    this.by_type = new TreeMap<String,List<String>>();

    this.by_region = new TreeMap<String,Map<String,Map<String,List<String>>>>();

    this.by_function = new TreeMap<String,List<String>>();

    this.by_alias = new TreeMap<String,List<String>>();

  }

  public Feature_id_mapping(
    Map<String,List<String>> by_type,
    Map<String,Map<String,Map<String,List<String>>>> by_region,
    Map<String,List<String>> by_function,
    Map<String,List<String>> by_alias)
  {
    this();
    this.by_type = by_type;
    this.by_region = by_region;
    this.by_function = by_function;
    this.by_alias = by_alias;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Feature_id_mapping(Feature_id_mapping other) {
    if (other.isSetBy_type()) {
      Map<String,List<String>> __this__by_type = new TreeMap<String,List<String>>();
      for (Map.Entry<String, List<String>> other_element : other.by_type.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__by_type_copy_key = other_element_key;

        List<String> __this__by_type_copy_value = new ArrayList<String>(other_element_value);

        __this__by_type.put(__this__by_type_copy_key, __this__by_type_copy_value);
      }
      this.by_type = __this__by_type;
    }
    if (other.isSetBy_region()) {
      Map<String,Map<String,Map<String,List<String>>>> __this__by_region = new TreeMap<String,Map<String,Map<String,List<String>>>>();
      for (Map.Entry<String, Map<String,Map<String,List<String>>>> other_element : other.by_region.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Map<String,List<String>>> other_element_value = other_element.getValue();

        String __this__by_region_copy_key = other_element_key;

        Map<String,Map<String,List<String>>> __this__by_region_copy_value = new TreeMap<String,Map<String,List<String>>>();
        for (Map.Entry<String, Map<String,List<String>>> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          Map<String,List<String>> other_element_value_element_value = other_element_value_element.getValue();

          String __this__by_region_copy_value_copy_key = other_element_value_element_key;

          Map<String,List<String>> __this__by_region_copy_value_copy_value = new TreeMap<String,List<String>>();
          for (Map.Entry<String, List<String>> other_element_value_element_value_element : other_element_value_element_value.entrySet()) {

            String other_element_value_element_value_element_key = other_element_value_element_value_element.getKey();
            List<String> other_element_value_element_value_element_value = other_element_value_element_value_element.getValue();

            String __this__by_region_copy_value_copy_value_copy_key = other_element_value_element_value_element_key;

            List<String> __this__by_region_copy_value_copy_value_copy_value = new ArrayList<String>(other_element_value_element_value_element_value);

            __this__by_region_copy_value_copy_value.put(__this__by_region_copy_value_copy_value_copy_key, __this__by_region_copy_value_copy_value_copy_value);
          }

          __this__by_region_copy_value.put(__this__by_region_copy_value_copy_key, __this__by_region_copy_value_copy_value);
        }

        __this__by_region.put(__this__by_region_copy_key, __this__by_region_copy_value);
      }
      this.by_region = __this__by_region;
    }
    if (other.isSetBy_function()) {
      Map<String,List<String>> __this__by_function = new TreeMap<String,List<String>>();
      for (Map.Entry<String, List<String>> other_element : other.by_function.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__by_function_copy_key = other_element_key;

        List<String> __this__by_function_copy_value = new ArrayList<String>(other_element_value);

        __this__by_function.put(__this__by_function_copy_key, __this__by_function_copy_value);
      }
      this.by_function = __this__by_function;
    }
    if (other.isSetBy_alias()) {
      Map<String,List<String>> __this__by_alias = new TreeMap<String,List<String>>();
      for (Map.Entry<String, List<String>> other_element : other.by_alias.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__by_alias_copy_key = other_element_key;

        List<String> __this__by_alias_copy_value = new ArrayList<String>(other_element_value);

        __this__by_alias.put(__this__by_alias_copy_key, __this__by_alias_copy_value);
      }
      this.by_alias = __this__by_alias;
    }
  }

  public Feature_id_mapping deepCopy() {
    return new Feature_id_mapping(this);
  }

  @Override
  public void clear() {
    this.by_type = new TreeMap<String,List<String>>();

    this.by_region = new TreeMap<String,Map<String,Map<String,List<String>>>>();

    this.by_function = new TreeMap<String,List<String>>();

    this.by_alias = new TreeMap<String,List<String>>();

  }

  public int getBy_typeSize() {
    return (this.by_type == null) ? 0 : this.by_type.size();
  }

  public void putToBy_type(String key, List<String> val) {
    if (this.by_type == null) {
      this.by_type = new TreeMap<String,List<String>>();
    }
    this.by_type.put(key, val);
  }

  public Map<String,List<String>> getBy_type() {
    return this.by_type;
  }

  public Feature_id_mapping setBy_type(Map<String,List<String>> by_type) {
    this.by_type = by_type;
    return this;
  }

  public void unsetBy_type() {
    this.by_type = null;
  }

  /** Returns true if field by_type is set (has been assigned a value) and false otherwise */
  public boolean isSetBy_type() {
    return this.by_type != null;
  }

  public void setBy_typeIsSet(boolean value) {
    if (!value) {
      this.by_type = null;
    }
  }

  public int getBy_regionSize() {
    return (this.by_region == null) ? 0 : this.by_region.size();
  }

  public void putToBy_region(String key, Map<String,Map<String,List<String>>> val) {
    if (this.by_region == null) {
      this.by_region = new TreeMap<String,Map<String,Map<String,List<String>>>>();
    }
    this.by_region.put(key, val);
  }

  public Map<String,Map<String,Map<String,List<String>>>> getBy_region() {
    return this.by_region;
  }

  public Feature_id_mapping setBy_region(Map<String,Map<String,Map<String,List<String>>>> by_region) {
    this.by_region = by_region;
    return this;
  }

  public void unsetBy_region() {
    this.by_region = null;
  }

  /** Returns true if field by_region is set (has been assigned a value) and false otherwise */
  public boolean isSetBy_region() {
    return this.by_region != null;
  }

  public void setBy_regionIsSet(boolean value) {
    if (!value) {
      this.by_region = null;
    }
  }

  public int getBy_functionSize() {
    return (this.by_function == null) ? 0 : this.by_function.size();
  }

  public void putToBy_function(String key, List<String> val) {
    if (this.by_function == null) {
      this.by_function = new TreeMap<String,List<String>>();
    }
    this.by_function.put(key, val);
  }

  public Map<String,List<String>> getBy_function() {
    return this.by_function;
  }

  public Feature_id_mapping setBy_function(Map<String,List<String>> by_function) {
    this.by_function = by_function;
    return this;
  }

  public void unsetBy_function() {
    this.by_function = null;
  }

  /** Returns true if field by_function is set (has been assigned a value) and false otherwise */
  public boolean isSetBy_function() {
    return this.by_function != null;
  }

  public void setBy_functionIsSet(boolean value) {
    if (!value) {
      this.by_function = null;
    }
  }

  public int getBy_aliasSize() {
    return (this.by_alias == null) ? 0 : this.by_alias.size();
  }

  public void putToBy_alias(String key, List<String> val) {
    if (this.by_alias == null) {
      this.by_alias = new TreeMap<String,List<String>>();
    }
    this.by_alias.put(key, val);
  }

  public Map<String,List<String>> getBy_alias() {
    return this.by_alias;
  }

  public Feature_id_mapping setBy_alias(Map<String,List<String>> by_alias) {
    this.by_alias = by_alias;
    return this;
  }

  public void unsetBy_alias() {
    this.by_alias = null;
  }

  /** Returns true if field by_alias is set (has been assigned a value) and false otherwise */
  public boolean isSetBy_alias() {
    return this.by_alias != null;
  }

  public void setBy_aliasIsSet(boolean value) {
    if (!value) {
      this.by_alias = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BY_TYPE:
      if (value == null) {
        unsetBy_type();
      } else {
        setBy_type((Map<String,List<String>>)value);
      }
      break;

    case BY_REGION:
      if (value == null) {
        unsetBy_region();
      } else {
        setBy_region((Map<String,Map<String,Map<String,List<String>>>>)value);
      }
      break;

    case BY_FUNCTION:
      if (value == null) {
        unsetBy_function();
      } else {
        setBy_function((Map<String,List<String>>)value);
      }
      break;

    case BY_ALIAS:
      if (value == null) {
        unsetBy_alias();
      } else {
        setBy_alias((Map<String,List<String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BY_TYPE:
      return getBy_type();

    case BY_REGION:
      return getBy_region();

    case BY_FUNCTION:
      return getBy_function();

    case BY_ALIAS:
      return getBy_alias();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BY_TYPE:
      return isSetBy_type();
    case BY_REGION:
      return isSetBy_region();
    case BY_FUNCTION:
      return isSetBy_function();
    case BY_ALIAS:
      return isSetBy_alias();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Feature_id_mapping)
      return this.equals((Feature_id_mapping)that);
    return false;
  }

  public boolean equals(Feature_id_mapping that) {
    if (that == null)
      return false;

    boolean this_present_by_type = true && this.isSetBy_type();
    boolean that_present_by_type = true && that.isSetBy_type();
    if (this_present_by_type || that_present_by_type) {
      if (!(this_present_by_type && that_present_by_type))
        return false;
      if (!this.by_type.equals(that.by_type))
        return false;
    }

    boolean this_present_by_region = true && this.isSetBy_region();
    boolean that_present_by_region = true && that.isSetBy_region();
    if (this_present_by_region || that_present_by_region) {
      if (!(this_present_by_region && that_present_by_region))
        return false;
      if (!this.by_region.equals(that.by_region))
        return false;
    }

    boolean this_present_by_function = true && this.isSetBy_function();
    boolean that_present_by_function = true && that.isSetBy_function();
    if (this_present_by_function || that_present_by_function) {
      if (!(this_present_by_function && that_present_by_function))
        return false;
      if (!this.by_function.equals(that.by_function))
        return false;
    }

    boolean this_present_by_alias = true && this.isSetBy_alias();
    boolean that_present_by_alias = true && that.isSetBy_alias();
    if (this_present_by_alias || that_present_by_alias) {
      if (!(this_present_by_alias && that_present_by_alias))
        return false;
      if (!this.by_alias.equals(that.by_alias))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_by_type = true && (isSetBy_type());
    list.add(present_by_type);
    if (present_by_type)
      list.add(by_type);

    boolean present_by_region = true && (isSetBy_region());
    list.add(present_by_region);
    if (present_by_region)
      list.add(by_region);

    boolean present_by_function = true && (isSetBy_function());
    list.add(present_by_function);
    if (present_by_function)
      list.add(by_function);

    boolean present_by_alias = true && (isSetBy_alias());
    list.add(present_by_alias);
    if (present_by_alias)
      list.add(by_alias);

    return list.hashCode();
  }

  @Override
  public int compareTo(Feature_id_mapping other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBy_type()).compareTo(other.isSetBy_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBy_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.by_type, other.by_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBy_region()).compareTo(other.isSetBy_region());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBy_region()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.by_region, other.by_region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBy_function()).compareTo(other.isSetBy_function());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBy_function()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.by_function, other.by_function);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBy_alias()).compareTo(other.isSetBy_alias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBy_alias()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.by_alias, other.by_alias);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Feature_id_mapping(");
    boolean first = true;

    sb.append("by_type:");
    if (this.by_type == null) {
      sb.append("null");
    } else {
      sb.append(this.by_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("by_region:");
    if (this.by_region == null) {
      sb.append("null");
    } else {
      sb.append(this.by_region);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("by_function:");
    if (this.by_function == null) {
      sb.append("null");
    } else {
      sb.append(this.by_function);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("by_alias:");
    if (this.by_alias == null) {
      sb.append("null");
    } else {
      sb.append(this.by_alias);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Feature_id_mappingStandardSchemeFactory implements SchemeFactory {
    public Feature_id_mappingStandardScheme getScheme() {
      return new Feature_id_mappingStandardScheme();
    }
  }

  private static class Feature_id_mappingStandardScheme extends StandardScheme<Feature_id_mapping> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Feature_id_mapping struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                struct.by_type = new TreeMap<String,List<String>>();
                String _key51;
                List<String> _val52;
                for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                {
                  _key51 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                    _val52 = new ArrayList<String>(_list54.size);
                    String _elem55;
                    for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                    {
                      _elem55 = iprot.readString();
                      _val52.add(_elem55);
                    }
                    iprot.readListEnd();
                  }
                  struct.by_type.put(_key51, _val52);
                }
                iprot.readMapEnd();
              }
              struct.setBy_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BY_REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map57 = iprot.readMapBegin();
                struct.by_region = new TreeMap<String,Map<String,Map<String,List<String>>>>();
                String _key58;
                Map<String,Map<String,List<String>>> _val59;
                for (int _i60 = 0; _i60 < _map57.size; ++_i60)
                {
                  _key58 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map61 = iprot.readMapBegin();
                    _val59 = new TreeMap<String,Map<String,List<String>>>();
                    String _key62;
                    Map<String,List<String>> _val63;
                    for (int _i64 = 0; _i64 < _map61.size; ++_i64)
                    {
                      _key62 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
                        _val63 = new TreeMap<String,List<String>>();
                        String _key66;
                        List<String> _val67;
                        for (int _i68 = 0; _i68 < _map65.size; ++_i68)
                        {
                          _key66 = iprot.readString();
                          {
                            org.apache.thrift.protocol.TList _list69 = iprot.readListBegin();
                            _val67 = new ArrayList<String>(_list69.size);
                            String _elem70;
                            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
                            {
                              _elem70 = iprot.readString();
                              _val67.add(_elem70);
                            }
                            iprot.readListEnd();
                          }
                          _val63.put(_key66, _val67);
                        }
                        iprot.readMapEnd();
                      }
                      _val59.put(_key62, _val63);
                    }
                    iprot.readMapEnd();
                  }
                  struct.by_region.put(_key58, _val59);
                }
                iprot.readMapEnd();
              }
              struct.setBy_regionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BY_FUNCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin();
                struct.by_function = new TreeMap<String,List<String>>();
                String _key73;
                List<String> _val74;
                for (int _i75 = 0; _i75 < _map72.size; ++_i75)
                {
                  _key73 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                    _val74 = new ArrayList<String>(_list76.size);
                    String _elem77;
                    for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                    {
                      _elem77 = iprot.readString();
                      _val74.add(_elem77);
                    }
                    iprot.readListEnd();
                  }
                  struct.by_function.put(_key73, _val74);
                }
                iprot.readMapEnd();
              }
              struct.setBy_functionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BY_ALIAS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map79 = iprot.readMapBegin();
                struct.by_alias = new TreeMap<String,List<String>>();
                String _key80;
                List<String> _val81;
                for (int _i82 = 0; _i82 < _map79.size; ++_i82)
                {
                  _key80 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                    _val81 = new ArrayList<String>(_list83.size);
                    String _elem84;
                    for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                    {
                      _elem84 = iprot.readString();
                      _val81.add(_elem84);
                    }
                    iprot.readListEnd();
                  }
                  struct.by_alias.put(_key80, _val81);
                }
                iprot.readMapEnd();
              }
              struct.setBy_aliasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Feature_id_mapping struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.by_type != null) {
        oprot.writeFieldBegin(BY_TYPE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.by_type.size()));
          for (Map.Entry<String, List<String>> _iter86 : struct.by_type.entrySet())
          {
            oprot.writeString(_iter86.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter86.getValue().size()));
              for (String _iter87 : _iter86.getValue())
              {
                oprot.writeString(_iter87);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.by_region != null) {
        oprot.writeFieldBegin(BY_REGION_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.by_region.size()));
          for (Map.Entry<String, Map<String,Map<String,List<String>>>> _iter88 : struct.by_region.entrySet())
          {
            oprot.writeString(_iter88.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, _iter88.getValue().size()));
              for (Map.Entry<String, Map<String,List<String>>> _iter89 : _iter88.getValue().entrySet())
              {
                oprot.writeString(_iter89.getKey());
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, _iter89.getValue().size()));
                  for (Map.Entry<String, List<String>> _iter90 : _iter89.getValue().entrySet())
                  {
                    oprot.writeString(_iter90.getKey());
                    {
                      oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter90.getValue().size()));
                      for (String _iter91 : _iter90.getValue())
                      {
                        oprot.writeString(_iter91);
                      }
                      oprot.writeListEnd();
                    }
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.by_function != null) {
        oprot.writeFieldBegin(BY_FUNCTION_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.by_function.size()));
          for (Map.Entry<String, List<String>> _iter92 : struct.by_function.entrySet())
          {
            oprot.writeString(_iter92.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter92.getValue().size()));
              for (String _iter93 : _iter92.getValue())
              {
                oprot.writeString(_iter93);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.by_alias != null) {
        oprot.writeFieldBegin(BY_ALIAS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.by_alias.size()));
          for (Map.Entry<String, List<String>> _iter94 : struct.by_alias.entrySet())
          {
            oprot.writeString(_iter94.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter94.getValue().size()));
              for (String _iter95 : _iter94.getValue())
              {
                oprot.writeString(_iter95);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Feature_id_mappingTupleSchemeFactory implements SchemeFactory {
    public Feature_id_mappingTupleScheme getScheme() {
      return new Feature_id_mappingTupleScheme();
    }
  }

  private static class Feature_id_mappingTupleScheme extends TupleScheme<Feature_id_mapping> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Feature_id_mapping struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBy_type()) {
        optionals.set(0);
      }
      if (struct.isSetBy_region()) {
        optionals.set(1);
      }
      if (struct.isSetBy_function()) {
        optionals.set(2);
      }
      if (struct.isSetBy_alias()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBy_type()) {
        {
          oprot.writeI32(struct.by_type.size());
          for (Map.Entry<String, List<String>> _iter96 : struct.by_type.entrySet())
          {
            oprot.writeString(_iter96.getKey());
            {
              oprot.writeI32(_iter96.getValue().size());
              for (String _iter97 : _iter96.getValue())
              {
                oprot.writeString(_iter97);
              }
            }
          }
        }
      }
      if (struct.isSetBy_region()) {
        {
          oprot.writeI32(struct.by_region.size());
          for (Map.Entry<String, Map<String,Map<String,List<String>>>> _iter98 : struct.by_region.entrySet())
          {
            oprot.writeString(_iter98.getKey());
            {
              oprot.writeI32(_iter98.getValue().size());
              for (Map.Entry<String, Map<String,List<String>>> _iter99 : _iter98.getValue().entrySet())
              {
                oprot.writeString(_iter99.getKey());
                {
                  oprot.writeI32(_iter99.getValue().size());
                  for (Map.Entry<String, List<String>> _iter100 : _iter99.getValue().entrySet())
                  {
                    oprot.writeString(_iter100.getKey());
                    {
                      oprot.writeI32(_iter100.getValue().size());
                      for (String _iter101 : _iter100.getValue())
                      {
                        oprot.writeString(_iter101);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetBy_function()) {
        {
          oprot.writeI32(struct.by_function.size());
          for (Map.Entry<String, List<String>> _iter102 : struct.by_function.entrySet())
          {
            oprot.writeString(_iter102.getKey());
            {
              oprot.writeI32(_iter102.getValue().size());
              for (String _iter103 : _iter102.getValue())
              {
                oprot.writeString(_iter103);
              }
            }
          }
        }
      }
      if (struct.isSetBy_alias()) {
        {
          oprot.writeI32(struct.by_alias.size());
          for (Map.Entry<String, List<String>> _iter104 : struct.by_alias.entrySet())
          {
            oprot.writeString(_iter104.getKey());
            {
              oprot.writeI32(_iter104.getValue().size());
              for (String _iter105 : _iter104.getValue())
              {
                oprot.writeString(_iter105);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Feature_id_mapping struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map106 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.by_type = new TreeMap<String,List<String>>();
          String _key107;
          List<String> _val108;
          for (int _i109 = 0; _i109 < _map106.size; ++_i109)
          {
            _key107 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list110 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val108 = new ArrayList<String>(_list110.size);
              String _elem111;
              for (int _i112 = 0; _i112 < _list110.size; ++_i112)
              {
                _elem111 = iprot.readString();
                _val108.add(_elem111);
              }
            }
            struct.by_type.put(_key107, _val108);
          }
        }
        struct.setBy_typeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map113 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.by_region = new TreeMap<String,Map<String,Map<String,List<String>>>>();
          String _key114;
          Map<String,Map<String,List<String>>> _val115;
          for (int _i116 = 0; _i116 < _map113.size; ++_i116)
          {
            _key114 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map117 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val115 = new TreeMap<String,Map<String,List<String>>>();
              String _key118;
              Map<String,List<String>> _val119;
              for (int _i120 = 0; _i120 < _map117.size; ++_i120)
              {
                _key118 = iprot.readString();
                {
                  org.apache.thrift.protocol.TMap _map121 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                  _val119 = new TreeMap<String,List<String>>();
                  String _key122;
                  List<String> _val123;
                  for (int _i124 = 0; _i124 < _map121.size; ++_i124)
                  {
                    _key122 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                      _val123 = new ArrayList<String>(_list125.size);
                      String _elem126;
                      for (int _i127 = 0; _i127 < _list125.size; ++_i127)
                      {
                        _elem126 = iprot.readString();
                        _val123.add(_elem126);
                      }
                    }
                    _val119.put(_key122, _val123);
                  }
                }
                _val115.put(_key118, _val119);
              }
            }
            struct.by_region.put(_key114, _val115);
          }
        }
        struct.setBy_regionIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map128 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.by_function = new TreeMap<String,List<String>>();
          String _key129;
          List<String> _val130;
          for (int _i131 = 0; _i131 < _map128.size; ++_i131)
          {
            _key129 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list132 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val130 = new ArrayList<String>(_list132.size);
              String _elem133;
              for (int _i134 = 0; _i134 < _list132.size; ++_i134)
              {
                _elem133 = iprot.readString();
                _val130.add(_elem133);
              }
            }
            struct.by_function.put(_key129, _val130);
          }
        }
        struct.setBy_functionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map135 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.by_alias = new TreeMap<String,List<String>>();
          String _key136;
          List<String> _val137;
          for (int _i138 = 0; _i138 < _map135.size; ++_i138)
          {
            _key136 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val137 = new ArrayList<String>(_list139.size);
              String _elem140;
              for (int _i141 = 0; _i141 < _list139.size; ++_i141)
              {
                _elem140 = iprot.readString();
                _val137.add(_elem140);
              }
            }
            struct.by_alias.put(_key136, _val137);
          }
        }
        struct.setBy_aliasIsSet(true);
      }
    }
  }

}

