/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-20")
public class thrift_service {

  public interface Iface {

    /**
     * Retrieve the Taxon associated with this GenomeAnnotation.
     * 
     * @return Reference to TaxonAPI object
     * 
     * @param token
     * @param ref
     */
    public String get_taxon(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the Assembly associated with this GenomeAnnotation.
     * 
     * @return Reference to AssemblyAPI object
     * 
     * @param token
     * @param ref
     */
    public String get_assembly(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the list of Feature types.
     * 
     * @return List of feature type identifiers (strings)
     * 
     * @param token
     * @param ref
     */
    public List<String> get_feature_types(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the descriptions for each Feature type in
     * this GenomeAnnotation.
     * 
     * @param feature_type_list List of Feature types. If this list
     *  is empty or None,
     *  the whole mapping will be returned.
     * @return Name and description for each requested Feature Type
     * 
     * @param token
     * @param ref
     * @param feature_type_list
     */
    public Map<String,String> get_feature_type_descriptions(String token, String ref, List<String> feature_type_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the count of each Feature type.
     * 
     * @param feature_type_list  List of Feature Types. If empty,
     *   this will retrieve  counts for all Feature Types.
     * 
     * @param token
     * @param ref
     * @param feature_type_list
     */
    public Map<String,Long> get_feature_type_counts(String token, String ref, List<String> feature_type_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve Feature IDs, optionally filtered by type, region, function, alias.
     * 
     * @param filters Dictionary of filters that can be applied to contents.
     *   If this is empty or missing, all Feature IDs will be returned.
     * @param group_type How to group results, which is a single string matching one
     *   of the values for the ``filters`` parameter.
     * @return Grouped mapping of features.
     * 
     * @param token
     * @param ref
     * @param filters
     * @param group_type
     */
    public Feature_id_mapping get_feature_ids(String token, String ref, Feature_id_filters filters, String group_type) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve Feature data.
     * 
     * @param feature_id_list List of Features to retrieve.
     *   If None, returns all Feature data.
     * @return Mapping from Feature IDs to dicts of available data.
     * 
     * @param token
     * @param ref
     * @param feature_id_list
     */
    public Map<String,Feature_data> get_features(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve Protein data.
     * 
     * @return Mapping from protein ID to data about the protein.
     * 
     * @param token
     * @param ref
     */
    public Map<String,Protein_data> get_proteins(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve Feature locations.
     * 
     * @param feature_id_list List of Feature IDs for which to retrieve locations.
     *     If empty, returns data for all features.
     * @return Mapping from Feature IDs to location information for each.
     * 
     * @param token
     * @param ref
     * @param feature_id_list
     */
    public Map<String,List<Region>> get_feature_locations(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve Feature publications.
     * 
     * @param feature_id_list List of Feature IDs for which to retrieve publications.
     *     If empty, returns data for all features.
     * @return Mapping from Feature IDs to publication info for each.
     * 
     * @param token
     * @param ref
     * @param feature_id_list
     */
    public Map<String,List<String>> get_feature_publications(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve Feature DNA sequences.
     * 
     * @param feature_id_list List of Feature IDs for which to retrieve sequences.
     *     If empty, returns data for all features.
     * @return Mapping of Feature IDs to their DNA sequence.
     * 
     * @param token
     * @param ref
     * @param feature_id_list
     */
    public Map<String,String> get_feature_dna(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve Feature functions.
     * 
     * @param feature_id_list List of Feature IDs for which to retrieve functions.
     *     If empty, returns data for all features.
     * @return Mapping of Feature IDs to their functions.
     * 
     * @param token
     * @param ref
     * @param feature_id_list
     */
    public Map<String,String> get_feature_functions(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve Feature aliases.
     * 
     * @param feature_id_list List of Feature IDS for which to retrieve aliases.
     *     If empty, returns data for all features.
     * @return Mapping of Feature IDs to a list of aliases.
     * 
     * @param token
     * @param ref
     * @param feature_id_list
     */
    public Map<String,List<String>> get_feature_aliases(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieves coding sequence Features (cds) for given gene Feature IDs.
     * 
     * @param feature_id_list List of gene Feature IDS for which to retrieve CDS.
     *     If empty, returns data for all features.
     * @return Mapping of gene Feature IDs to a list of CDS Feature IDs.
     * 
     * @param token
     * @param ref
     * @param gene_id_list
     */
    public Map<String,List<String>> get_cds_by_gene(String token, String ref, List<String> gene_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieves coding sequence (cds) Feature IDs for given mRNA Feature IDs.
     * 
     * @param feature_id_list List of mRNA Feature IDS for which to retrieve CDS.
     *     If empty, returns data for all features.
     * @return Mapping of mRNA Feature IDs to a list of CDS Feature IDs.
     * 
     * @param token
     * @param ref
     * @param mrna_id_list
     */
    public Map<String,String> get_cds_by_mrna(String token, String ref, List<String> mrna_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieves gene Feature IDs for given coding sequence (cds) Feature IDs.
     * 
     * @param feature_id_list List of cds Feature IDS for which to retrieve gene IDs.
     *     If empty, returns all cds/gene mappings.
     * @return Mapping of cds Feature IDs to gene Feature IDs.
     * 
     * @param token
     * @param ref
     * @param cds_id_list
     */
    public Map<String,String> get_gene_by_cds(String token, String ref, List<String> cds_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieves gene Feature IDs for given mRNA Feature IDs.
     * 
     * @param feature_id_list List of mRNA Feature IDS for which to retrieve gene IDs.
     *     If empty, returns all mRNA/gene mappings.
     * @return Mapping of mRNA Feature IDs to gene Feature IDs.
     * 
     * @param token
     * @param ref
     * @param mrna_id_list
     */
    public Map<String,String> get_gene_by_mrna(String token, String ref, List<String> mrna_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieves mRNA Features for given coding sequences (cds) Feature IDs.
     * 
     * @param feature_id_list List of cds Feature IDS for which to retrieve mRNA IDs.
     *     If empty, returns all cds/mRNA mappings.
     * @return Mapping of cds Feature IDs to mRNA Feature IDs.
     * 
     * @param token
     * @param ref
     * @param cds_id_list
     */
    public Map<String,String> get_mrna_by_cds(String token, String ref, List<String> cds_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the mRNA IDs for given gene IDs.
     * 
     * @param feature_id_list List of gene Feature IDS for which to retrieve mRNA IDs.
     *     If empty, returns all gene/mRNA mappings.
     * @return Mapping of gene Feature IDs to a list of mRNA Feature IDs.
     * 
     * @param token
     * @param ref
     * @param gene_id_list
     */
    public Map<String,List<String>> get_mrna_by_gene(String token, String ref, List<String> gene_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve Exon information for each mRNA ID.
     * 
     * @param feature_id_list List of mRNA Feature IDS for which to retrieve exons.
     *     If empty, returns data for all exons.
     * @return Mapping of mRNA Feature IDs to a list of exons (:js:data:`Exon_data`).
     * 
     * @param token
     * @param ref
     * @param mrna_id_list
     */
    public Map<String,List<Exon_data>> get_mrna_exons(String token, String ref, List<String> mrna_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve UTR information for each mRNA Feature ID.
     * 
     *  UTRs are calculated between mRNA features and corresponding CDS features.
     *  The return value for each mRNA can contain either:
     *     - no UTRs found (empty dict)
     *     -  5' UTR only
     *     -  3' UTR only
     *     -  5' and 3' UTRs
     * 
     *  Note: The Genome data type does not contain interfeature
     *  relationship information. Calling this method for Genome objects
     *  will raise a :js:throws:`exc.TypeException`.
     * 
     * @param feature_id_list List of mRNA Feature IDS for which to retrieve UTRs.
     * If empty, returns data for all UTRs.
     * @return Mapping of mRNA Feature IDs to a mapping that contains
     * both 5' and 3' UTRs::
     *     { "5'UTR": :js:data:`UTR_data`, "3'UTR": :js:data:`UTR_data` }
     * 
     * @param token
     * @param ref
     * @param mrna_id_list
     */
    public Map<String,Map<String,UTR_data>> get_mrna_utrs(String token, String ref, List<String> mrna_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve a GFF representation of this GenomeAnnotation.
     * 
     * @param gene_id_list List of gene Feature IDs for which to retrieve GFF.
     * If empty, returns GFF data for all genes in this GenomeAnnotation.
     * @return GFF data
     * 
     * @param token
     * @param ref
     * @param gene_id_list
     */
    public ByteBuffer get_gff(String token, String ref, List<String> gene_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void get_taxon(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_assembly(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_feature_types(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_feature_type_descriptions(String token, String ref, List<String> feature_type_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_feature_type_counts(String token, String ref, List<String> feature_type_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_feature_ids(String token, String ref, Feature_id_filters filters, String group_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_features(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_proteins(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_feature_locations(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_feature_publications(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_feature_dna(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_feature_functions(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_feature_aliases(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_cds_by_gene(String token, String ref, List<String> gene_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_cds_by_mrna(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_gene_by_cds(String token, String ref, List<String> cds_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_gene_by_mrna(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_mrna_by_cds(String token, String ref, List<String> cds_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_mrna_by_gene(String token, String ref, List<String> gene_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_mrna_exons(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_mrna_utrs(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_gff(String token, String ref, List<String> gene_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String get_taxon(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_taxon(token, ref);
      return recv_get_taxon();
    }

    public void send_get_taxon(String token, String ref) throws org.apache.thrift.TException
    {
      get_taxon_args args = new get_taxon_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_taxon", args);
    }

    public String recv_get_taxon() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_taxon_result result = new get_taxon_result();
      receiveBase(result, "get_taxon");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_taxon failed: unknown result");
    }

    public String get_assembly(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_assembly(token, ref);
      return recv_get_assembly();
    }

    public void send_get_assembly(String token, String ref) throws org.apache.thrift.TException
    {
      get_assembly_args args = new get_assembly_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_assembly", args);
    }

    public String recv_get_assembly() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_assembly_result result = new get_assembly_result();
      receiveBase(result, "get_assembly");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_assembly failed: unknown result");
    }

    public List<String> get_feature_types(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_feature_types(token, ref);
      return recv_get_feature_types();
    }

    public void send_get_feature_types(String token, String ref) throws org.apache.thrift.TException
    {
      get_feature_types_args args = new get_feature_types_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_feature_types", args);
    }

    public List<String> recv_get_feature_types() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_feature_types_result result = new get_feature_types_result();
      receiveBase(result, "get_feature_types");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feature_types failed: unknown result");
    }

    public Map<String,String> get_feature_type_descriptions(String token, String ref, List<String> feature_type_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_feature_type_descriptions(token, ref, feature_type_list);
      return recv_get_feature_type_descriptions();
    }

    public void send_get_feature_type_descriptions(String token, String ref, List<String> feature_type_list) throws org.apache.thrift.TException
    {
      get_feature_type_descriptions_args args = new get_feature_type_descriptions_args();
      args.setToken(token);
      args.setRef(ref);
      args.setFeature_type_list(feature_type_list);
      sendBase("get_feature_type_descriptions", args);
    }

    public Map<String,String> recv_get_feature_type_descriptions() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_feature_type_descriptions_result result = new get_feature_type_descriptions_result();
      receiveBase(result, "get_feature_type_descriptions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feature_type_descriptions failed: unknown result");
    }

    public Map<String,Long> get_feature_type_counts(String token, String ref, List<String> feature_type_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_feature_type_counts(token, ref, feature_type_list);
      return recv_get_feature_type_counts();
    }

    public void send_get_feature_type_counts(String token, String ref, List<String> feature_type_list) throws org.apache.thrift.TException
    {
      get_feature_type_counts_args args = new get_feature_type_counts_args();
      args.setToken(token);
      args.setRef(ref);
      args.setFeature_type_list(feature_type_list);
      sendBase("get_feature_type_counts", args);
    }

    public Map<String,Long> recv_get_feature_type_counts() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_feature_type_counts_result result = new get_feature_type_counts_result();
      receiveBase(result, "get_feature_type_counts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feature_type_counts failed: unknown result");
    }

    public Feature_id_mapping get_feature_ids(String token, String ref, Feature_id_filters filters, String group_type) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_feature_ids(token, ref, filters, group_type);
      return recv_get_feature_ids();
    }

    public void send_get_feature_ids(String token, String ref, Feature_id_filters filters, String group_type) throws org.apache.thrift.TException
    {
      get_feature_ids_args args = new get_feature_ids_args();
      args.setToken(token);
      args.setRef(ref);
      args.setFilters(filters);
      args.setGroup_type(group_type);
      sendBase("get_feature_ids", args);
    }

    public Feature_id_mapping recv_get_feature_ids() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_feature_ids_result result = new get_feature_ids_result();
      receiveBase(result, "get_feature_ids");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feature_ids failed: unknown result");
    }

    public Map<String,Feature_data> get_features(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_features(token, ref, feature_id_list);
      return recv_get_features();
    }

    public void send_get_features(String token, String ref, List<String> feature_id_list) throws org.apache.thrift.TException
    {
      get_features_args args = new get_features_args();
      args.setToken(token);
      args.setRef(ref);
      args.setFeature_id_list(feature_id_list);
      sendBase("get_features", args);
    }

    public Map<String,Feature_data> recv_get_features() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_features_result result = new get_features_result();
      receiveBase(result, "get_features");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_features failed: unknown result");
    }

    public Map<String,Protein_data> get_proteins(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_proteins(token, ref);
      return recv_get_proteins();
    }

    public void send_get_proteins(String token, String ref) throws org.apache.thrift.TException
    {
      get_proteins_args args = new get_proteins_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_proteins", args);
    }

    public Map<String,Protein_data> recv_get_proteins() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_proteins_result result = new get_proteins_result();
      receiveBase(result, "get_proteins");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_proteins failed: unknown result");
    }

    public Map<String,List<Region>> get_feature_locations(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_feature_locations(token, ref, feature_id_list);
      return recv_get_feature_locations();
    }

    public void send_get_feature_locations(String token, String ref, List<String> feature_id_list) throws org.apache.thrift.TException
    {
      get_feature_locations_args args = new get_feature_locations_args();
      args.setToken(token);
      args.setRef(ref);
      args.setFeature_id_list(feature_id_list);
      sendBase("get_feature_locations", args);
    }

    public Map<String,List<Region>> recv_get_feature_locations() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_feature_locations_result result = new get_feature_locations_result();
      receiveBase(result, "get_feature_locations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feature_locations failed: unknown result");
    }

    public Map<String,List<String>> get_feature_publications(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_feature_publications(token, ref, feature_id_list);
      return recv_get_feature_publications();
    }

    public void send_get_feature_publications(String token, String ref, List<String> feature_id_list) throws org.apache.thrift.TException
    {
      get_feature_publications_args args = new get_feature_publications_args();
      args.setToken(token);
      args.setRef(ref);
      args.setFeature_id_list(feature_id_list);
      sendBase("get_feature_publications", args);
    }

    public Map<String,List<String>> recv_get_feature_publications() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_feature_publications_result result = new get_feature_publications_result();
      receiveBase(result, "get_feature_publications");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feature_publications failed: unknown result");
    }

    public Map<String,String> get_feature_dna(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_feature_dna(token, ref, feature_id_list);
      return recv_get_feature_dna();
    }

    public void send_get_feature_dna(String token, String ref, List<String> feature_id_list) throws org.apache.thrift.TException
    {
      get_feature_dna_args args = new get_feature_dna_args();
      args.setToken(token);
      args.setRef(ref);
      args.setFeature_id_list(feature_id_list);
      sendBase("get_feature_dna", args);
    }

    public Map<String,String> recv_get_feature_dna() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_feature_dna_result result = new get_feature_dna_result();
      receiveBase(result, "get_feature_dna");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feature_dna failed: unknown result");
    }

    public Map<String,String> get_feature_functions(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_feature_functions(token, ref, feature_id_list);
      return recv_get_feature_functions();
    }

    public void send_get_feature_functions(String token, String ref, List<String> feature_id_list) throws org.apache.thrift.TException
    {
      get_feature_functions_args args = new get_feature_functions_args();
      args.setToken(token);
      args.setRef(ref);
      args.setFeature_id_list(feature_id_list);
      sendBase("get_feature_functions", args);
    }

    public Map<String,String> recv_get_feature_functions() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_feature_functions_result result = new get_feature_functions_result();
      receiveBase(result, "get_feature_functions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feature_functions failed: unknown result");
    }

    public Map<String,List<String>> get_feature_aliases(String token, String ref, List<String> feature_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_feature_aliases(token, ref, feature_id_list);
      return recv_get_feature_aliases();
    }

    public void send_get_feature_aliases(String token, String ref, List<String> feature_id_list) throws org.apache.thrift.TException
    {
      get_feature_aliases_args args = new get_feature_aliases_args();
      args.setToken(token);
      args.setRef(ref);
      args.setFeature_id_list(feature_id_list);
      sendBase("get_feature_aliases", args);
    }

    public Map<String,List<String>> recv_get_feature_aliases() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_feature_aliases_result result = new get_feature_aliases_result();
      receiveBase(result, "get_feature_aliases");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_feature_aliases failed: unknown result");
    }

    public Map<String,List<String>> get_cds_by_gene(String token, String ref, List<String> gene_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_cds_by_gene(token, ref, gene_id_list);
      return recv_get_cds_by_gene();
    }

    public void send_get_cds_by_gene(String token, String ref, List<String> gene_id_list) throws org.apache.thrift.TException
    {
      get_cds_by_gene_args args = new get_cds_by_gene_args();
      args.setToken(token);
      args.setRef(ref);
      args.setGene_id_list(gene_id_list);
      sendBase("get_cds_by_gene", args);
    }

    public Map<String,List<String>> recv_get_cds_by_gene() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_cds_by_gene_result result = new get_cds_by_gene_result();
      receiveBase(result, "get_cds_by_gene");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_cds_by_gene failed: unknown result");
    }

    public Map<String,String> get_cds_by_mrna(String token, String ref, List<String> mrna_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_cds_by_mrna(token, ref, mrna_id_list);
      return recv_get_cds_by_mrna();
    }

    public void send_get_cds_by_mrna(String token, String ref, List<String> mrna_id_list) throws org.apache.thrift.TException
    {
      get_cds_by_mrna_args args = new get_cds_by_mrna_args();
      args.setToken(token);
      args.setRef(ref);
      args.setMrna_id_list(mrna_id_list);
      sendBase("get_cds_by_mrna", args);
    }

    public Map<String,String> recv_get_cds_by_mrna() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_cds_by_mrna_result result = new get_cds_by_mrna_result();
      receiveBase(result, "get_cds_by_mrna");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_cds_by_mrna failed: unknown result");
    }

    public Map<String,String> get_gene_by_cds(String token, String ref, List<String> cds_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_gene_by_cds(token, ref, cds_id_list);
      return recv_get_gene_by_cds();
    }

    public void send_get_gene_by_cds(String token, String ref, List<String> cds_id_list) throws org.apache.thrift.TException
    {
      get_gene_by_cds_args args = new get_gene_by_cds_args();
      args.setToken(token);
      args.setRef(ref);
      args.setCds_id_list(cds_id_list);
      sendBase("get_gene_by_cds", args);
    }

    public Map<String,String> recv_get_gene_by_cds() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_gene_by_cds_result result = new get_gene_by_cds_result();
      receiveBase(result, "get_gene_by_cds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_gene_by_cds failed: unknown result");
    }

    public Map<String,String> get_gene_by_mrna(String token, String ref, List<String> mrna_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_gene_by_mrna(token, ref, mrna_id_list);
      return recv_get_gene_by_mrna();
    }

    public void send_get_gene_by_mrna(String token, String ref, List<String> mrna_id_list) throws org.apache.thrift.TException
    {
      get_gene_by_mrna_args args = new get_gene_by_mrna_args();
      args.setToken(token);
      args.setRef(ref);
      args.setMrna_id_list(mrna_id_list);
      sendBase("get_gene_by_mrna", args);
    }

    public Map<String,String> recv_get_gene_by_mrna() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_gene_by_mrna_result result = new get_gene_by_mrna_result();
      receiveBase(result, "get_gene_by_mrna");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_gene_by_mrna failed: unknown result");
    }

    public Map<String,String> get_mrna_by_cds(String token, String ref, List<String> cds_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_mrna_by_cds(token, ref, cds_id_list);
      return recv_get_mrna_by_cds();
    }

    public void send_get_mrna_by_cds(String token, String ref, List<String> cds_id_list) throws org.apache.thrift.TException
    {
      get_mrna_by_cds_args args = new get_mrna_by_cds_args();
      args.setToken(token);
      args.setRef(ref);
      args.setCds_id_list(cds_id_list);
      sendBase("get_mrna_by_cds", args);
    }

    public Map<String,String> recv_get_mrna_by_cds() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_mrna_by_cds_result result = new get_mrna_by_cds_result();
      receiveBase(result, "get_mrna_by_cds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_mrna_by_cds failed: unknown result");
    }

    public Map<String,List<String>> get_mrna_by_gene(String token, String ref, List<String> gene_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_mrna_by_gene(token, ref, gene_id_list);
      return recv_get_mrna_by_gene();
    }

    public void send_get_mrna_by_gene(String token, String ref, List<String> gene_id_list) throws org.apache.thrift.TException
    {
      get_mrna_by_gene_args args = new get_mrna_by_gene_args();
      args.setToken(token);
      args.setRef(ref);
      args.setGene_id_list(gene_id_list);
      sendBase("get_mrna_by_gene", args);
    }

    public Map<String,List<String>> recv_get_mrna_by_gene() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_mrna_by_gene_result result = new get_mrna_by_gene_result();
      receiveBase(result, "get_mrna_by_gene");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_mrna_by_gene failed: unknown result");
    }

    public Map<String,List<Exon_data>> get_mrna_exons(String token, String ref, List<String> mrna_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_mrna_exons(token, ref, mrna_id_list);
      return recv_get_mrna_exons();
    }

    public void send_get_mrna_exons(String token, String ref, List<String> mrna_id_list) throws org.apache.thrift.TException
    {
      get_mrna_exons_args args = new get_mrna_exons_args();
      args.setToken(token);
      args.setRef(ref);
      args.setMrna_id_list(mrna_id_list);
      sendBase("get_mrna_exons", args);
    }

    public Map<String,List<Exon_data>> recv_get_mrna_exons() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_mrna_exons_result result = new get_mrna_exons_result();
      receiveBase(result, "get_mrna_exons");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_mrna_exons failed: unknown result");
    }

    public Map<String,Map<String,UTR_data>> get_mrna_utrs(String token, String ref, List<String> mrna_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_mrna_utrs(token, ref, mrna_id_list);
      return recv_get_mrna_utrs();
    }

    public void send_get_mrna_utrs(String token, String ref, List<String> mrna_id_list) throws org.apache.thrift.TException
    {
      get_mrna_utrs_args args = new get_mrna_utrs_args();
      args.setToken(token);
      args.setRef(ref);
      args.setMrna_id_list(mrna_id_list);
      sendBase("get_mrna_utrs", args);
    }

    public Map<String,Map<String,UTR_data>> recv_get_mrna_utrs() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_mrna_utrs_result result = new get_mrna_utrs_result();
      receiveBase(result, "get_mrna_utrs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_mrna_utrs failed: unknown result");
    }

    public ByteBuffer get_gff(String token, String ref, List<String> gene_id_list) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_gff(token, ref, gene_id_list);
      return recv_get_gff();
    }

    public void send_get_gff(String token, String ref, List<String> gene_id_list) throws org.apache.thrift.TException
    {
      get_gff_args args = new get_gff_args();
      args.setToken(token);
      args.setRef(ref);
      args.setGene_id_list(gene_id_list);
      sendBase("get_gff", args);
    }

    public ByteBuffer recv_get_gff() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_gff_result result = new get_gff_result();
      receiveBase(result, "get_gff");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_gff failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void get_taxon(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_taxon_call method_call = new get_taxon_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_taxon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_taxon_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_taxon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_taxon_args args = new get_taxon_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_taxon();
      }
    }

    public void get_assembly(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_assembly_call method_call = new get_assembly_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_assembly_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_assembly_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_assembly", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_assembly_args args = new get_assembly_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_assembly();
      }
    }

    public void get_feature_types(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feature_types_call method_call = new get_feature_types_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feature_types_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_feature_types_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feature_types", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feature_types_args args = new get_feature_types_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feature_types();
      }
    }

    public void get_feature_type_descriptions(String token, String ref, List<String> feature_type_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feature_type_descriptions_call method_call = new get_feature_type_descriptions_call(token, ref, feature_type_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feature_type_descriptions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> feature_type_list;
      public get_feature_type_descriptions_call(String token, String ref, List<String> feature_type_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.feature_type_list = feature_type_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feature_type_descriptions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feature_type_descriptions_args args = new get_feature_type_descriptions_args();
        args.setToken(token);
        args.setRef(ref);
        args.setFeature_type_list(feature_type_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feature_type_descriptions();
      }
    }

    public void get_feature_type_counts(String token, String ref, List<String> feature_type_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feature_type_counts_call method_call = new get_feature_type_counts_call(token, ref, feature_type_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feature_type_counts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> feature_type_list;
      public get_feature_type_counts_call(String token, String ref, List<String> feature_type_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.feature_type_list = feature_type_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feature_type_counts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feature_type_counts_args args = new get_feature_type_counts_args();
        args.setToken(token);
        args.setRef(ref);
        args.setFeature_type_list(feature_type_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feature_type_counts();
      }
    }

    public void get_feature_ids(String token, String ref, Feature_id_filters filters, String group_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feature_ids_call method_call = new get_feature_ids_call(token, ref, filters, group_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feature_ids_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private Feature_id_filters filters;
      private String group_type;
      public get_feature_ids_call(String token, String ref, Feature_id_filters filters, String group_type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.filters = filters;
        this.group_type = group_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feature_ids", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feature_ids_args args = new get_feature_ids_args();
        args.setToken(token);
        args.setRef(ref);
        args.setFilters(filters);
        args.setGroup_type(group_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Feature_id_mapping getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feature_ids();
      }
    }

    public void get_features(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_features_call method_call = new get_features_call(token, ref, feature_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_features_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> feature_id_list;
      public get_features_call(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.feature_id_list = feature_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_features", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_features_args args = new get_features_args();
        args.setToken(token);
        args.setRef(ref);
        args.setFeature_id_list(feature_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Feature_data> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_features();
      }
    }

    public void get_proteins(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_proteins_call method_call = new get_proteins_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_proteins_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_proteins_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_proteins", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_proteins_args args = new get_proteins_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Protein_data> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_proteins();
      }
    }

    public void get_feature_locations(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feature_locations_call method_call = new get_feature_locations_call(token, ref, feature_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feature_locations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> feature_id_list;
      public get_feature_locations_call(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.feature_id_list = feature_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feature_locations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feature_locations_args args = new get_feature_locations_args();
        args.setToken(token);
        args.setRef(ref);
        args.setFeature_id_list(feature_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<Region>> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feature_locations();
      }
    }

    public void get_feature_publications(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feature_publications_call method_call = new get_feature_publications_call(token, ref, feature_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feature_publications_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> feature_id_list;
      public get_feature_publications_call(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.feature_id_list = feature_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feature_publications", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feature_publications_args args = new get_feature_publications_args();
        args.setToken(token);
        args.setRef(ref);
        args.setFeature_id_list(feature_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<String>> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feature_publications();
      }
    }

    public void get_feature_dna(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feature_dna_call method_call = new get_feature_dna_call(token, ref, feature_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feature_dna_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> feature_id_list;
      public get_feature_dna_call(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.feature_id_list = feature_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feature_dna", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feature_dna_args args = new get_feature_dna_args();
        args.setToken(token);
        args.setRef(ref);
        args.setFeature_id_list(feature_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feature_dna();
      }
    }

    public void get_feature_functions(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feature_functions_call method_call = new get_feature_functions_call(token, ref, feature_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feature_functions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> feature_id_list;
      public get_feature_functions_call(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.feature_id_list = feature_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feature_functions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feature_functions_args args = new get_feature_functions_args();
        args.setToken(token);
        args.setRef(ref);
        args.setFeature_id_list(feature_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feature_functions();
      }
    }

    public void get_feature_aliases(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_feature_aliases_call method_call = new get_feature_aliases_call(token, ref, feature_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_feature_aliases_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> feature_id_list;
      public get_feature_aliases_call(String token, String ref, List<String> feature_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.feature_id_list = feature_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_feature_aliases", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_feature_aliases_args args = new get_feature_aliases_args();
        args.setToken(token);
        args.setRef(ref);
        args.setFeature_id_list(feature_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<String>> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_feature_aliases();
      }
    }

    public void get_cds_by_gene(String token, String ref, List<String> gene_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_cds_by_gene_call method_call = new get_cds_by_gene_call(token, ref, gene_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_cds_by_gene_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> gene_id_list;
      public get_cds_by_gene_call(String token, String ref, List<String> gene_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.gene_id_list = gene_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_cds_by_gene", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_cds_by_gene_args args = new get_cds_by_gene_args();
        args.setToken(token);
        args.setRef(ref);
        args.setGene_id_list(gene_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<String>> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_cds_by_gene();
      }
    }

    public void get_cds_by_mrna(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_cds_by_mrna_call method_call = new get_cds_by_mrna_call(token, ref, mrna_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_cds_by_mrna_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> mrna_id_list;
      public get_cds_by_mrna_call(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.mrna_id_list = mrna_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_cds_by_mrna", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_cds_by_mrna_args args = new get_cds_by_mrna_args();
        args.setToken(token);
        args.setRef(ref);
        args.setMrna_id_list(mrna_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_cds_by_mrna();
      }
    }

    public void get_gene_by_cds(String token, String ref, List<String> cds_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_gene_by_cds_call method_call = new get_gene_by_cds_call(token, ref, cds_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_gene_by_cds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> cds_id_list;
      public get_gene_by_cds_call(String token, String ref, List<String> cds_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.cds_id_list = cds_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_gene_by_cds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_gene_by_cds_args args = new get_gene_by_cds_args();
        args.setToken(token);
        args.setRef(ref);
        args.setCds_id_list(cds_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_gene_by_cds();
      }
    }

    public void get_gene_by_mrna(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_gene_by_mrna_call method_call = new get_gene_by_mrna_call(token, ref, mrna_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_gene_by_mrna_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> mrna_id_list;
      public get_gene_by_mrna_call(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.mrna_id_list = mrna_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_gene_by_mrna", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_gene_by_mrna_args args = new get_gene_by_mrna_args();
        args.setToken(token);
        args.setRef(ref);
        args.setMrna_id_list(mrna_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_gene_by_mrna();
      }
    }

    public void get_mrna_by_cds(String token, String ref, List<String> cds_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_mrna_by_cds_call method_call = new get_mrna_by_cds_call(token, ref, cds_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_mrna_by_cds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> cds_id_list;
      public get_mrna_by_cds_call(String token, String ref, List<String> cds_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.cds_id_list = cds_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_mrna_by_cds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_mrna_by_cds_args args = new get_mrna_by_cds_args();
        args.setToken(token);
        args.setRef(ref);
        args.setCds_id_list(cds_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_mrna_by_cds();
      }
    }

    public void get_mrna_by_gene(String token, String ref, List<String> gene_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_mrna_by_gene_call method_call = new get_mrna_by_gene_call(token, ref, gene_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_mrna_by_gene_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> gene_id_list;
      public get_mrna_by_gene_call(String token, String ref, List<String> gene_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.gene_id_list = gene_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_mrna_by_gene", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_mrna_by_gene_args args = new get_mrna_by_gene_args();
        args.setToken(token);
        args.setRef(ref);
        args.setGene_id_list(gene_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<String>> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_mrna_by_gene();
      }
    }

    public void get_mrna_exons(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_mrna_exons_call method_call = new get_mrna_exons_call(token, ref, mrna_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_mrna_exons_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> mrna_id_list;
      public get_mrna_exons_call(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.mrna_id_list = mrna_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_mrna_exons", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_mrna_exons_args args = new get_mrna_exons_args();
        args.setToken(token);
        args.setRef(ref);
        args.setMrna_id_list(mrna_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<Exon_data>> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_mrna_exons();
      }
    }

    public void get_mrna_utrs(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_mrna_utrs_call method_call = new get_mrna_utrs_call(token, ref, mrna_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_mrna_utrs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> mrna_id_list;
      public get_mrna_utrs_call(String token, String ref, List<String> mrna_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.mrna_id_list = mrna_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_mrna_utrs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_mrna_utrs_args args = new get_mrna_utrs_args();
        args.setToken(token);
        args.setRef(ref);
        args.setMrna_id_list(mrna_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<String,UTR_data>> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_mrna_utrs();
      }
    }

    public void get_gff(String token, String ref, List<String> gene_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_gff_call method_call = new get_gff_call(token, ref, gene_id_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_gff_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      private List<String> gene_id_list;
      public get_gff_call(String token, String ref, List<String> gene_id_list, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
        this.gene_id_list = gene_id_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_gff", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_gff_args args = new get_gff_args();
        args.setToken(token);
        args.setRef(ref);
        args.setGene_id_list(gene_id_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_gff();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("get_taxon", new get_taxon());
      processMap.put("get_assembly", new get_assembly());
      processMap.put("get_feature_types", new get_feature_types());
      processMap.put("get_feature_type_descriptions", new get_feature_type_descriptions());
      processMap.put("get_feature_type_counts", new get_feature_type_counts());
      processMap.put("get_feature_ids", new get_feature_ids());
      processMap.put("get_features", new get_features());
      processMap.put("get_proteins", new get_proteins());
      processMap.put("get_feature_locations", new get_feature_locations());
      processMap.put("get_feature_publications", new get_feature_publications());
      processMap.put("get_feature_dna", new get_feature_dna());
      processMap.put("get_feature_functions", new get_feature_functions());
      processMap.put("get_feature_aliases", new get_feature_aliases());
      processMap.put("get_cds_by_gene", new get_cds_by_gene());
      processMap.put("get_cds_by_mrna", new get_cds_by_mrna());
      processMap.put("get_gene_by_cds", new get_gene_by_cds());
      processMap.put("get_gene_by_mrna", new get_gene_by_mrna());
      processMap.put("get_mrna_by_cds", new get_mrna_by_cds());
      processMap.put("get_mrna_by_gene", new get_mrna_by_gene());
      processMap.put("get_mrna_exons", new get_mrna_exons());
      processMap.put("get_mrna_utrs", new get_mrna_utrs());
      processMap.put("get_gff", new get_gff());
      return processMap;
    }

    public static class get_taxon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_taxon_args> {
      public get_taxon() {
        super("get_taxon");
      }

      public get_taxon_args getEmptyArgsInstance() {
        return new get_taxon_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_taxon_result getResult(I iface, get_taxon_args args) throws org.apache.thrift.TException {
        get_taxon_result result = new get_taxon_result();
        try {
          result.success = iface.get_taxon(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_assembly<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_assembly_args> {
      public get_assembly() {
        super("get_assembly");
      }

      public get_assembly_args getEmptyArgsInstance() {
        return new get_assembly_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_assembly_result getResult(I iface, get_assembly_args args) throws org.apache.thrift.TException {
        get_assembly_result result = new get_assembly_result();
        try {
          result.success = iface.get_assembly(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_feature_types<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feature_types_args> {
      public get_feature_types() {
        super("get_feature_types");
      }

      public get_feature_types_args getEmptyArgsInstance() {
        return new get_feature_types_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_feature_types_result getResult(I iface, get_feature_types_args args) throws org.apache.thrift.TException {
        get_feature_types_result result = new get_feature_types_result();
        try {
          result.success = iface.get_feature_types(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_feature_type_descriptions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feature_type_descriptions_args> {
      public get_feature_type_descriptions() {
        super("get_feature_type_descriptions");
      }

      public get_feature_type_descriptions_args getEmptyArgsInstance() {
        return new get_feature_type_descriptions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_feature_type_descriptions_result getResult(I iface, get_feature_type_descriptions_args args) throws org.apache.thrift.TException {
        get_feature_type_descriptions_result result = new get_feature_type_descriptions_result();
        try {
          result.success = iface.get_feature_type_descriptions(args.token, args.ref, args.feature_type_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_feature_type_counts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feature_type_counts_args> {
      public get_feature_type_counts() {
        super("get_feature_type_counts");
      }

      public get_feature_type_counts_args getEmptyArgsInstance() {
        return new get_feature_type_counts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_feature_type_counts_result getResult(I iface, get_feature_type_counts_args args) throws org.apache.thrift.TException {
        get_feature_type_counts_result result = new get_feature_type_counts_result();
        try {
          result.success = iface.get_feature_type_counts(args.token, args.ref, args.feature_type_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_feature_ids<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feature_ids_args> {
      public get_feature_ids() {
        super("get_feature_ids");
      }

      public get_feature_ids_args getEmptyArgsInstance() {
        return new get_feature_ids_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_feature_ids_result getResult(I iface, get_feature_ids_args args) throws org.apache.thrift.TException {
        get_feature_ids_result result = new get_feature_ids_result();
        try {
          result.success = iface.get_feature_ids(args.token, args.ref, args.filters, args.group_type);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_features<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_features_args> {
      public get_features() {
        super("get_features");
      }

      public get_features_args getEmptyArgsInstance() {
        return new get_features_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_features_result getResult(I iface, get_features_args args) throws org.apache.thrift.TException {
        get_features_result result = new get_features_result();
        try {
          result.success = iface.get_features(args.token, args.ref, args.feature_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_proteins<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_proteins_args> {
      public get_proteins() {
        super("get_proteins");
      }

      public get_proteins_args getEmptyArgsInstance() {
        return new get_proteins_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_proteins_result getResult(I iface, get_proteins_args args) throws org.apache.thrift.TException {
        get_proteins_result result = new get_proteins_result();
        try {
          result.success = iface.get_proteins(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_feature_locations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feature_locations_args> {
      public get_feature_locations() {
        super("get_feature_locations");
      }

      public get_feature_locations_args getEmptyArgsInstance() {
        return new get_feature_locations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_feature_locations_result getResult(I iface, get_feature_locations_args args) throws org.apache.thrift.TException {
        get_feature_locations_result result = new get_feature_locations_result();
        try {
          result.success = iface.get_feature_locations(args.token, args.ref, args.feature_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_feature_publications<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feature_publications_args> {
      public get_feature_publications() {
        super("get_feature_publications");
      }

      public get_feature_publications_args getEmptyArgsInstance() {
        return new get_feature_publications_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_feature_publications_result getResult(I iface, get_feature_publications_args args) throws org.apache.thrift.TException {
        get_feature_publications_result result = new get_feature_publications_result();
        try {
          result.success = iface.get_feature_publications(args.token, args.ref, args.feature_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_feature_dna<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feature_dna_args> {
      public get_feature_dna() {
        super("get_feature_dna");
      }

      public get_feature_dna_args getEmptyArgsInstance() {
        return new get_feature_dna_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_feature_dna_result getResult(I iface, get_feature_dna_args args) throws org.apache.thrift.TException {
        get_feature_dna_result result = new get_feature_dna_result();
        try {
          result.success = iface.get_feature_dna(args.token, args.ref, args.feature_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_feature_functions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feature_functions_args> {
      public get_feature_functions() {
        super("get_feature_functions");
      }

      public get_feature_functions_args getEmptyArgsInstance() {
        return new get_feature_functions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_feature_functions_result getResult(I iface, get_feature_functions_args args) throws org.apache.thrift.TException {
        get_feature_functions_result result = new get_feature_functions_result();
        try {
          result.success = iface.get_feature_functions(args.token, args.ref, args.feature_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_feature_aliases<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_feature_aliases_args> {
      public get_feature_aliases() {
        super("get_feature_aliases");
      }

      public get_feature_aliases_args getEmptyArgsInstance() {
        return new get_feature_aliases_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_feature_aliases_result getResult(I iface, get_feature_aliases_args args) throws org.apache.thrift.TException {
        get_feature_aliases_result result = new get_feature_aliases_result();
        try {
          result.success = iface.get_feature_aliases(args.token, args.ref, args.feature_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_cds_by_gene<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_cds_by_gene_args> {
      public get_cds_by_gene() {
        super("get_cds_by_gene");
      }

      public get_cds_by_gene_args getEmptyArgsInstance() {
        return new get_cds_by_gene_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_cds_by_gene_result getResult(I iface, get_cds_by_gene_args args) throws org.apache.thrift.TException {
        get_cds_by_gene_result result = new get_cds_by_gene_result();
        try {
          result.success = iface.get_cds_by_gene(args.token, args.ref, args.gene_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_cds_by_mrna<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_cds_by_mrna_args> {
      public get_cds_by_mrna() {
        super("get_cds_by_mrna");
      }

      public get_cds_by_mrna_args getEmptyArgsInstance() {
        return new get_cds_by_mrna_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_cds_by_mrna_result getResult(I iface, get_cds_by_mrna_args args) throws org.apache.thrift.TException {
        get_cds_by_mrna_result result = new get_cds_by_mrna_result();
        try {
          result.success = iface.get_cds_by_mrna(args.token, args.ref, args.mrna_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_gene_by_cds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_gene_by_cds_args> {
      public get_gene_by_cds() {
        super("get_gene_by_cds");
      }

      public get_gene_by_cds_args getEmptyArgsInstance() {
        return new get_gene_by_cds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_gene_by_cds_result getResult(I iface, get_gene_by_cds_args args) throws org.apache.thrift.TException {
        get_gene_by_cds_result result = new get_gene_by_cds_result();
        try {
          result.success = iface.get_gene_by_cds(args.token, args.ref, args.cds_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_gene_by_mrna<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_gene_by_mrna_args> {
      public get_gene_by_mrna() {
        super("get_gene_by_mrna");
      }

      public get_gene_by_mrna_args getEmptyArgsInstance() {
        return new get_gene_by_mrna_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_gene_by_mrna_result getResult(I iface, get_gene_by_mrna_args args) throws org.apache.thrift.TException {
        get_gene_by_mrna_result result = new get_gene_by_mrna_result();
        try {
          result.success = iface.get_gene_by_mrna(args.token, args.ref, args.mrna_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_mrna_by_cds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_mrna_by_cds_args> {
      public get_mrna_by_cds() {
        super("get_mrna_by_cds");
      }

      public get_mrna_by_cds_args getEmptyArgsInstance() {
        return new get_mrna_by_cds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_mrna_by_cds_result getResult(I iface, get_mrna_by_cds_args args) throws org.apache.thrift.TException {
        get_mrna_by_cds_result result = new get_mrna_by_cds_result();
        try {
          result.success = iface.get_mrna_by_cds(args.token, args.ref, args.cds_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_mrna_by_gene<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_mrna_by_gene_args> {
      public get_mrna_by_gene() {
        super("get_mrna_by_gene");
      }

      public get_mrna_by_gene_args getEmptyArgsInstance() {
        return new get_mrna_by_gene_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_mrna_by_gene_result getResult(I iface, get_mrna_by_gene_args args) throws org.apache.thrift.TException {
        get_mrna_by_gene_result result = new get_mrna_by_gene_result();
        try {
          result.success = iface.get_mrna_by_gene(args.token, args.ref, args.gene_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_mrna_exons<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_mrna_exons_args> {
      public get_mrna_exons() {
        super("get_mrna_exons");
      }

      public get_mrna_exons_args getEmptyArgsInstance() {
        return new get_mrna_exons_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_mrna_exons_result getResult(I iface, get_mrna_exons_args args) throws org.apache.thrift.TException {
        get_mrna_exons_result result = new get_mrna_exons_result();
        try {
          result.success = iface.get_mrna_exons(args.token, args.ref, args.mrna_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_mrna_utrs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_mrna_utrs_args> {
      public get_mrna_utrs() {
        super("get_mrna_utrs");
      }

      public get_mrna_utrs_args getEmptyArgsInstance() {
        return new get_mrna_utrs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_mrna_utrs_result getResult(I iface, get_mrna_utrs_args args) throws org.apache.thrift.TException {
        get_mrna_utrs_result result = new get_mrna_utrs_result();
        try {
          result.success = iface.get_mrna_utrs(args.token, args.ref, args.mrna_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_gff<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_gff_args> {
      public get_gff() {
        super("get_gff");
      }

      public get_gff_args getEmptyArgsInstance() {
        return new get_gff_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_gff_result getResult(I iface, get_gff_args args) throws org.apache.thrift.TException {
        get_gff_result result = new get_gff_result();
        try {
          result.success = iface.get_gff(args.token, args.ref, args.gene_id_list);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("get_taxon", new get_taxon());
      processMap.put("get_assembly", new get_assembly());
      processMap.put("get_feature_types", new get_feature_types());
      processMap.put("get_feature_type_descriptions", new get_feature_type_descriptions());
      processMap.put("get_feature_type_counts", new get_feature_type_counts());
      processMap.put("get_feature_ids", new get_feature_ids());
      processMap.put("get_features", new get_features());
      processMap.put("get_proteins", new get_proteins());
      processMap.put("get_feature_locations", new get_feature_locations());
      processMap.put("get_feature_publications", new get_feature_publications());
      processMap.put("get_feature_dna", new get_feature_dna());
      processMap.put("get_feature_functions", new get_feature_functions());
      processMap.put("get_feature_aliases", new get_feature_aliases());
      processMap.put("get_cds_by_gene", new get_cds_by_gene());
      processMap.put("get_cds_by_mrna", new get_cds_by_mrna());
      processMap.put("get_gene_by_cds", new get_gene_by_cds());
      processMap.put("get_gene_by_mrna", new get_gene_by_mrna());
      processMap.put("get_mrna_by_cds", new get_mrna_by_cds());
      processMap.put("get_mrna_by_gene", new get_mrna_by_gene());
      processMap.put("get_mrna_exons", new get_mrna_exons());
      processMap.put("get_mrna_utrs", new get_mrna_utrs());
      processMap.put("get_gff", new get_gff());
      return processMap;
    }

    public static class get_taxon<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_taxon_args, String> {
      public get_taxon() {
        super("get_taxon");
      }

      public get_taxon_args getEmptyArgsInstance() {
        return new get_taxon_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_taxon_result result = new get_taxon_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_taxon_result result = new get_taxon_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_taxon_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_taxon(args.token, args.ref,resultHandler);
      }
    }

    public static class get_assembly<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_assembly_args, String> {
      public get_assembly() {
        super("get_assembly");
      }

      public get_assembly_args getEmptyArgsInstance() {
        return new get_assembly_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_assembly_result result = new get_assembly_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_assembly_result result = new get_assembly_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_assembly_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_assembly(args.token, args.ref,resultHandler);
      }
    }

    public static class get_feature_types<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_feature_types_args, List<String>> {
      public get_feature_types() {
        super("get_feature_types");
      }

      public get_feature_types_args getEmptyArgsInstance() {
        return new get_feature_types_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            get_feature_types_result result = new get_feature_types_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_feature_types_result result = new get_feature_types_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_feature_types_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.get_feature_types(args.token, args.ref,resultHandler);
      }
    }

    public static class get_feature_type_descriptions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_feature_type_descriptions_args, Map<String,String>> {
      public get_feature_type_descriptions() {
        super("get_feature_type_descriptions");
      }

      public get_feature_type_descriptions_args getEmptyArgsInstance() {
        return new get_feature_type_descriptions_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            get_feature_type_descriptions_result result = new get_feature_type_descriptions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_feature_type_descriptions_result result = new get_feature_type_descriptions_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_feature_type_descriptions_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.get_feature_type_descriptions(args.token, args.ref, args.feature_type_list,resultHandler);
      }
    }

    public static class get_feature_type_counts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_feature_type_counts_args, Map<String,Long>> {
      public get_feature_type_counts() {
        super("get_feature_type_counts");
      }

      public get_feature_type_counts_args getEmptyArgsInstance() {
        return new get_feature_type_counts_args();
      }

      public AsyncMethodCallback<Map<String,Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Long>>() { 
          public void onComplete(Map<String,Long> o) {
            get_feature_type_counts_result result = new get_feature_type_counts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_feature_type_counts_result result = new get_feature_type_counts_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_feature_type_counts_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Long>> resultHandler) throws TException {
        iface.get_feature_type_counts(args.token, args.ref, args.feature_type_list,resultHandler);
      }
    }

    public static class get_feature_ids<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_feature_ids_args, Feature_id_mapping> {
      public get_feature_ids() {
        super("get_feature_ids");
      }

      public get_feature_ids_args getEmptyArgsInstance() {
        return new get_feature_ids_args();
      }

      public AsyncMethodCallback<Feature_id_mapping> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Feature_id_mapping>() { 
          public void onComplete(Feature_id_mapping o) {
            get_feature_ids_result result = new get_feature_ids_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_feature_ids_result result = new get_feature_ids_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_feature_ids_args args, org.apache.thrift.async.AsyncMethodCallback<Feature_id_mapping> resultHandler) throws TException {
        iface.get_feature_ids(args.token, args.ref, args.filters, args.group_type,resultHandler);
      }
    }

    public static class get_features<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_features_args, Map<String,Feature_data>> {
      public get_features() {
        super("get_features");
      }

      public get_features_args getEmptyArgsInstance() {
        return new get_features_args();
      }

      public AsyncMethodCallback<Map<String,Feature_data>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Feature_data>>() { 
          public void onComplete(Map<String,Feature_data> o) {
            get_features_result result = new get_features_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_features_result result = new get_features_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_features_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Feature_data>> resultHandler) throws TException {
        iface.get_features(args.token, args.ref, args.feature_id_list,resultHandler);
      }
    }

    public static class get_proteins<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_proteins_args, Map<String,Protein_data>> {
      public get_proteins() {
        super("get_proteins");
      }

      public get_proteins_args getEmptyArgsInstance() {
        return new get_proteins_args();
      }

      public AsyncMethodCallback<Map<String,Protein_data>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Protein_data>>() { 
          public void onComplete(Map<String,Protein_data> o) {
            get_proteins_result result = new get_proteins_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_proteins_result result = new get_proteins_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_proteins_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Protein_data>> resultHandler) throws TException {
        iface.get_proteins(args.token, args.ref,resultHandler);
      }
    }

    public static class get_feature_locations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_feature_locations_args, Map<String,List<Region>>> {
      public get_feature_locations() {
        super("get_feature_locations");
      }

      public get_feature_locations_args getEmptyArgsInstance() {
        return new get_feature_locations_args();
      }

      public AsyncMethodCallback<Map<String,List<Region>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<Region>>>() { 
          public void onComplete(Map<String,List<Region>> o) {
            get_feature_locations_result result = new get_feature_locations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_feature_locations_result result = new get_feature_locations_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_feature_locations_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<Region>>> resultHandler) throws TException {
        iface.get_feature_locations(args.token, args.ref, args.feature_id_list,resultHandler);
      }
    }

    public static class get_feature_publications<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_feature_publications_args, Map<String,List<String>>> {
      public get_feature_publications() {
        super("get_feature_publications");
      }

      public get_feature_publications_args getEmptyArgsInstance() {
        return new get_feature_publications_args();
      }

      public AsyncMethodCallback<Map<String,List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<String>>>() { 
          public void onComplete(Map<String,List<String>> o) {
            get_feature_publications_result result = new get_feature_publications_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_feature_publications_result result = new get_feature_publications_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_feature_publications_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<String>>> resultHandler) throws TException {
        iface.get_feature_publications(args.token, args.ref, args.feature_id_list,resultHandler);
      }
    }

    public static class get_feature_dna<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_feature_dna_args, Map<String,String>> {
      public get_feature_dna() {
        super("get_feature_dna");
      }

      public get_feature_dna_args getEmptyArgsInstance() {
        return new get_feature_dna_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            get_feature_dna_result result = new get_feature_dna_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_feature_dna_result result = new get_feature_dna_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_feature_dna_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.get_feature_dna(args.token, args.ref, args.feature_id_list,resultHandler);
      }
    }

    public static class get_feature_functions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_feature_functions_args, Map<String,String>> {
      public get_feature_functions() {
        super("get_feature_functions");
      }

      public get_feature_functions_args getEmptyArgsInstance() {
        return new get_feature_functions_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            get_feature_functions_result result = new get_feature_functions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_feature_functions_result result = new get_feature_functions_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_feature_functions_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.get_feature_functions(args.token, args.ref, args.feature_id_list,resultHandler);
      }
    }

    public static class get_feature_aliases<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_feature_aliases_args, Map<String,List<String>>> {
      public get_feature_aliases() {
        super("get_feature_aliases");
      }

      public get_feature_aliases_args getEmptyArgsInstance() {
        return new get_feature_aliases_args();
      }

      public AsyncMethodCallback<Map<String,List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<String>>>() { 
          public void onComplete(Map<String,List<String>> o) {
            get_feature_aliases_result result = new get_feature_aliases_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_feature_aliases_result result = new get_feature_aliases_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_feature_aliases_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<String>>> resultHandler) throws TException {
        iface.get_feature_aliases(args.token, args.ref, args.feature_id_list,resultHandler);
      }
    }

    public static class get_cds_by_gene<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_cds_by_gene_args, Map<String,List<String>>> {
      public get_cds_by_gene() {
        super("get_cds_by_gene");
      }

      public get_cds_by_gene_args getEmptyArgsInstance() {
        return new get_cds_by_gene_args();
      }

      public AsyncMethodCallback<Map<String,List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<String>>>() { 
          public void onComplete(Map<String,List<String>> o) {
            get_cds_by_gene_result result = new get_cds_by_gene_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_cds_by_gene_result result = new get_cds_by_gene_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_cds_by_gene_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<String>>> resultHandler) throws TException {
        iface.get_cds_by_gene(args.token, args.ref, args.gene_id_list,resultHandler);
      }
    }

    public static class get_cds_by_mrna<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_cds_by_mrna_args, Map<String,String>> {
      public get_cds_by_mrna() {
        super("get_cds_by_mrna");
      }

      public get_cds_by_mrna_args getEmptyArgsInstance() {
        return new get_cds_by_mrna_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            get_cds_by_mrna_result result = new get_cds_by_mrna_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_cds_by_mrna_result result = new get_cds_by_mrna_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_cds_by_mrna_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.get_cds_by_mrna(args.token, args.ref, args.mrna_id_list,resultHandler);
      }
    }

    public static class get_gene_by_cds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_gene_by_cds_args, Map<String,String>> {
      public get_gene_by_cds() {
        super("get_gene_by_cds");
      }

      public get_gene_by_cds_args getEmptyArgsInstance() {
        return new get_gene_by_cds_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            get_gene_by_cds_result result = new get_gene_by_cds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_gene_by_cds_result result = new get_gene_by_cds_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_gene_by_cds_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.get_gene_by_cds(args.token, args.ref, args.cds_id_list,resultHandler);
      }
    }

    public static class get_gene_by_mrna<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_gene_by_mrna_args, Map<String,String>> {
      public get_gene_by_mrna() {
        super("get_gene_by_mrna");
      }

      public get_gene_by_mrna_args getEmptyArgsInstance() {
        return new get_gene_by_mrna_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            get_gene_by_mrna_result result = new get_gene_by_mrna_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_gene_by_mrna_result result = new get_gene_by_mrna_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_gene_by_mrna_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.get_gene_by_mrna(args.token, args.ref, args.mrna_id_list,resultHandler);
      }
    }

    public static class get_mrna_by_cds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_mrna_by_cds_args, Map<String,String>> {
      public get_mrna_by_cds() {
        super("get_mrna_by_cds");
      }

      public get_mrna_by_cds_args getEmptyArgsInstance() {
        return new get_mrna_by_cds_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            get_mrna_by_cds_result result = new get_mrna_by_cds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_mrna_by_cds_result result = new get_mrna_by_cds_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_mrna_by_cds_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.get_mrna_by_cds(args.token, args.ref, args.cds_id_list,resultHandler);
      }
    }

    public static class get_mrna_by_gene<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_mrna_by_gene_args, Map<String,List<String>>> {
      public get_mrna_by_gene() {
        super("get_mrna_by_gene");
      }

      public get_mrna_by_gene_args getEmptyArgsInstance() {
        return new get_mrna_by_gene_args();
      }

      public AsyncMethodCallback<Map<String,List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<String>>>() { 
          public void onComplete(Map<String,List<String>> o) {
            get_mrna_by_gene_result result = new get_mrna_by_gene_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_mrna_by_gene_result result = new get_mrna_by_gene_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_mrna_by_gene_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<String>>> resultHandler) throws TException {
        iface.get_mrna_by_gene(args.token, args.ref, args.gene_id_list,resultHandler);
      }
    }

    public static class get_mrna_exons<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_mrna_exons_args, Map<String,List<Exon_data>>> {
      public get_mrna_exons() {
        super("get_mrna_exons");
      }

      public get_mrna_exons_args getEmptyArgsInstance() {
        return new get_mrna_exons_args();
      }

      public AsyncMethodCallback<Map<String,List<Exon_data>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<Exon_data>>>() { 
          public void onComplete(Map<String,List<Exon_data>> o) {
            get_mrna_exons_result result = new get_mrna_exons_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_mrna_exons_result result = new get_mrna_exons_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_mrna_exons_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<Exon_data>>> resultHandler) throws TException {
        iface.get_mrna_exons(args.token, args.ref, args.mrna_id_list,resultHandler);
      }
    }

    public static class get_mrna_utrs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_mrna_utrs_args, Map<String,Map<String,UTR_data>>> {
      public get_mrna_utrs() {
        super("get_mrna_utrs");
      }

      public get_mrna_utrs_args getEmptyArgsInstance() {
        return new get_mrna_utrs_args();
      }

      public AsyncMethodCallback<Map<String,Map<String,UTR_data>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<String,UTR_data>>>() { 
          public void onComplete(Map<String,Map<String,UTR_data>> o) {
            get_mrna_utrs_result result = new get_mrna_utrs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_mrna_utrs_result result = new get_mrna_utrs_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_mrna_utrs_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Map<String,UTR_data>>> resultHandler) throws TException {
        iface.get_mrna_utrs(args.token, args.ref, args.mrna_id_list,resultHandler);
      }
    }

    public static class get_gff<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_gff_args, ByteBuffer> {
      public get_gff() {
        super("get_gff");
      }

      public get_gff_args getEmptyArgsInstance() {
        return new get_gff_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            get_gff_result result = new get_gff_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_gff_result result = new get_gff_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_gff_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.get_gff(args.token, args.ref, args.gene_id_list,resultHandler);
      }
    }

  }

  public static class get_taxon_args implements org.apache.thrift.TBase<get_taxon_args, get_taxon_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_taxon_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_taxon_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_taxon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_taxon_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_taxon_args.class, metaDataMap);
    }

    public get_taxon_args() {
    }

    public get_taxon_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_taxon_args(get_taxon_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_taxon_args deepCopy() {
      return new get_taxon_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_taxon_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_taxon_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_taxon_args)
        return this.equals((get_taxon_args)that);
      return false;
    }

    public boolean equals(get_taxon_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_taxon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_taxon_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_taxon_argsStandardSchemeFactory implements SchemeFactory {
      public get_taxon_argsStandardScheme getScheme() {
        return new get_taxon_argsStandardScheme();
      }
    }

    private static class get_taxon_argsStandardScheme extends StandardScheme<get_taxon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_taxon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_taxon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_taxon_argsTupleSchemeFactory implements SchemeFactory {
      public get_taxon_argsTupleScheme getScheme() {
        return new get_taxon_argsTupleScheme();
      }
    }

    private static class get_taxon_argsTupleScheme extends TupleScheme<get_taxon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_taxon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_taxon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_taxon_result implements org.apache.thrift.TBase<get_taxon_result, get_taxon_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_taxon_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_taxon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_taxon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_taxon_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_taxon_result.class, metaDataMap);
    }

    public get_taxon_result() {
    }

    public get_taxon_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_taxon_result(get_taxon_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_taxon_result deepCopy() {
      return new get_taxon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_taxon_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_taxon_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_taxon_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_taxon_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_taxon_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_taxon_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_taxon_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_taxon_result)
        return this.equals((get_taxon_result)that);
      return false;
    }

    public boolean equals(get_taxon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_taxon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_taxon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_taxon_resultStandardSchemeFactory implements SchemeFactory {
      public get_taxon_resultStandardScheme getScheme() {
        return new get_taxon_resultStandardScheme();
      }
    }

    private static class get_taxon_resultStandardScheme extends StandardScheme<get_taxon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_taxon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_taxon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_taxon_resultTupleSchemeFactory implements SchemeFactory {
      public get_taxon_resultTupleScheme getScheme() {
        return new get_taxon_resultTupleScheme();
      }
    }

    private static class get_taxon_resultTupleScheme extends TupleScheme<get_taxon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_taxon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_taxon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_assembly_args implements org.apache.thrift.TBase<get_assembly_args, get_assembly_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_assembly_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_assembly_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_assembly_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_assembly_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_assembly_args.class, metaDataMap);
    }

    public get_assembly_args() {
    }

    public get_assembly_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_assembly_args(get_assembly_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_assembly_args deepCopy() {
      return new get_assembly_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_assembly_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_assembly_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_assembly_args)
        return this.equals((get_assembly_args)that);
      return false;
    }

    public boolean equals(get_assembly_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_assembly_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_assembly_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_assembly_argsStandardSchemeFactory implements SchemeFactory {
      public get_assembly_argsStandardScheme getScheme() {
        return new get_assembly_argsStandardScheme();
      }
    }

    private static class get_assembly_argsStandardScheme extends StandardScheme<get_assembly_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_assembly_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_assembly_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_assembly_argsTupleSchemeFactory implements SchemeFactory {
      public get_assembly_argsTupleScheme getScheme() {
        return new get_assembly_argsTupleScheme();
      }
    }

    private static class get_assembly_argsTupleScheme extends TupleScheme<get_assembly_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_assembly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_assembly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_assembly_result implements org.apache.thrift.TBase<get_assembly_result, get_assembly_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_assembly_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_assembly_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_assembly_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_assembly_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_assembly_result.class, metaDataMap);
    }

    public get_assembly_result() {
    }

    public get_assembly_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_assembly_result(get_assembly_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_assembly_result deepCopy() {
      return new get_assembly_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_assembly_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_assembly_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_assembly_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_assembly_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_assembly_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_assembly_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_assembly_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_assembly_result)
        return this.equals((get_assembly_result)that);
      return false;
    }

    public boolean equals(get_assembly_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_assembly_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_assembly_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_assembly_resultStandardSchemeFactory implements SchemeFactory {
      public get_assembly_resultStandardScheme getScheme() {
        return new get_assembly_resultStandardScheme();
      }
    }

    private static class get_assembly_resultStandardScheme extends StandardScheme<get_assembly_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_assembly_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_assembly_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_assembly_resultTupleSchemeFactory implements SchemeFactory {
      public get_assembly_resultTupleScheme getScheme() {
        return new get_assembly_resultTupleScheme();
      }
    }

    private static class get_assembly_resultTupleScheme extends TupleScheme<get_assembly_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_assembly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_assembly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_feature_types_args implements org.apache.thrift.TBase<get_feature_types_args, get_feature_types_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_types_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_types_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_types_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_types_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_types_args.class, metaDataMap);
    }

    public get_feature_types_args() {
    }

    public get_feature_types_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_types_args(get_feature_types_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_feature_types_args deepCopy() {
      return new get_feature_types_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_feature_types_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_feature_types_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_types_args)
        return this.equals((get_feature_types_args)that);
      return false;
    }

    public boolean equals(get_feature_types_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_types_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_types_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_types_argsStandardSchemeFactory implements SchemeFactory {
      public get_feature_types_argsStandardScheme getScheme() {
        return new get_feature_types_argsStandardScheme();
      }
    }

    private static class get_feature_types_argsStandardScheme extends StandardScheme<get_feature_types_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_types_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_types_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_types_argsTupleSchemeFactory implements SchemeFactory {
      public get_feature_types_argsTupleScheme getScheme() {
        return new get_feature_types_argsTupleScheme();
      }
    }

    private static class get_feature_types_argsTupleScheme extends TupleScheme<get_feature_types_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_types_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_types_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_feature_types_result implements org.apache.thrift.TBase<get_feature_types_result, get_feature_types_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_types_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_types_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_types_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_types_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_types_result.class, metaDataMap);
    }

    public get_feature_types_result() {
    }

    public get_feature_types_result(
      List<String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_types_result(get_feature_types_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_feature_types_result deepCopy() {
      return new get_feature_types_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_feature_types_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_feature_types_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_feature_types_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_feature_types_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_feature_types_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_feature_types_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_feature_types_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_types_result)
        return this.equals((get_feature_types_result)that);
      return false;
    }

    public boolean equals(get_feature_types_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_types_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_types_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_types_resultStandardSchemeFactory implements SchemeFactory {
      public get_feature_types_resultStandardScheme getScheme() {
        return new get_feature_types_resultStandardScheme();
      }
    }

    private static class get_feature_types_resultStandardScheme extends StandardScheme<get_feature_types_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_types_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list216.size);
                  String _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = iprot.readString();
                    struct.success.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_types_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter219 : struct.success)
            {
              oprot.writeString(_iter219);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_types_resultTupleSchemeFactory implements SchemeFactory {
      public get_feature_types_resultTupleScheme getScheme() {
        return new get_feature_types_resultTupleScheme();
      }
    }

    private static class get_feature_types_resultTupleScheme extends TupleScheme<get_feature_types_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_types_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter220 : struct.success)
            {
              oprot.writeString(_iter220);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_types_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list221.size);
            String _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = iprot.readString();
              struct.success.add(_elem222);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_feature_type_descriptions_args implements org.apache.thrift.TBase<get_feature_type_descriptions_args, get_feature_type_descriptions_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_type_descriptions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_type_descriptions_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_TYPE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_type_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_type_descriptions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_type_descriptions_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> feature_type_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      FEATURE_TYPE_LIST((short)3, "feature_type_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // FEATURE_TYPE_LIST
            return FEATURE_TYPE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.FEATURE_TYPE_LIST, new org.apache.thrift.meta_data.FieldMetaData("feature_type_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_type_descriptions_args.class, metaDataMap);
    }

    public get_feature_type_descriptions_args() {
    }

    public get_feature_type_descriptions_args(
      String token,
      String ref,
      List<String> feature_type_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.feature_type_list = feature_type_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_type_descriptions_args(get_feature_type_descriptions_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetFeature_type_list()) {
        List<String> __this__feature_type_list = new ArrayList<String>(other.feature_type_list);
        this.feature_type_list = __this__feature_type_list;
      }
    }

    public get_feature_type_descriptions_args deepCopy() {
      return new get_feature_type_descriptions_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.feature_type_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_feature_type_descriptions_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_feature_type_descriptions_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getFeature_type_listSize() {
      return (this.feature_type_list == null) ? 0 : this.feature_type_list.size();
    }

    public java.util.Iterator<String> getFeature_type_listIterator() {
      return (this.feature_type_list == null) ? null : this.feature_type_list.iterator();
    }

    public void addToFeature_type_list(String elem) {
      if (this.feature_type_list == null) {
        this.feature_type_list = new ArrayList<String>();
      }
      this.feature_type_list.add(elem);
    }

    public List<String> getFeature_type_list() {
      return this.feature_type_list;
    }

    public get_feature_type_descriptions_args setFeature_type_list(List<String> feature_type_list) {
      this.feature_type_list = feature_type_list;
      return this;
    }

    public void unsetFeature_type_list() {
      this.feature_type_list = null;
    }

    /** Returns true if field feature_type_list is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature_type_list() {
      return this.feature_type_list != null;
    }

    public void setFeature_type_listIsSet(boolean value) {
      if (!value) {
        this.feature_type_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case FEATURE_TYPE_LIST:
        if (value == null) {
          unsetFeature_type_list();
        } else {
          setFeature_type_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case FEATURE_TYPE_LIST:
        return getFeature_type_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case FEATURE_TYPE_LIST:
        return isSetFeature_type_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_type_descriptions_args)
        return this.equals((get_feature_type_descriptions_args)that);
      return false;
    }

    public boolean equals(get_feature_type_descriptions_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_feature_type_list = true && this.isSetFeature_type_list();
      boolean that_present_feature_type_list = true && that.isSetFeature_type_list();
      if (this_present_feature_type_list || that_present_feature_type_list) {
        if (!(this_present_feature_type_list && that_present_feature_type_list))
          return false;
        if (!this.feature_type_list.equals(that.feature_type_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_feature_type_list = true && (isSetFeature_type_list());
      list.add(present_feature_type_list);
      if (present_feature_type_list)
        list.add(feature_type_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_type_descriptions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeature_type_list()).compareTo(other.isSetFeature_type_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature_type_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_type_list, other.feature_type_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_type_descriptions_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature_type_list:");
      if (this.feature_type_list == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_type_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_type_descriptions_argsStandardSchemeFactory implements SchemeFactory {
      public get_feature_type_descriptions_argsStandardScheme getScheme() {
        return new get_feature_type_descriptions_argsStandardScheme();
      }
    }

    private static class get_feature_type_descriptions_argsStandardScheme extends StandardScheme<get_feature_type_descriptions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_type_descriptions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE_TYPE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.feature_type_list = new ArrayList<String>(_list224.size);
                  String _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = iprot.readString();
                    struct.feature_type_list.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setFeature_type_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_type_descriptions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.feature_type_list != null) {
          oprot.writeFieldBegin(FEATURE_TYPE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_type_list.size()));
            for (String _iter227 : struct.feature_type_list)
            {
              oprot.writeString(_iter227);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_type_descriptions_argsTupleSchemeFactory implements SchemeFactory {
      public get_feature_type_descriptions_argsTupleScheme getScheme() {
        return new get_feature_type_descriptions_argsTupleScheme();
      }
    }

    private static class get_feature_type_descriptions_argsTupleScheme extends TupleScheme<get_feature_type_descriptions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_type_descriptions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetFeature_type_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeature_type_list()) {
          {
            oprot.writeI32(struct.feature_type_list.size());
            for (String _iter228 : struct.feature_type_list)
            {
              oprot.writeString(_iter228);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_type_descriptions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.feature_type_list = new ArrayList<String>(_list229.size);
            String _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = iprot.readString();
              struct.feature_type_list.add(_elem230);
            }
          }
          struct.setFeature_type_listIsSet(true);
        }
      }
    }

  }

  public static class get_feature_type_descriptions_result implements org.apache.thrift.TBase<get_feature_type_descriptions_result, get_feature_type_descriptions_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_type_descriptions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_type_descriptions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_type_descriptions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_type_descriptions_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_type_descriptions_result.class, metaDataMap);
    }

    public get_feature_type_descriptions_result() {
    }

    public get_feature_type_descriptions_result(
      Map<String,String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_type_descriptions_result(get_feature_type_descriptions_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new TreeMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_feature_type_descriptions_result deepCopy() {
      return new get_feature_type_descriptions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new TreeMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public get_feature_type_descriptions_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_feature_type_descriptions_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_feature_type_descriptions_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_feature_type_descriptions_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_feature_type_descriptions_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_feature_type_descriptions_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_feature_type_descriptions_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_type_descriptions_result)
        return this.equals((get_feature_type_descriptions_result)that);
      return false;
    }

    public boolean equals(get_feature_type_descriptions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_type_descriptions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_type_descriptions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_type_descriptions_resultStandardSchemeFactory implements SchemeFactory {
      public get_feature_type_descriptions_resultStandardScheme getScheme() {
        return new get_feature_type_descriptions_resultStandardScheme();
      }
    }

    private static class get_feature_type_descriptions_resultStandardScheme extends StandardScheme<get_feature_type_descriptions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_type_descriptions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map232 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,String>();
                  String _key233;
                  String _val234;
                  for (int _i235 = 0; _i235 < _map232.size; ++_i235)
                  {
                    _key233 = iprot.readString();
                    _val234 = iprot.readString();
                    struct.success.put(_key233, _val234);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_type_descriptions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter236 : struct.success.entrySet())
            {
              oprot.writeString(_iter236.getKey());
              oprot.writeString(_iter236.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_type_descriptions_resultTupleSchemeFactory implements SchemeFactory {
      public get_feature_type_descriptions_resultTupleScheme getScheme() {
        return new get_feature_type_descriptions_resultTupleScheme();
      }
    }

    private static class get_feature_type_descriptions_resultTupleScheme extends TupleScheme<get_feature_type_descriptions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_type_descriptions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter237 : struct.success.entrySet())
            {
              oprot.writeString(_iter237.getKey());
              oprot.writeString(_iter237.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_type_descriptions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map238 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new TreeMap<String,String>();
            String _key239;
            String _val240;
            for (int _i241 = 0; _i241 < _map238.size; ++_i241)
            {
              _key239 = iprot.readString();
              _val240 = iprot.readString();
              struct.success.put(_key239, _val240);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_feature_type_counts_args implements org.apache.thrift.TBase<get_feature_type_counts_args, get_feature_type_counts_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_type_counts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_type_counts_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_TYPE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_type_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_type_counts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_type_counts_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> feature_type_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      FEATURE_TYPE_LIST((short)3, "feature_type_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // FEATURE_TYPE_LIST
            return FEATURE_TYPE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.FEATURE_TYPE_LIST, new org.apache.thrift.meta_data.FieldMetaData("feature_type_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_type_counts_args.class, metaDataMap);
    }

    public get_feature_type_counts_args() {
    }

    public get_feature_type_counts_args(
      String token,
      String ref,
      List<String> feature_type_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.feature_type_list = feature_type_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_type_counts_args(get_feature_type_counts_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetFeature_type_list()) {
        List<String> __this__feature_type_list = new ArrayList<String>(other.feature_type_list);
        this.feature_type_list = __this__feature_type_list;
      }
    }

    public get_feature_type_counts_args deepCopy() {
      return new get_feature_type_counts_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.feature_type_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_feature_type_counts_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_feature_type_counts_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getFeature_type_listSize() {
      return (this.feature_type_list == null) ? 0 : this.feature_type_list.size();
    }

    public java.util.Iterator<String> getFeature_type_listIterator() {
      return (this.feature_type_list == null) ? null : this.feature_type_list.iterator();
    }

    public void addToFeature_type_list(String elem) {
      if (this.feature_type_list == null) {
        this.feature_type_list = new ArrayList<String>();
      }
      this.feature_type_list.add(elem);
    }

    public List<String> getFeature_type_list() {
      return this.feature_type_list;
    }

    public get_feature_type_counts_args setFeature_type_list(List<String> feature_type_list) {
      this.feature_type_list = feature_type_list;
      return this;
    }

    public void unsetFeature_type_list() {
      this.feature_type_list = null;
    }

    /** Returns true if field feature_type_list is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature_type_list() {
      return this.feature_type_list != null;
    }

    public void setFeature_type_listIsSet(boolean value) {
      if (!value) {
        this.feature_type_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case FEATURE_TYPE_LIST:
        if (value == null) {
          unsetFeature_type_list();
        } else {
          setFeature_type_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case FEATURE_TYPE_LIST:
        return getFeature_type_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case FEATURE_TYPE_LIST:
        return isSetFeature_type_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_type_counts_args)
        return this.equals((get_feature_type_counts_args)that);
      return false;
    }

    public boolean equals(get_feature_type_counts_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_feature_type_list = true && this.isSetFeature_type_list();
      boolean that_present_feature_type_list = true && that.isSetFeature_type_list();
      if (this_present_feature_type_list || that_present_feature_type_list) {
        if (!(this_present_feature_type_list && that_present_feature_type_list))
          return false;
        if (!this.feature_type_list.equals(that.feature_type_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_feature_type_list = true && (isSetFeature_type_list());
      list.add(present_feature_type_list);
      if (present_feature_type_list)
        list.add(feature_type_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_type_counts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeature_type_list()).compareTo(other.isSetFeature_type_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature_type_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_type_list, other.feature_type_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_type_counts_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature_type_list:");
      if (this.feature_type_list == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_type_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_type_counts_argsStandardSchemeFactory implements SchemeFactory {
      public get_feature_type_counts_argsStandardScheme getScheme() {
        return new get_feature_type_counts_argsStandardScheme();
      }
    }

    private static class get_feature_type_counts_argsStandardScheme extends StandardScheme<get_feature_type_counts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_type_counts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE_TYPE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list242 = iprot.readListBegin();
                  struct.feature_type_list = new ArrayList<String>(_list242.size);
                  String _elem243;
                  for (int _i244 = 0; _i244 < _list242.size; ++_i244)
                  {
                    _elem243 = iprot.readString();
                    struct.feature_type_list.add(_elem243);
                  }
                  iprot.readListEnd();
                }
                struct.setFeature_type_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_type_counts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.feature_type_list != null) {
          oprot.writeFieldBegin(FEATURE_TYPE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_type_list.size()));
            for (String _iter245 : struct.feature_type_list)
            {
              oprot.writeString(_iter245);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_type_counts_argsTupleSchemeFactory implements SchemeFactory {
      public get_feature_type_counts_argsTupleScheme getScheme() {
        return new get_feature_type_counts_argsTupleScheme();
      }
    }

    private static class get_feature_type_counts_argsTupleScheme extends TupleScheme<get_feature_type_counts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_type_counts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetFeature_type_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeature_type_list()) {
          {
            oprot.writeI32(struct.feature_type_list.size());
            for (String _iter246 : struct.feature_type_list)
            {
              oprot.writeString(_iter246);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_type_counts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list247 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.feature_type_list = new ArrayList<String>(_list247.size);
            String _elem248;
            for (int _i249 = 0; _i249 < _list247.size; ++_i249)
            {
              _elem248 = iprot.readString();
              struct.feature_type_list.add(_elem248);
            }
          }
          struct.setFeature_type_listIsSet(true);
        }
      }
    }

  }

  public static class get_feature_type_counts_result implements org.apache.thrift.TBase<get_feature_type_counts_result, get_feature_type_counts_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_type_counts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_type_counts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_type_counts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_type_counts_resultTupleSchemeFactory());
    }

    public Map<String,Long> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_type_counts_result.class, metaDataMap);
    }

    public get_feature_type_counts_result() {
    }

    public get_feature_type_counts_result(
      Map<String,Long> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_type_counts_result(get_feature_type_counts_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new TreeMap<String,Long>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_feature_type_counts_result deepCopy() {
      return new get_feature_type_counts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new TreeMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public get_feature_type_counts_result setSuccess(Map<String,Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_feature_type_counts_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_feature_type_counts_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_feature_type_counts_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_feature_type_counts_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_feature_type_counts_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_feature_type_counts_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_type_counts_result)
        return this.equals((get_feature_type_counts_result)that);
      return false;
    }

    public boolean equals(get_feature_type_counts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_type_counts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_type_counts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_type_counts_resultStandardSchemeFactory implements SchemeFactory {
      public get_feature_type_counts_resultStandardScheme getScheme() {
        return new get_feature_type_counts_resultStandardScheme();
      }
    }

    private static class get_feature_type_counts_resultStandardScheme extends StandardScheme<get_feature_type_counts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_type_counts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map250 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,Long>();
                  String _key251;
                  long _val252;
                  for (int _i253 = 0; _i253 < _map250.size; ++_i253)
                  {
                    _key251 = iprot.readString();
                    _val252 = iprot.readI64();
                    struct.success.put(_key251, _val252);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_type_counts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter254 : struct.success.entrySet())
            {
              oprot.writeString(_iter254.getKey());
              oprot.writeI64(_iter254.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_type_counts_resultTupleSchemeFactory implements SchemeFactory {
      public get_feature_type_counts_resultTupleScheme getScheme() {
        return new get_feature_type_counts_resultTupleScheme();
      }
    }

    private static class get_feature_type_counts_resultTupleScheme extends TupleScheme<get_feature_type_counts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_type_counts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter255 : struct.success.entrySet())
            {
              oprot.writeString(_iter255.getKey());
              oprot.writeI64(_iter255.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_type_counts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map256 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new TreeMap<String,Long>();
            String _key257;
            long _val258;
            for (int _i259 = 0; _i259 < _map256.size; ++_i259)
            {
              _key257 = iprot.readString();
              _val258 = iprot.readI64();
              struct.success.put(_key257, _val258);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_feature_ids_args implements org.apache.thrift.TBase<get_feature_ids_args, get_feature_ids_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_ids_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_ids_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("filters", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("group_type", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_ids_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_ids_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public Feature_id_filters filters; // required
    public String group_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      FILTERS((short)3, "filters"),
      GROUP_TYPE((short)4, "group_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // FILTERS
            return FILTERS;
          case 4: // GROUP_TYPE
            return GROUP_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.FILTERS, new org.apache.thrift.meta_data.FieldMetaData("filters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature_id_filters.class)));
      tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("group_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_ids_args.class, metaDataMap);
    }

    public get_feature_ids_args() {
    }

    public get_feature_ids_args(
      String token,
      String ref,
      Feature_id_filters filters,
      String group_type)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.filters = filters;
      this.group_type = group_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_ids_args(get_feature_ids_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetFilters()) {
        this.filters = new Feature_id_filters(other.filters);
      }
      if (other.isSetGroup_type()) {
        this.group_type = other.group_type;
      }
    }

    public get_feature_ids_args deepCopy() {
      return new get_feature_ids_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.filters = null;
      this.group_type = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_feature_ids_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_feature_ids_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public Feature_id_filters getFilters() {
      return this.filters;
    }

    public get_feature_ids_args setFilters(Feature_id_filters filters) {
      this.filters = filters;
      return this;
    }

    public void unsetFilters() {
      this.filters = null;
    }

    /** Returns true if field filters is set (has been assigned a value) and false otherwise */
    public boolean isSetFilters() {
      return this.filters != null;
    }

    public void setFiltersIsSet(boolean value) {
      if (!value) {
        this.filters = null;
      }
    }

    public String getGroup_type() {
      return this.group_type;
    }

    public get_feature_ids_args setGroup_type(String group_type) {
      this.group_type = group_type;
      return this;
    }

    public void unsetGroup_type() {
      this.group_type = null;
    }

    /** Returns true if field group_type is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_type() {
      return this.group_type != null;
    }

    public void setGroup_typeIsSet(boolean value) {
      if (!value) {
        this.group_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case FILTERS:
        if (value == null) {
          unsetFilters();
        } else {
          setFilters((Feature_id_filters)value);
        }
        break;

      case GROUP_TYPE:
        if (value == null) {
          unsetGroup_type();
        } else {
          setGroup_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case FILTERS:
        return getFilters();

      case GROUP_TYPE:
        return getGroup_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case FILTERS:
        return isSetFilters();
      case GROUP_TYPE:
        return isSetGroup_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_ids_args)
        return this.equals((get_feature_ids_args)that);
      return false;
    }

    public boolean equals(get_feature_ids_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_filters = true && this.isSetFilters();
      boolean that_present_filters = true && that.isSetFilters();
      if (this_present_filters || that_present_filters) {
        if (!(this_present_filters && that_present_filters))
          return false;
        if (!this.filters.equals(that.filters))
          return false;
      }

      boolean this_present_group_type = true && this.isSetGroup_type();
      boolean that_present_group_type = true && that.isSetGroup_type();
      if (this_present_group_type || that_present_group_type) {
        if (!(this_present_group_type && that_present_group_type))
          return false;
        if (!this.group_type.equals(that.group_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_filters = true && (isSetFilters());
      list.add(present_filters);
      if (present_filters)
        list.add(filters);

      boolean present_group_type = true && (isSetGroup_type());
      list.add(present_group_type);
      if (present_group_type)
        list.add(group_type);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_ids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilters()).compareTo(other.isSetFilters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filters, other.filters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup_type()).compareTo(other.isSetGroup_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_type, other.group_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_ids_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filters:");
      if (this.filters == null) {
        sb.append("null");
      } else {
        sb.append(this.filters);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("group_type:");
      if (this.group_type == null) {
        sb.append("null");
      } else {
        sb.append(this.group_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (filters != null) {
        filters.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_ids_argsStandardSchemeFactory implements SchemeFactory {
      public get_feature_ids_argsStandardScheme getScheme() {
        return new get_feature_ids_argsStandardScheme();
      }
    }

    private static class get_feature_ids_argsStandardScheme extends StandardScheme<get_feature_ids_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_ids_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILTERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filters = new Feature_id_filters();
                struct.filters.read(iprot);
                struct.setFiltersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GROUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.group_type = iprot.readString();
                struct.setGroup_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_ids_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.filters != null) {
          oprot.writeFieldBegin(FILTERS_FIELD_DESC);
          struct.filters.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.group_type != null) {
          oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.group_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_ids_argsTupleSchemeFactory implements SchemeFactory {
      public get_feature_ids_argsTupleScheme getScheme() {
        return new get_feature_ids_argsTupleScheme();
      }
    }

    private static class get_feature_ids_argsTupleScheme extends TupleScheme<get_feature_ids_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_ids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetFilters()) {
          optionals.set(0);
        }
        if (struct.isSetGroup_type()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFilters()) {
          struct.filters.write(oprot);
        }
        if (struct.isSetGroup_type()) {
          oprot.writeString(struct.group_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_ids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.filters = new Feature_id_filters();
          struct.filters.read(iprot);
          struct.setFiltersIsSet(true);
        }
        if (incoming.get(1)) {
          struct.group_type = iprot.readString();
          struct.setGroup_typeIsSet(true);
        }
      }
    }

  }

  public static class get_feature_ids_result implements org.apache.thrift.TBase<get_feature_ids_result, get_feature_ids_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_ids_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_ids_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_ids_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_ids_resultTupleSchemeFactory());
    }

    public Feature_id_mapping success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature_id_mapping.class)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_ids_result.class, metaDataMap);
    }

    public get_feature_ids_result() {
    }

    public get_feature_ids_result(
      Feature_id_mapping success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_ids_result(get_feature_ids_result other) {
      if (other.isSetSuccess()) {
        this.success = new Feature_id_mapping(other.success);
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_feature_ids_result deepCopy() {
      return new get_feature_ids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public Feature_id_mapping getSuccess() {
      return this.success;
    }

    public get_feature_ids_result setSuccess(Feature_id_mapping success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_feature_ids_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_feature_ids_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_feature_ids_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_feature_ids_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_feature_ids_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_feature_ids_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Feature_id_mapping)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_ids_result)
        return this.equals((get_feature_ids_result)that);
      return false;
    }

    public boolean equals(get_feature_ids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_ids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_ids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_ids_resultStandardSchemeFactory implements SchemeFactory {
      public get_feature_ids_resultStandardScheme getScheme() {
        return new get_feature_ids_resultStandardScheme();
      }
    }

    private static class get_feature_ids_resultStandardScheme extends StandardScheme<get_feature_ids_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_ids_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Feature_id_mapping();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_ids_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_ids_resultTupleSchemeFactory implements SchemeFactory {
      public get_feature_ids_resultTupleScheme getScheme() {
        return new get_feature_ids_resultTupleScheme();
      }
    }

    private static class get_feature_ids_resultTupleScheme extends TupleScheme<get_feature_ids_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_ids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_ids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = new Feature_id_mapping();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_features_args implements org.apache.thrift.TBase<get_features_args, get_features_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_features_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_features_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_features_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_features_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> feature_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      FEATURE_ID_LIST((short)3, "feature_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // FEATURE_ID_LIST
            return FEATURE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.FEATURE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("feature_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_features_args.class, metaDataMap);
    }

    public get_features_args() {
    }

    public get_features_args(
      String token,
      String ref,
      List<String> feature_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.feature_id_list = feature_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_features_args(get_features_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetFeature_id_list()) {
        List<String> __this__feature_id_list = new ArrayList<String>(other.feature_id_list);
        this.feature_id_list = __this__feature_id_list;
      }
    }

    public get_features_args deepCopy() {
      return new get_features_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.feature_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_features_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_features_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getFeature_id_listSize() {
      return (this.feature_id_list == null) ? 0 : this.feature_id_list.size();
    }

    public java.util.Iterator<String> getFeature_id_listIterator() {
      return (this.feature_id_list == null) ? null : this.feature_id_list.iterator();
    }

    public void addToFeature_id_list(String elem) {
      if (this.feature_id_list == null) {
        this.feature_id_list = new ArrayList<String>();
      }
      this.feature_id_list.add(elem);
    }

    public List<String> getFeature_id_list() {
      return this.feature_id_list;
    }

    public get_features_args setFeature_id_list(List<String> feature_id_list) {
      this.feature_id_list = feature_id_list;
      return this;
    }

    public void unsetFeature_id_list() {
      this.feature_id_list = null;
    }

    /** Returns true if field feature_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature_id_list() {
      return this.feature_id_list != null;
    }

    public void setFeature_id_listIsSet(boolean value) {
      if (!value) {
        this.feature_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case FEATURE_ID_LIST:
        if (value == null) {
          unsetFeature_id_list();
        } else {
          setFeature_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case FEATURE_ID_LIST:
        return getFeature_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case FEATURE_ID_LIST:
        return isSetFeature_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_features_args)
        return this.equals((get_features_args)that);
      return false;
    }

    public boolean equals(get_features_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_feature_id_list = true && this.isSetFeature_id_list();
      boolean that_present_feature_id_list = true && that.isSetFeature_id_list();
      if (this_present_feature_id_list || that_present_feature_id_list) {
        if (!(this_present_feature_id_list && that_present_feature_id_list))
          return false;
        if (!this.feature_id_list.equals(that.feature_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_feature_id_list = true && (isSetFeature_id_list());
      list.add(present_feature_id_list);
      if (present_feature_id_list)
        list.add(feature_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_features_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeature_id_list()).compareTo(other.isSetFeature_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_id_list, other.feature_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_features_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature_id_list:");
      if (this.feature_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_features_argsStandardSchemeFactory implements SchemeFactory {
      public get_features_argsStandardScheme getScheme() {
        return new get_features_argsStandardScheme();
      }
    }

    private static class get_features_argsStandardScheme extends StandardScheme<get_features_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_features_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list260 = iprot.readListBegin();
                  struct.feature_id_list = new ArrayList<String>(_list260.size);
                  String _elem261;
                  for (int _i262 = 0; _i262 < _list260.size; ++_i262)
                  {
                    _elem261 = iprot.readString();
                    struct.feature_id_list.add(_elem261);
                  }
                  iprot.readListEnd();
                }
                struct.setFeature_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_features_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.feature_id_list != null) {
          oprot.writeFieldBegin(FEATURE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_id_list.size()));
            for (String _iter263 : struct.feature_id_list)
            {
              oprot.writeString(_iter263);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_features_argsTupleSchemeFactory implements SchemeFactory {
      public get_features_argsTupleScheme getScheme() {
        return new get_features_argsTupleScheme();
      }
    }

    private static class get_features_argsTupleScheme extends TupleScheme<get_features_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_features_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetFeature_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeature_id_list()) {
          {
            oprot.writeI32(struct.feature_id_list.size());
            for (String _iter264 : struct.feature_id_list)
            {
              oprot.writeString(_iter264);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_features_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list265 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.feature_id_list = new ArrayList<String>(_list265.size);
            String _elem266;
            for (int _i267 = 0; _i267 < _list265.size; ++_i267)
            {
              _elem266 = iprot.readString();
              struct.feature_id_list.add(_elem266);
            }
          }
          struct.setFeature_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_features_result implements org.apache.thrift.TBase<get_features_result, get_features_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_features_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_features_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_features_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_features_resultTupleSchemeFactory());
    }

    public Map<String,Feature_data> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature_data.class))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_features_result.class, metaDataMap);
    }

    public get_features_result() {
    }

    public get_features_result(
      Map<String,Feature_data> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_features_result(get_features_result other) {
      if (other.isSetSuccess()) {
        Map<String,Feature_data> __this__success = new TreeMap<String,Feature_data>();
        for (Map.Entry<String, Feature_data> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Feature_data other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Feature_data __this__success_copy_value = new Feature_data(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_features_result deepCopy() {
      return new get_features_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Feature_data val) {
      if (this.success == null) {
        this.success = new TreeMap<String,Feature_data>();
      }
      this.success.put(key, val);
    }

    public Map<String,Feature_data> getSuccess() {
      return this.success;
    }

    public get_features_result setSuccess(Map<String,Feature_data> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_features_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_features_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_features_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_features_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_features_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_features_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Feature_data>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_features_result)
        return this.equals((get_features_result)that);
      return false;
    }

    public boolean equals(get_features_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_features_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_features_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_features_resultStandardSchemeFactory implements SchemeFactory {
      public get_features_resultStandardScheme getScheme() {
        return new get_features_resultStandardScheme();
      }
    }

    private static class get_features_resultStandardScheme extends StandardScheme<get_features_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_features_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map268 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,Feature_data>();
                  String _key269;
                  Feature_data _val270;
                  for (int _i271 = 0; _i271 < _map268.size; ++_i271)
                  {
                    _key269 = iprot.readString();
                    _val270 = new Feature_data();
                    _val270.read(iprot);
                    struct.success.put(_key269, _val270);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_features_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Feature_data> _iter272 : struct.success.entrySet())
            {
              oprot.writeString(_iter272.getKey());
              _iter272.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_features_resultTupleSchemeFactory implements SchemeFactory {
      public get_features_resultTupleScheme getScheme() {
        return new get_features_resultTupleScheme();
      }
    }

    private static class get_features_resultTupleScheme extends TupleScheme<get_features_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_features_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Feature_data> _iter273 : struct.success.entrySet())
            {
              oprot.writeString(_iter273.getKey());
              _iter273.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_features_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map274 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new TreeMap<String,Feature_data>();
            String _key275;
            Feature_data _val276;
            for (int _i277 = 0; _i277 < _map274.size; ++_i277)
            {
              _key275 = iprot.readString();
              _val276 = new Feature_data();
              _val276.read(iprot);
              struct.success.put(_key275, _val276);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_proteins_args implements org.apache.thrift.TBase<get_proteins_args, get_proteins_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_proteins_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_proteins_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_proteins_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_proteins_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_proteins_args.class, metaDataMap);
    }

    public get_proteins_args() {
    }

    public get_proteins_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_proteins_args(get_proteins_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_proteins_args deepCopy() {
      return new get_proteins_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_proteins_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_proteins_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_proteins_args)
        return this.equals((get_proteins_args)that);
      return false;
    }

    public boolean equals(get_proteins_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_proteins_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_proteins_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_proteins_argsStandardSchemeFactory implements SchemeFactory {
      public get_proteins_argsStandardScheme getScheme() {
        return new get_proteins_argsStandardScheme();
      }
    }

    private static class get_proteins_argsStandardScheme extends StandardScheme<get_proteins_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_proteins_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_proteins_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_proteins_argsTupleSchemeFactory implements SchemeFactory {
      public get_proteins_argsTupleScheme getScheme() {
        return new get_proteins_argsTupleScheme();
      }
    }

    private static class get_proteins_argsTupleScheme extends TupleScheme<get_proteins_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_proteins_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_proteins_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
      }
    }

  }

  public static class get_proteins_result implements org.apache.thrift.TBase<get_proteins_result, get_proteins_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_proteins_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_proteins_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_proteins_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_proteins_resultTupleSchemeFactory());
    }

    public Map<String,Protein_data> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Protein_data.class))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_proteins_result.class, metaDataMap);
    }

    public get_proteins_result() {
    }

    public get_proteins_result(
      Map<String,Protein_data> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_proteins_result(get_proteins_result other) {
      if (other.isSetSuccess()) {
        Map<String,Protein_data> __this__success = new TreeMap<String,Protein_data>();
        for (Map.Entry<String, Protein_data> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Protein_data other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Protein_data __this__success_copy_value = new Protein_data(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_proteins_result deepCopy() {
      return new get_proteins_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Protein_data val) {
      if (this.success == null) {
        this.success = new TreeMap<String,Protein_data>();
      }
      this.success.put(key, val);
    }

    public Map<String,Protein_data> getSuccess() {
      return this.success;
    }

    public get_proteins_result setSuccess(Map<String,Protein_data> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_proteins_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_proteins_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_proteins_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_proteins_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_proteins_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_proteins_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Protein_data>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_proteins_result)
        return this.equals((get_proteins_result)that);
      return false;
    }

    public boolean equals(get_proteins_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_proteins_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_proteins_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_proteins_resultStandardSchemeFactory implements SchemeFactory {
      public get_proteins_resultStandardScheme getScheme() {
        return new get_proteins_resultStandardScheme();
      }
    }

    private static class get_proteins_resultStandardScheme extends StandardScheme<get_proteins_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_proteins_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map278 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,Protein_data>();
                  String _key279;
                  Protein_data _val280;
                  for (int _i281 = 0; _i281 < _map278.size; ++_i281)
                  {
                    _key279 = iprot.readString();
                    _val280 = new Protein_data();
                    _val280.read(iprot);
                    struct.success.put(_key279, _val280);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_proteins_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Protein_data> _iter282 : struct.success.entrySet())
            {
              oprot.writeString(_iter282.getKey());
              _iter282.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_proteins_resultTupleSchemeFactory implements SchemeFactory {
      public get_proteins_resultTupleScheme getScheme() {
        return new get_proteins_resultTupleScheme();
      }
    }

    private static class get_proteins_resultTupleScheme extends TupleScheme<get_proteins_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_proteins_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Protein_data> _iter283 : struct.success.entrySet())
            {
              oprot.writeString(_iter283.getKey());
              _iter283.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_proteins_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map284 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new TreeMap<String,Protein_data>();
            String _key285;
            Protein_data _val286;
            for (int _i287 = 0; _i287 < _map284.size; ++_i287)
            {
              _key285 = iprot.readString();
              _val286 = new Protein_data();
              _val286.read(iprot);
              struct.success.put(_key285, _val286);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_feature_locations_args implements org.apache.thrift.TBase<get_feature_locations_args, get_feature_locations_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_locations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_locations_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_locations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_locations_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> feature_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      FEATURE_ID_LIST((short)3, "feature_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // FEATURE_ID_LIST
            return FEATURE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.FEATURE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("feature_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_locations_args.class, metaDataMap);
    }

    public get_feature_locations_args() {
    }

    public get_feature_locations_args(
      String token,
      String ref,
      List<String> feature_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.feature_id_list = feature_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_locations_args(get_feature_locations_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetFeature_id_list()) {
        List<String> __this__feature_id_list = new ArrayList<String>(other.feature_id_list);
        this.feature_id_list = __this__feature_id_list;
      }
    }

    public get_feature_locations_args deepCopy() {
      return new get_feature_locations_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.feature_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_feature_locations_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_feature_locations_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getFeature_id_listSize() {
      return (this.feature_id_list == null) ? 0 : this.feature_id_list.size();
    }

    public java.util.Iterator<String> getFeature_id_listIterator() {
      return (this.feature_id_list == null) ? null : this.feature_id_list.iterator();
    }

    public void addToFeature_id_list(String elem) {
      if (this.feature_id_list == null) {
        this.feature_id_list = new ArrayList<String>();
      }
      this.feature_id_list.add(elem);
    }

    public List<String> getFeature_id_list() {
      return this.feature_id_list;
    }

    public get_feature_locations_args setFeature_id_list(List<String> feature_id_list) {
      this.feature_id_list = feature_id_list;
      return this;
    }

    public void unsetFeature_id_list() {
      this.feature_id_list = null;
    }

    /** Returns true if field feature_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature_id_list() {
      return this.feature_id_list != null;
    }

    public void setFeature_id_listIsSet(boolean value) {
      if (!value) {
        this.feature_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case FEATURE_ID_LIST:
        if (value == null) {
          unsetFeature_id_list();
        } else {
          setFeature_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case FEATURE_ID_LIST:
        return getFeature_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case FEATURE_ID_LIST:
        return isSetFeature_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_locations_args)
        return this.equals((get_feature_locations_args)that);
      return false;
    }

    public boolean equals(get_feature_locations_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_feature_id_list = true && this.isSetFeature_id_list();
      boolean that_present_feature_id_list = true && that.isSetFeature_id_list();
      if (this_present_feature_id_list || that_present_feature_id_list) {
        if (!(this_present_feature_id_list && that_present_feature_id_list))
          return false;
        if (!this.feature_id_list.equals(that.feature_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_feature_id_list = true && (isSetFeature_id_list());
      list.add(present_feature_id_list);
      if (present_feature_id_list)
        list.add(feature_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_locations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeature_id_list()).compareTo(other.isSetFeature_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_id_list, other.feature_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_locations_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature_id_list:");
      if (this.feature_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_locations_argsStandardSchemeFactory implements SchemeFactory {
      public get_feature_locations_argsStandardScheme getScheme() {
        return new get_feature_locations_argsStandardScheme();
      }
    }

    private static class get_feature_locations_argsStandardScheme extends StandardScheme<get_feature_locations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_locations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list288 = iprot.readListBegin();
                  struct.feature_id_list = new ArrayList<String>(_list288.size);
                  String _elem289;
                  for (int _i290 = 0; _i290 < _list288.size; ++_i290)
                  {
                    _elem289 = iprot.readString();
                    struct.feature_id_list.add(_elem289);
                  }
                  iprot.readListEnd();
                }
                struct.setFeature_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_locations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.feature_id_list != null) {
          oprot.writeFieldBegin(FEATURE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_id_list.size()));
            for (String _iter291 : struct.feature_id_list)
            {
              oprot.writeString(_iter291);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_locations_argsTupleSchemeFactory implements SchemeFactory {
      public get_feature_locations_argsTupleScheme getScheme() {
        return new get_feature_locations_argsTupleScheme();
      }
    }

    private static class get_feature_locations_argsTupleScheme extends TupleScheme<get_feature_locations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_locations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetFeature_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeature_id_list()) {
          {
            oprot.writeI32(struct.feature_id_list.size());
            for (String _iter292 : struct.feature_id_list)
            {
              oprot.writeString(_iter292);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_locations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.feature_id_list = new ArrayList<String>(_list293.size);
            String _elem294;
            for (int _i295 = 0; _i295 < _list293.size; ++_i295)
            {
              _elem294 = iprot.readString();
              struct.feature_id_list.add(_elem294);
            }
          }
          struct.setFeature_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_feature_locations_result implements org.apache.thrift.TBase<get_feature_locations_result, get_feature_locations_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_locations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_locations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_locations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_locations_resultTupleSchemeFactory());
    }

    public Map<String,List<Region>> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Region.class)))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_locations_result.class, metaDataMap);
    }

    public get_feature_locations_result() {
    }

    public get_feature_locations_result(
      Map<String,List<Region>> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_locations_result(get_feature_locations_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<Region>> __this__success = new TreeMap<String,List<Region>>();
        for (Map.Entry<String, List<Region>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Region> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<Region> __this__success_copy_value = new ArrayList<Region>(other_element_value.size());
          for (Region other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new Region(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_feature_locations_result deepCopy() {
      return new get_feature_locations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<Region> val) {
      if (this.success == null) {
        this.success = new TreeMap<String,List<Region>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<Region>> getSuccess() {
      return this.success;
    }

    public get_feature_locations_result setSuccess(Map<String,List<Region>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_feature_locations_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_feature_locations_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_feature_locations_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_feature_locations_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_feature_locations_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_feature_locations_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<Region>>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_locations_result)
        return this.equals((get_feature_locations_result)that);
      return false;
    }

    public boolean equals(get_feature_locations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_locations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_locations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_locations_resultStandardSchemeFactory implements SchemeFactory {
      public get_feature_locations_resultStandardScheme getScheme() {
        return new get_feature_locations_resultStandardScheme();
      }
    }

    private static class get_feature_locations_resultStandardScheme extends StandardScheme<get_feature_locations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_locations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map296 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,List<Region>>();
                  String _key297;
                  List<Region> _val298;
                  for (int _i299 = 0; _i299 < _map296.size; ++_i299)
                  {
                    _key297 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list300 = iprot.readListBegin();
                      _val298 = new ArrayList<Region>(_list300.size);
                      Region _elem301;
                      for (int _i302 = 0; _i302 < _list300.size; ++_i302)
                      {
                        _elem301 = new Region();
                        _elem301.read(iprot);
                        _val298.add(_elem301);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key297, _val298);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_locations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<Region>> _iter303 : struct.success.entrySet())
            {
              oprot.writeString(_iter303.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter303.getValue().size()));
                for (Region _iter304 : _iter303.getValue())
                {
                  _iter304.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_locations_resultTupleSchemeFactory implements SchemeFactory {
      public get_feature_locations_resultTupleScheme getScheme() {
        return new get_feature_locations_resultTupleScheme();
      }
    }

    private static class get_feature_locations_resultTupleScheme extends TupleScheme<get_feature_locations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_locations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<Region>> _iter305 : struct.success.entrySet())
            {
              oprot.writeString(_iter305.getKey());
              {
                oprot.writeI32(_iter305.getValue().size());
                for (Region _iter306 : _iter305.getValue())
                {
                  _iter306.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_locations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map307 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new TreeMap<String,List<Region>>();
            String _key308;
            List<Region> _val309;
            for (int _i310 = 0; _i310 < _map307.size; ++_i310)
            {
              _key308 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list311 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val309 = new ArrayList<Region>(_list311.size);
                Region _elem312;
                for (int _i313 = 0; _i313 < _list311.size; ++_i313)
                {
                  _elem312 = new Region();
                  _elem312.read(iprot);
                  _val309.add(_elem312);
                }
              }
              struct.success.put(_key308, _val309);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_feature_publications_args implements org.apache.thrift.TBase<get_feature_publications_args, get_feature_publications_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_publications_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_publications_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_publications_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_publications_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> feature_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      FEATURE_ID_LIST((short)3, "feature_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // FEATURE_ID_LIST
            return FEATURE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.FEATURE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("feature_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_publications_args.class, metaDataMap);
    }

    public get_feature_publications_args() {
    }

    public get_feature_publications_args(
      String token,
      String ref,
      List<String> feature_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.feature_id_list = feature_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_publications_args(get_feature_publications_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetFeature_id_list()) {
        List<String> __this__feature_id_list = new ArrayList<String>(other.feature_id_list);
        this.feature_id_list = __this__feature_id_list;
      }
    }

    public get_feature_publications_args deepCopy() {
      return new get_feature_publications_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.feature_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_feature_publications_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_feature_publications_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getFeature_id_listSize() {
      return (this.feature_id_list == null) ? 0 : this.feature_id_list.size();
    }

    public java.util.Iterator<String> getFeature_id_listIterator() {
      return (this.feature_id_list == null) ? null : this.feature_id_list.iterator();
    }

    public void addToFeature_id_list(String elem) {
      if (this.feature_id_list == null) {
        this.feature_id_list = new ArrayList<String>();
      }
      this.feature_id_list.add(elem);
    }

    public List<String> getFeature_id_list() {
      return this.feature_id_list;
    }

    public get_feature_publications_args setFeature_id_list(List<String> feature_id_list) {
      this.feature_id_list = feature_id_list;
      return this;
    }

    public void unsetFeature_id_list() {
      this.feature_id_list = null;
    }

    /** Returns true if field feature_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature_id_list() {
      return this.feature_id_list != null;
    }

    public void setFeature_id_listIsSet(boolean value) {
      if (!value) {
        this.feature_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case FEATURE_ID_LIST:
        if (value == null) {
          unsetFeature_id_list();
        } else {
          setFeature_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case FEATURE_ID_LIST:
        return getFeature_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case FEATURE_ID_LIST:
        return isSetFeature_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_publications_args)
        return this.equals((get_feature_publications_args)that);
      return false;
    }

    public boolean equals(get_feature_publications_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_feature_id_list = true && this.isSetFeature_id_list();
      boolean that_present_feature_id_list = true && that.isSetFeature_id_list();
      if (this_present_feature_id_list || that_present_feature_id_list) {
        if (!(this_present_feature_id_list && that_present_feature_id_list))
          return false;
        if (!this.feature_id_list.equals(that.feature_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_feature_id_list = true && (isSetFeature_id_list());
      list.add(present_feature_id_list);
      if (present_feature_id_list)
        list.add(feature_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_publications_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeature_id_list()).compareTo(other.isSetFeature_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_id_list, other.feature_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_publications_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature_id_list:");
      if (this.feature_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_publications_argsStandardSchemeFactory implements SchemeFactory {
      public get_feature_publications_argsStandardScheme getScheme() {
        return new get_feature_publications_argsStandardScheme();
      }
    }

    private static class get_feature_publications_argsStandardScheme extends StandardScheme<get_feature_publications_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_publications_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list314 = iprot.readListBegin();
                  struct.feature_id_list = new ArrayList<String>(_list314.size);
                  String _elem315;
                  for (int _i316 = 0; _i316 < _list314.size; ++_i316)
                  {
                    _elem315 = iprot.readString();
                    struct.feature_id_list.add(_elem315);
                  }
                  iprot.readListEnd();
                }
                struct.setFeature_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_publications_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.feature_id_list != null) {
          oprot.writeFieldBegin(FEATURE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_id_list.size()));
            for (String _iter317 : struct.feature_id_list)
            {
              oprot.writeString(_iter317);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_publications_argsTupleSchemeFactory implements SchemeFactory {
      public get_feature_publications_argsTupleScheme getScheme() {
        return new get_feature_publications_argsTupleScheme();
      }
    }

    private static class get_feature_publications_argsTupleScheme extends TupleScheme<get_feature_publications_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_publications_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetFeature_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeature_id_list()) {
          {
            oprot.writeI32(struct.feature_id_list.size());
            for (String _iter318 : struct.feature_id_list)
            {
              oprot.writeString(_iter318);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_publications_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list319 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.feature_id_list = new ArrayList<String>(_list319.size);
            String _elem320;
            for (int _i321 = 0; _i321 < _list319.size; ++_i321)
            {
              _elem320 = iprot.readString();
              struct.feature_id_list.add(_elem320);
            }
          }
          struct.setFeature_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_feature_publications_result implements org.apache.thrift.TBase<get_feature_publications_result, get_feature_publications_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_publications_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_publications_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_publications_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_publications_resultTupleSchemeFactory());
    }

    public Map<String,List<String>> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_publications_result.class, metaDataMap);
    }

    public get_feature_publications_result() {
    }

    public get_feature_publications_result(
      Map<String,List<String>> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_publications_result(get_feature_publications_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<String>> __this__success = new TreeMap<String,List<String>>();
        for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<String> __this__success_copy_value = new ArrayList<String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_feature_publications_result deepCopy() {
      return new get_feature_publications_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<String> val) {
      if (this.success == null) {
        this.success = new TreeMap<String,List<String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<String>> getSuccess() {
      return this.success;
    }

    public get_feature_publications_result setSuccess(Map<String,List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_feature_publications_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_feature_publications_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_feature_publications_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_feature_publications_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_feature_publications_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_feature_publications_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<String>>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_publications_result)
        return this.equals((get_feature_publications_result)that);
      return false;
    }

    public boolean equals(get_feature_publications_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_publications_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_publications_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_publications_resultStandardSchemeFactory implements SchemeFactory {
      public get_feature_publications_resultStandardScheme getScheme() {
        return new get_feature_publications_resultStandardScheme();
      }
    }

    private static class get_feature_publications_resultStandardScheme extends StandardScheme<get_feature_publications_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_publications_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map322 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,List<String>>();
                  String _key323;
                  List<String> _val324;
                  for (int _i325 = 0; _i325 < _map322.size; ++_i325)
                  {
                    _key323 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list326 = iprot.readListBegin();
                      _val324 = new ArrayList<String>(_list326.size);
                      String _elem327;
                      for (int _i328 = 0; _i328 < _list326.size; ++_i328)
                      {
                        _elem327 = iprot.readString();
                        _val324.add(_elem327);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key323, _val324);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_publications_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<String>> _iter329 : struct.success.entrySet())
            {
              oprot.writeString(_iter329.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter329.getValue().size()));
                for (String _iter330 : _iter329.getValue())
                {
                  oprot.writeString(_iter330);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_publications_resultTupleSchemeFactory implements SchemeFactory {
      public get_feature_publications_resultTupleScheme getScheme() {
        return new get_feature_publications_resultTupleScheme();
      }
    }

    private static class get_feature_publications_resultTupleScheme extends TupleScheme<get_feature_publications_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_publications_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<String>> _iter331 : struct.success.entrySet())
            {
              oprot.writeString(_iter331.getKey());
              {
                oprot.writeI32(_iter331.getValue().size());
                for (String _iter332 : _iter331.getValue())
                {
                  oprot.writeString(_iter332);
                }
              }
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_publications_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map333 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new TreeMap<String,List<String>>();
            String _key334;
            List<String> _val335;
            for (int _i336 = 0; _i336 < _map333.size; ++_i336)
            {
              _key334 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list337 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val335 = new ArrayList<String>(_list337.size);
                String _elem338;
                for (int _i339 = 0; _i339 < _list337.size; ++_i339)
                {
                  _elem338 = iprot.readString();
                  _val335.add(_elem338);
                }
              }
              struct.success.put(_key334, _val335);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_feature_dna_args implements org.apache.thrift.TBase<get_feature_dna_args, get_feature_dna_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_dna_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_dna_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_dna_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_dna_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> feature_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      FEATURE_ID_LIST((short)3, "feature_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // FEATURE_ID_LIST
            return FEATURE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.FEATURE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("feature_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_dna_args.class, metaDataMap);
    }

    public get_feature_dna_args() {
    }

    public get_feature_dna_args(
      String token,
      String ref,
      List<String> feature_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.feature_id_list = feature_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_dna_args(get_feature_dna_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetFeature_id_list()) {
        List<String> __this__feature_id_list = new ArrayList<String>(other.feature_id_list);
        this.feature_id_list = __this__feature_id_list;
      }
    }

    public get_feature_dna_args deepCopy() {
      return new get_feature_dna_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.feature_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_feature_dna_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_feature_dna_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getFeature_id_listSize() {
      return (this.feature_id_list == null) ? 0 : this.feature_id_list.size();
    }

    public java.util.Iterator<String> getFeature_id_listIterator() {
      return (this.feature_id_list == null) ? null : this.feature_id_list.iterator();
    }

    public void addToFeature_id_list(String elem) {
      if (this.feature_id_list == null) {
        this.feature_id_list = new ArrayList<String>();
      }
      this.feature_id_list.add(elem);
    }

    public List<String> getFeature_id_list() {
      return this.feature_id_list;
    }

    public get_feature_dna_args setFeature_id_list(List<String> feature_id_list) {
      this.feature_id_list = feature_id_list;
      return this;
    }

    public void unsetFeature_id_list() {
      this.feature_id_list = null;
    }

    /** Returns true if field feature_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature_id_list() {
      return this.feature_id_list != null;
    }

    public void setFeature_id_listIsSet(boolean value) {
      if (!value) {
        this.feature_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case FEATURE_ID_LIST:
        if (value == null) {
          unsetFeature_id_list();
        } else {
          setFeature_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case FEATURE_ID_LIST:
        return getFeature_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case FEATURE_ID_LIST:
        return isSetFeature_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_dna_args)
        return this.equals((get_feature_dna_args)that);
      return false;
    }

    public boolean equals(get_feature_dna_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_feature_id_list = true && this.isSetFeature_id_list();
      boolean that_present_feature_id_list = true && that.isSetFeature_id_list();
      if (this_present_feature_id_list || that_present_feature_id_list) {
        if (!(this_present_feature_id_list && that_present_feature_id_list))
          return false;
        if (!this.feature_id_list.equals(that.feature_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_feature_id_list = true && (isSetFeature_id_list());
      list.add(present_feature_id_list);
      if (present_feature_id_list)
        list.add(feature_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_dna_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeature_id_list()).compareTo(other.isSetFeature_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_id_list, other.feature_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_dna_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature_id_list:");
      if (this.feature_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_dna_argsStandardSchemeFactory implements SchemeFactory {
      public get_feature_dna_argsStandardScheme getScheme() {
        return new get_feature_dna_argsStandardScheme();
      }
    }

    private static class get_feature_dna_argsStandardScheme extends StandardScheme<get_feature_dna_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_dna_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list340 = iprot.readListBegin();
                  struct.feature_id_list = new ArrayList<String>(_list340.size);
                  String _elem341;
                  for (int _i342 = 0; _i342 < _list340.size; ++_i342)
                  {
                    _elem341 = iprot.readString();
                    struct.feature_id_list.add(_elem341);
                  }
                  iprot.readListEnd();
                }
                struct.setFeature_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_dna_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.feature_id_list != null) {
          oprot.writeFieldBegin(FEATURE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_id_list.size()));
            for (String _iter343 : struct.feature_id_list)
            {
              oprot.writeString(_iter343);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_dna_argsTupleSchemeFactory implements SchemeFactory {
      public get_feature_dna_argsTupleScheme getScheme() {
        return new get_feature_dna_argsTupleScheme();
      }
    }

    private static class get_feature_dna_argsTupleScheme extends TupleScheme<get_feature_dna_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_dna_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetFeature_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeature_id_list()) {
          {
            oprot.writeI32(struct.feature_id_list.size());
            for (String _iter344 : struct.feature_id_list)
            {
              oprot.writeString(_iter344);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_dna_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list345 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.feature_id_list = new ArrayList<String>(_list345.size);
            String _elem346;
            for (int _i347 = 0; _i347 < _list345.size; ++_i347)
            {
              _elem346 = iprot.readString();
              struct.feature_id_list.add(_elem346);
            }
          }
          struct.setFeature_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_feature_dna_result implements org.apache.thrift.TBase<get_feature_dna_result, get_feature_dna_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_dna_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_dna_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_dna_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_dna_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_dna_result.class, metaDataMap);
    }

    public get_feature_dna_result() {
    }

    public get_feature_dna_result(
      Map<String,String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_dna_result(get_feature_dna_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new TreeMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_feature_dna_result deepCopy() {
      return new get_feature_dna_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new TreeMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public get_feature_dna_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_feature_dna_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_feature_dna_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_feature_dna_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_feature_dna_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_feature_dna_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_feature_dna_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_dna_result)
        return this.equals((get_feature_dna_result)that);
      return false;
    }

    public boolean equals(get_feature_dna_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_dna_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_dna_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_dna_resultStandardSchemeFactory implements SchemeFactory {
      public get_feature_dna_resultStandardScheme getScheme() {
        return new get_feature_dna_resultStandardScheme();
      }
    }

    private static class get_feature_dna_resultStandardScheme extends StandardScheme<get_feature_dna_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_dna_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map348 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,String>();
                  String _key349;
                  String _val350;
                  for (int _i351 = 0; _i351 < _map348.size; ++_i351)
                  {
                    _key349 = iprot.readString();
                    _val350 = iprot.readString();
                    struct.success.put(_key349, _val350);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_dna_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter352 : struct.success.entrySet())
            {
              oprot.writeString(_iter352.getKey());
              oprot.writeString(_iter352.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_dna_resultTupleSchemeFactory implements SchemeFactory {
      public get_feature_dna_resultTupleScheme getScheme() {
        return new get_feature_dna_resultTupleScheme();
      }
    }

    private static class get_feature_dna_resultTupleScheme extends TupleScheme<get_feature_dna_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_dna_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter353 : struct.success.entrySet())
            {
              oprot.writeString(_iter353.getKey());
              oprot.writeString(_iter353.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_dna_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map354 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new TreeMap<String,String>();
            String _key355;
            String _val356;
            for (int _i357 = 0; _i357 < _map354.size; ++_i357)
            {
              _key355 = iprot.readString();
              _val356 = iprot.readString();
              struct.success.put(_key355, _val356);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_feature_functions_args implements org.apache.thrift.TBase<get_feature_functions_args, get_feature_functions_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_functions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_functions_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_functions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_functions_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> feature_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      FEATURE_ID_LIST((short)3, "feature_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // FEATURE_ID_LIST
            return FEATURE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.FEATURE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("feature_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_functions_args.class, metaDataMap);
    }

    public get_feature_functions_args() {
    }

    public get_feature_functions_args(
      String token,
      String ref,
      List<String> feature_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.feature_id_list = feature_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_functions_args(get_feature_functions_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetFeature_id_list()) {
        List<String> __this__feature_id_list = new ArrayList<String>(other.feature_id_list);
        this.feature_id_list = __this__feature_id_list;
      }
    }

    public get_feature_functions_args deepCopy() {
      return new get_feature_functions_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.feature_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_feature_functions_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_feature_functions_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getFeature_id_listSize() {
      return (this.feature_id_list == null) ? 0 : this.feature_id_list.size();
    }

    public java.util.Iterator<String> getFeature_id_listIterator() {
      return (this.feature_id_list == null) ? null : this.feature_id_list.iterator();
    }

    public void addToFeature_id_list(String elem) {
      if (this.feature_id_list == null) {
        this.feature_id_list = new ArrayList<String>();
      }
      this.feature_id_list.add(elem);
    }

    public List<String> getFeature_id_list() {
      return this.feature_id_list;
    }

    public get_feature_functions_args setFeature_id_list(List<String> feature_id_list) {
      this.feature_id_list = feature_id_list;
      return this;
    }

    public void unsetFeature_id_list() {
      this.feature_id_list = null;
    }

    /** Returns true if field feature_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature_id_list() {
      return this.feature_id_list != null;
    }

    public void setFeature_id_listIsSet(boolean value) {
      if (!value) {
        this.feature_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case FEATURE_ID_LIST:
        if (value == null) {
          unsetFeature_id_list();
        } else {
          setFeature_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case FEATURE_ID_LIST:
        return getFeature_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case FEATURE_ID_LIST:
        return isSetFeature_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_functions_args)
        return this.equals((get_feature_functions_args)that);
      return false;
    }

    public boolean equals(get_feature_functions_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_feature_id_list = true && this.isSetFeature_id_list();
      boolean that_present_feature_id_list = true && that.isSetFeature_id_list();
      if (this_present_feature_id_list || that_present_feature_id_list) {
        if (!(this_present_feature_id_list && that_present_feature_id_list))
          return false;
        if (!this.feature_id_list.equals(that.feature_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_feature_id_list = true && (isSetFeature_id_list());
      list.add(present_feature_id_list);
      if (present_feature_id_list)
        list.add(feature_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_functions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeature_id_list()).compareTo(other.isSetFeature_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_id_list, other.feature_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_functions_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature_id_list:");
      if (this.feature_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_functions_argsStandardSchemeFactory implements SchemeFactory {
      public get_feature_functions_argsStandardScheme getScheme() {
        return new get_feature_functions_argsStandardScheme();
      }
    }

    private static class get_feature_functions_argsStandardScheme extends StandardScheme<get_feature_functions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_functions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list358 = iprot.readListBegin();
                  struct.feature_id_list = new ArrayList<String>(_list358.size);
                  String _elem359;
                  for (int _i360 = 0; _i360 < _list358.size; ++_i360)
                  {
                    _elem359 = iprot.readString();
                    struct.feature_id_list.add(_elem359);
                  }
                  iprot.readListEnd();
                }
                struct.setFeature_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_functions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.feature_id_list != null) {
          oprot.writeFieldBegin(FEATURE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_id_list.size()));
            for (String _iter361 : struct.feature_id_list)
            {
              oprot.writeString(_iter361);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_functions_argsTupleSchemeFactory implements SchemeFactory {
      public get_feature_functions_argsTupleScheme getScheme() {
        return new get_feature_functions_argsTupleScheme();
      }
    }

    private static class get_feature_functions_argsTupleScheme extends TupleScheme<get_feature_functions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_functions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetFeature_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeature_id_list()) {
          {
            oprot.writeI32(struct.feature_id_list.size());
            for (String _iter362 : struct.feature_id_list)
            {
              oprot.writeString(_iter362);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_functions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list363 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.feature_id_list = new ArrayList<String>(_list363.size);
            String _elem364;
            for (int _i365 = 0; _i365 < _list363.size; ++_i365)
            {
              _elem364 = iprot.readString();
              struct.feature_id_list.add(_elem364);
            }
          }
          struct.setFeature_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_feature_functions_result implements org.apache.thrift.TBase<get_feature_functions_result, get_feature_functions_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_functions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_functions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_functions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_functions_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_functions_result.class, metaDataMap);
    }

    public get_feature_functions_result() {
    }

    public get_feature_functions_result(
      Map<String,String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_functions_result(get_feature_functions_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new TreeMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_feature_functions_result deepCopy() {
      return new get_feature_functions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new TreeMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public get_feature_functions_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_feature_functions_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_feature_functions_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_feature_functions_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_feature_functions_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_feature_functions_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_feature_functions_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_functions_result)
        return this.equals((get_feature_functions_result)that);
      return false;
    }

    public boolean equals(get_feature_functions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_functions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_functions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_functions_resultStandardSchemeFactory implements SchemeFactory {
      public get_feature_functions_resultStandardScheme getScheme() {
        return new get_feature_functions_resultStandardScheme();
      }
    }

    private static class get_feature_functions_resultStandardScheme extends StandardScheme<get_feature_functions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_functions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map366 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,String>();
                  String _key367;
                  String _val368;
                  for (int _i369 = 0; _i369 < _map366.size; ++_i369)
                  {
                    _key367 = iprot.readString();
                    _val368 = iprot.readString();
                    struct.success.put(_key367, _val368);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_functions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter370 : struct.success.entrySet())
            {
              oprot.writeString(_iter370.getKey());
              oprot.writeString(_iter370.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_functions_resultTupleSchemeFactory implements SchemeFactory {
      public get_feature_functions_resultTupleScheme getScheme() {
        return new get_feature_functions_resultTupleScheme();
      }
    }

    private static class get_feature_functions_resultTupleScheme extends TupleScheme<get_feature_functions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_functions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter371 : struct.success.entrySet())
            {
              oprot.writeString(_iter371.getKey());
              oprot.writeString(_iter371.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_functions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map372 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new TreeMap<String,String>();
            String _key373;
            String _val374;
            for (int _i375 = 0; _i375 < _map372.size; ++_i375)
            {
              _key373 = iprot.readString();
              _val374 = iprot.readString();
              struct.success.put(_key373, _val374);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_feature_aliases_args implements org.apache.thrift.TBase<get_feature_aliases_args, get_feature_aliases_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_aliases_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_aliases_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_aliases_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_aliases_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> feature_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      FEATURE_ID_LIST((short)3, "feature_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // FEATURE_ID_LIST
            return FEATURE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.FEATURE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("feature_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_aliases_args.class, metaDataMap);
    }

    public get_feature_aliases_args() {
    }

    public get_feature_aliases_args(
      String token,
      String ref,
      List<String> feature_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.feature_id_list = feature_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_aliases_args(get_feature_aliases_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetFeature_id_list()) {
        List<String> __this__feature_id_list = new ArrayList<String>(other.feature_id_list);
        this.feature_id_list = __this__feature_id_list;
      }
    }

    public get_feature_aliases_args deepCopy() {
      return new get_feature_aliases_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.feature_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_feature_aliases_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_feature_aliases_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getFeature_id_listSize() {
      return (this.feature_id_list == null) ? 0 : this.feature_id_list.size();
    }

    public java.util.Iterator<String> getFeature_id_listIterator() {
      return (this.feature_id_list == null) ? null : this.feature_id_list.iterator();
    }

    public void addToFeature_id_list(String elem) {
      if (this.feature_id_list == null) {
        this.feature_id_list = new ArrayList<String>();
      }
      this.feature_id_list.add(elem);
    }

    public List<String> getFeature_id_list() {
      return this.feature_id_list;
    }

    public get_feature_aliases_args setFeature_id_list(List<String> feature_id_list) {
      this.feature_id_list = feature_id_list;
      return this;
    }

    public void unsetFeature_id_list() {
      this.feature_id_list = null;
    }

    /** Returns true if field feature_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature_id_list() {
      return this.feature_id_list != null;
    }

    public void setFeature_id_listIsSet(boolean value) {
      if (!value) {
        this.feature_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case FEATURE_ID_LIST:
        if (value == null) {
          unsetFeature_id_list();
        } else {
          setFeature_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case FEATURE_ID_LIST:
        return getFeature_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case FEATURE_ID_LIST:
        return isSetFeature_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_aliases_args)
        return this.equals((get_feature_aliases_args)that);
      return false;
    }

    public boolean equals(get_feature_aliases_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_feature_id_list = true && this.isSetFeature_id_list();
      boolean that_present_feature_id_list = true && that.isSetFeature_id_list();
      if (this_present_feature_id_list || that_present_feature_id_list) {
        if (!(this_present_feature_id_list && that_present_feature_id_list))
          return false;
        if (!this.feature_id_list.equals(that.feature_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_feature_id_list = true && (isSetFeature_id_list());
      list.add(present_feature_id_list);
      if (present_feature_id_list)
        list.add(feature_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_aliases_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeature_id_list()).compareTo(other.isSetFeature_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_id_list, other.feature_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_aliases_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature_id_list:");
      if (this.feature_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_aliases_argsStandardSchemeFactory implements SchemeFactory {
      public get_feature_aliases_argsStandardScheme getScheme() {
        return new get_feature_aliases_argsStandardScheme();
      }
    }

    private static class get_feature_aliases_argsStandardScheme extends StandardScheme<get_feature_aliases_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_aliases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list376 = iprot.readListBegin();
                  struct.feature_id_list = new ArrayList<String>(_list376.size);
                  String _elem377;
                  for (int _i378 = 0; _i378 < _list376.size; ++_i378)
                  {
                    _elem377 = iprot.readString();
                    struct.feature_id_list.add(_elem377);
                  }
                  iprot.readListEnd();
                }
                struct.setFeature_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_aliases_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.feature_id_list != null) {
          oprot.writeFieldBegin(FEATURE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature_id_list.size()));
            for (String _iter379 : struct.feature_id_list)
            {
              oprot.writeString(_iter379);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_aliases_argsTupleSchemeFactory implements SchemeFactory {
      public get_feature_aliases_argsTupleScheme getScheme() {
        return new get_feature_aliases_argsTupleScheme();
      }
    }

    private static class get_feature_aliases_argsTupleScheme extends TupleScheme<get_feature_aliases_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_aliases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetFeature_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeature_id_list()) {
          {
            oprot.writeI32(struct.feature_id_list.size());
            for (String _iter380 : struct.feature_id_list)
            {
              oprot.writeString(_iter380);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_aliases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list381 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.feature_id_list = new ArrayList<String>(_list381.size);
            String _elem382;
            for (int _i383 = 0; _i383 < _list381.size; ++_i383)
            {
              _elem382 = iprot.readString();
              struct.feature_id_list.add(_elem382);
            }
          }
          struct.setFeature_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_feature_aliases_result implements org.apache.thrift.TBase<get_feature_aliases_result, get_feature_aliases_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_feature_aliases_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_feature_aliases_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_feature_aliases_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_feature_aliases_resultTupleSchemeFactory());
    }

    public Map<String,List<String>> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_feature_aliases_result.class, metaDataMap);
    }

    public get_feature_aliases_result() {
    }

    public get_feature_aliases_result(
      Map<String,List<String>> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_feature_aliases_result(get_feature_aliases_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<String>> __this__success = new TreeMap<String,List<String>>();
        for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<String> __this__success_copy_value = new ArrayList<String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_feature_aliases_result deepCopy() {
      return new get_feature_aliases_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<String> val) {
      if (this.success == null) {
        this.success = new TreeMap<String,List<String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<String>> getSuccess() {
      return this.success;
    }

    public get_feature_aliases_result setSuccess(Map<String,List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_feature_aliases_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_feature_aliases_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_feature_aliases_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_feature_aliases_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_feature_aliases_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_feature_aliases_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<String>>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_feature_aliases_result)
        return this.equals((get_feature_aliases_result)that);
      return false;
    }

    public boolean equals(get_feature_aliases_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_feature_aliases_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_feature_aliases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_feature_aliases_resultStandardSchemeFactory implements SchemeFactory {
      public get_feature_aliases_resultStandardScheme getScheme() {
        return new get_feature_aliases_resultStandardScheme();
      }
    }

    private static class get_feature_aliases_resultStandardScheme extends StandardScheme<get_feature_aliases_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_feature_aliases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map384 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,List<String>>();
                  String _key385;
                  List<String> _val386;
                  for (int _i387 = 0; _i387 < _map384.size; ++_i387)
                  {
                    _key385 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list388 = iprot.readListBegin();
                      _val386 = new ArrayList<String>(_list388.size);
                      String _elem389;
                      for (int _i390 = 0; _i390 < _list388.size; ++_i390)
                      {
                        _elem389 = iprot.readString();
                        _val386.add(_elem389);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key385, _val386);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_feature_aliases_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<String>> _iter391 : struct.success.entrySet())
            {
              oprot.writeString(_iter391.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter391.getValue().size()));
                for (String _iter392 : _iter391.getValue())
                {
                  oprot.writeString(_iter392);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_feature_aliases_resultTupleSchemeFactory implements SchemeFactory {
      public get_feature_aliases_resultTupleScheme getScheme() {
        return new get_feature_aliases_resultTupleScheme();
      }
    }

    private static class get_feature_aliases_resultTupleScheme extends TupleScheme<get_feature_aliases_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_feature_aliases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<String>> _iter393 : struct.success.entrySet())
            {
              oprot.writeString(_iter393.getKey());
              {
                oprot.writeI32(_iter393.getValue().size());
                for (String _iter394 : _iter393.getValue())
                {
                  oprot.writeString(_iter394);
                }
              }
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_feature_aliases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map395 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new TreeMap<String,List<String>>();
            String _key396;
            List<String> _val397;
            for (int _i398 = 0; _i398 < _map395.size; ++_i398)
            {
              _key396 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list399 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val397 = new ArrayList<String>(_list399.size);
                String _elem400;
                for (int _i401 = 0; _i401 < _list399.size; ++_i401)
                {
                  _elem400 = iprot.readString();
                  _val397.add(_elem400);
                }
              }
              struct.success.put(_key396, _val397);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_cds_by_gene_args implements org.apache.thrift.TBase<get_cds_by_gene_args, get_cds_by_gene_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_cds_by_gene_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cds_by_gene_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GENE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("gene_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_cds_by_gene_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_cds_by_gene_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> gene_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      GENE_ID_LIST((short)3, "gene_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // GENE_ID_LIST
            return GENE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.GENE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("gene_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cds_by_gene_args.class, metaDataMap);
    }

    public get_cds_by_gene_args() {
    }

    public get_cds_by_gene_args(
      String token,
      String ref,
      List<String> gene_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.gene_id_list = gene_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cds_by_gene_args(get_cds_by_gene_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetGene_id_list()) {
        List<String> __this__gene_id_list = new ArrayList<String>(other.gene_id_list);
        this.gene_id_list = __this__gene_id_list;
      }
    }

    public get_cds_by_gene_args deepCopy() {
      return new get_cds_by_gene_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.gene_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_cds_by_gene_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_cds_by_gene_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getGene_id_listSize() {
      return (this.gene_id_list == null) ? 0 : this.gene_id_list.size();
    }

    public java.util.Iterator<String> getGene_id_listIterator() {
      return (this.gene_id_list == null) ? null : this.gene_id_list.iterator();
    }

    public void addToGene_id_list(String elem) {
      if (this.gene_id_list == null) {
        this.gene_id_list = new ArrayList<String>();
      }
      this.gene_id_list.add(elem);
    }

    public List<String> getGene_id_list() {
      return this.gene_id_list;
    }

    public get_cds_by_gene_args setGene_id_list(List<String> gene_id_list) {
      this.gene_id_list = gene_id_list;
      return this;
    }

    public void unsetGene_id_list() {
      this.gene_id_list = null;
    }

    /** Returns true if field gene_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetGene_id_list() {
      return this.gene_id_list != null;
    }

    public void setGene_id_listIsSet(boolean value) {
      if (!value) {
        this.gene_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case GENE_ID_LIST:
        if (value == null) {
          unsetGene_id_list();
        } else {
          setGene_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case GENE_ID_LIST:
        return getGene_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case GENE_ID_LIST:
        return isSetGene_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cds_by_gene_args)
        return this.equals((get_cds_by_gene_args)that);
      return false;
    }

    public boolean equals(get_cds_by_gene_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_gene_id_list = true && this.isSetGene_id_list();
      boolean that_present_gene_id_list = true && that.isSetGene_id_list();
      if (this_present_gene_id_list || that_present_gene_id_list) {
        if (!(this_present_gene_id_list && that_present_gene_id_list))
          return false;
        if (!this.gene_id_list.equals(that.gene_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_gene_id_list = true && (isSetGene_id_list());
      list.add(present_gene_id_list);
      if (present_gene_id_list)
        list.add(gene_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_cds_by_gene_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGene_id_list()).compareTo(other.isSetGene_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGene_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gene_id_list, other.gene_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cds_by_gene_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gene_id_list:");
      if (this.gene_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.gene_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_cds_by_gene_argsStandardSchemeFactory implements SchemeFactory {
      public get_cds_by_gene_argsStandardScheme getScheme() {
        return new get_cds_by_gene_argsStandardScheme();
      }
    }

    private static class get_cds_by_gene_argsStandardScheme extends StandardScheme<get_cds_by_gene_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_cds_by_gene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GENE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list402 = iprot.readListBegin();
                  struct.gene_id_list = new ArrayList<String>(_list402.size);
                  String _elem403;
                  for (int _i404 = 0; _i404 < _list402.size; ++_i404)
                  {
                    _elem403 = iprot.readString();
                    struct.gene_id_list.add(_elem403);
                  }
                  iprot.readListEnd();
                }
                struct.setGene_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_cds_by_gene_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.gene_id_list != null) {
          oprot.writeFieldBegin(GENE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.gene_id_list.size()));
            for (String _iter405 : struct.gene_id_list)
            {
              oprot.writeString(_iter405);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_cds_by_gene_argsTupleSchemeFactory implements SchemeFactory {
      public get_cds_by_gene_argsTupleScheme getScheme() {
        return new get_cds_by_gene_argsTupleScheme();
      }
    }

    private static class get_cds_by_gene_argsTupleScheme extends TupleScheme<get_cds_by_gene_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_cds_by_gene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetGene_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGene_id_list()) {
          {
            oprot.writeI32(struct.gene_id_list.size());
            for (String _iter406 : struct.gene_id_list)
            {
              oprot.writeString(_iter406);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_cds_by_gene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list407 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.gene_id_list = new ArrayList<String>(_list407.size);
            String _elem408;
            for (int _i409 = 0; _i409 < _list407.size; ++_i409)
            {
              _elem408 = iprot.readString();
              struct.gene_id_list.add(_elem408);
            }
          }
          struct.setGene_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_cds_by_gene_result implements org.apache.thrift.TBase<get_cds_by_gene_result, get_cds_by_gene_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_cds_by_gene_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cds_by_gene_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_cds_by_gene_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_cds_by_gene_resultTupleSchemeFactory());
    }

    public Map<String,List<String>> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cds_by_gene_result.class, metaDataMap);
    }

    public get_cds_by_gene_result() {
    }

    public get_cds_by_gene_result(
      Map<String,List<String>> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cds_by_gene_result(get_cds_by_gene_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<String>> __this__success = new TreeMap<String,List<String>>();
        for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<String> __this__success_copy_value = new ArrayList<String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_cds_by_gene_result deepCopy() {
      return new get_cds_by_gene_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<String> val) {
      if (this.success == null) {
        this.success = new TreeMap<String,List<String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<String>> getSuccess() {
      return this.success;
    }

    public get_cds_by_gene_result setSuccess(Map<String,List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_cds_by_gene_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_cds_by_gene_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_cds_by_gene_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_cds_by_gene_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_cds_by_gene_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_cds_by_gene_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<String>>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cds_by_gene_result)
        return this.equals((get_cds_by_gene_result)that);
      return false;
    }

    public boolean equals(get_cds_by_gene_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_cds_by_gene_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cds_by_gene_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_cds_by_gene_resultStandardSchemeFactory implements SchemeFactory {
      public get_cds_by_gene_resultStandardScheme getScheme() {
        return new get_cds_by_gene_resultStandardScheme();
      }
    }

    private static class get_cds_by_gene_resultStandardScheme extends StandardScheme<get_cds_by_gene_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_cds_by_gene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map410 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,List<String>>();
                  String _key411;
                  List<String> _val412;
                  for (int _i413 = 0; _i413 < _map410.size; ++_i413)
                  {
                    _key411 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list414 = iprot.readListBegin();
                      _val412 = new ArrayList<String>(_list414.size);
                      String _elem415;
                      for (int _i416 = 0; _i416 < _list414.size; ++_i416)
                      {
                        _elem415 = iprot.readString();
                        _val412.add(_elem415);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key411, _val412);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_cds_by_gene_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<String>> _iter417 : struct.success.entrySet())
            {
              oprot.writeString(_iter417.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter417.getValue().size()));
                for (String _iter418 : _iter417.getValue())
                {
                  oprot.writeString(_iter418);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_cds_by_gene_resultTupleSchemeFactory implements SchemeFactory {
      public get_cds_by_gene_resultTupleScheme getScheme() {
        return new get_cds_by_gene_resultTupleScheme();
      }
    }

    private static class get_cds_by_gene_resultTupleScheme extends TupleScheme<get_cds_by_gene_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_cds_by_gene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<String>> _iter419 : struct.success.entrySet())
            {
              oprot.writeString(_iter419.getKey());
              {
                oprot.writeI32(_iter419.getValue().size());
                for (String _iter420 : _iter419.getValue())
                {
                  oprot.writeString(_iter420);
                }
              }
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_cds_by_gene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map421 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new TreeMap<String,List<String>>();
            String _key422;
            List<String> _val423;
            for (int _i424 = 0; _i424 < _map421.size; ++_i424)
            {
              _key422 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list425 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val423 = new ArrayList<String>(_list425.size);
                String _elem426;
                for (int _i427 = 0; _i427 < _list425.size; ++_i427)
                {
                  _elem426 = iprot.readString();
                  _val423.add(_elem426);
                }
              }
              struct.success.put(_key422, _val423);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_cds_by_mrna_args implements org.apache.thrift.TBase<get_cds_by_mrna_args, get_cds_by_mrna_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_cds_by_mrna_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cds_by_mrna_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MRNA_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mrna_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_cds_by_mrna_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_cds_by_mrna_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> mrna_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      MRNA_ID_LIST((short)3, "mrna_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // MRNA_ID_LIST
            return MRNA_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.MRNA_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("mrna_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cds_by_mrna_args.class, metaDataMap);
    }

    public get_cds_by_mrna_args() {
    }

    public get_cds_by_mrna_args(
      String token,
      String ref,
      List<String> mrna_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.mrna_id_list = mrna_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cds_by_mrna_args(get_cds_by_mrna_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetMrna_id_list()) {
        List<String> __this__mrna_id_list = new ArrayList<String>(other.mrna_id_list);
        this.mrna_id_list = __this__mrna_id_list;
      }
    }

    public get_cds_by_mrna_args deepCopy() {
      return new get_cds_by_mrna_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.mrna_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_cds_by_mrna_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_cds_by_mrna_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getMrna_id_listSize() {
      return (this.mrna_id_list == null) ? 0 : this.mrna_id_list.size();
    }

    public java.util.Iterator<String> getMrna_id_listIterator() {
      return (this.mrna_id_list == null) ? null : this.mrna_id_list.iterator();
    }

    public void addToMrna_id_list(String elem) {
      if (this.mrna_id_list == null) {
        this.mrna_id_list = new ArrayList<String>();
      }
      this.mrna_id_list.add(elem);
    }

    public List<String> getMrna_id_list() {
      return this.mrna_id_list;
    }

    public get_cds_by_mrna_args setMrna_id_list(List<String> mrna_id_list) {
      this.mrna_id_list = mrna_id_list;
      return this;
    }

    public void unsetMrna_id_list() {
      this.mrna_id_list = null;
    }

    /** Returns true if field mrna_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetMrna_id_list() {
      return this.mrna_id_list != null;
    }

    public void setMrna_id_listIsSet(boolean value) {
      if (!value) {
        this.mrna_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case MRNA_ID_LIST:
        if (value == null) {
          unsetMrna_id_list();
        } else {
          setMrna_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case MRNA_ID_LIST:
        return getMrna_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case MRNA_ID_LIST:
        return isSetMrna_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cds_by_mrna_args)
        return this.equals((get_cds_by_mrna_args)that);
      return false;
    }

    public boolean equals(get_cds_by_mrna_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_mrna_id_list = true && this.isSetMrna_id_list();
      boolean that_present_mrna_id_list = true && that.isSetMrna_id_list();
      if (this_present_mrna_id_list || that_present_mrna_id_list) {
        if (!(this_present_mrna_id_list && that_present_mrna_id_list))
          return false;
        if (!this.mrna_id_list.equals(that.mrna_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_mrna_id_list = true && (isSetMrna_id_list());
      list.add(present_mrna_id_list);
      if (present_mrna_id_list)
        list.add(mrna_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_cds_by_mrna_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMrna_id_list()).compareTo(other.isSetMrna_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMrna_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mrna_id_list, other.mrna_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cds_by_mrna_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mrna_id_list:");
      if (this.mrna_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.mrna_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_cds_by_mrna_argsStandardSchemeFactory implements SchemeFactory {
      public get_cds_by_mrna_argsStandardScheme getScheme() {
        return new get_cds_by_mrna_argsStandardScheme();
      }
    }

    private static class get_cds_by_mrna_argsStandardScheme extends StandardScheme<get_cds_by_mrna_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_cds_by_mrna_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MRNA_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list428 = iprot.readListBegin();
                  struct.mrna_id_list = new ArrayList<String>(_list428.size);
                  String _elem429;
                  for (int _i430 = 0; _i430 < _list428.size; ++_i430)
                  {
                    _elem429 = iprot.readString();
                    struct.mrna_id_list.add(_elem429);
                  }
                  iprot.readListEnd();
                }
                struct.setMrna_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_cds_by_mrna_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.mrna_id_list != null) {
          oprot.writeFieldBegin(MRNA_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mrna_id_list.size()));
            for (String _iter431 : struct.mrna_id_list)
            {
              oprot.writeString(_iter431);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_cds_by_mrna_argsTupleSchemeFactory implements SchemeFactory {
      public get_cds_by_mrna_argsTupleScheme getScheme() {
        return new get_cds_by_mrna_argsTupleScheme();
      }
    }

    private static class get_cds_by_mrna_argsTupleScheme extends TupleScheme<get_cds_by_mrna_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_cds_by_mrna_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetMrna_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMrna_id_list()) {
          {
            oprot.writeI32(struct.mrna_id_list.size());
            for (String _iter432 : struct.mrna_id_list)
            {
              oprot.writeString(_iter432);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_cds_by_mrna_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list433 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mrna_id_list = new ArrayList<String>(_list433.size);
            String _elem434;
            for (int _i435 = 0; _i435 < _list433.size; ++_i435)
            {
              _elem434 = iprot.readString();
              struct.mrna_id_list.add(_elem434);
            }
          }
          struct.setMrna_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_cds_by_mrna_result implements org.apache.thrift.TBase<get_cds_by_mrna_result, get_cds_by_mrna_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_cds_by_mrna_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cds_by_mrna_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_cds_by_mrna_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_cds_by_mrna_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cds_by_mrna_result.class, metaDataMap);
    }

    public get_cds_by_mrna_result() {
    }

    public get_cds_by_mrna_result(
      Map<String,String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cds_by_mrna_result(get_cds_by_mrna_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new TreeMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_cds_by_mrna_result deepCopy() {
      return new get_cds_by_mrna_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new TreeMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public get_cds_by_mrna_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_cds_by_mrna_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_cds_by_mrna_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_cds_by_mrna_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_cds_by_mrna_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_cds_by_mrna_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_cds_by_mrna_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cds_by_mrna_result)
        return this.equals((get_cds_by_mrna_result)that);
      return false;
    }

    public boolean equals(get_cds_by_mrna_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_cds_by_mrna_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cds_by_mrna_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_cds_by_mrna_resultStandardSchemeFactory implements SchemeFactory {
      public get_cds_by_mrna_resultStandardScheme getScheme() {
        return new get_cds_by_mrna_resultStandardScheme();
      }
    }

    private static class get_cds_by_mrna_resultStandardScheme extends StandardScheme<get_cds_by_mrna_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_cds_by_mrna_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map436 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,String>();
                  String _key437;
                  String _val438;
                  for (int _i439 = 0; _i439 < _map436.size; ++_i439)
                  {
                    _key437 = iprot.readString();
                    _val438 = iprot.readString();
                    struct.success.put(_key437, _val438);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_cds_by_mrna_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter440 : struct.success.entrySet())
            {
              oprot.writeString(_iter440.getKey());
              oprot.writeString(_iter440.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_cds_by_mrna_resultTupleSchemeFactory implements SchemeFactory {
      public get_cds_by_mrna_resultTupleScheme getScheme() {
        return new get_cds_by_mrna_resultTupleScheme();
      }
    }

    private static class get_cds_by_mrna_resultTupleScheme extends TupleScheme<get_cds_by_mrna_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_cds_by_mrna_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter441 : struct.success.entrySet())
            {
              oprot.writeString(_iter441.getKey());
              oprot.writeString(_iter441.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_cds_by_mrna_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map442 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new TreeMap<String,String>();
            String _key443;
            String _val444;
            for (int _i445 = 0; _i445 < _map442.size; ++_i445)
            {
              _key443 = iprot.readString();
              _val444 = iprot.readString();
              struct.success.put(_key443, _val444);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_gene_by_cds_args implements org.apache.thrift.TBase<get_gene_by_cds_args, get_gene_by_cds_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_gene_by_cds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_gene_by_cds_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CDS_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("cds_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_gene_by_cds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_gene_by_cds_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> cds_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      CDS_ID_LIST((short)3, "cds_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // CDS_ID_LIST
            return CDS_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.CDS_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("cds_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_gene_by_cds_args.class, metaDataMap);
    }

    public get_gene_by_cds_args() {
    }

    public get_gene_by_cds_args(
      String token,
      String ref,
      List<String> cds_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.cds_id_list = cds_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_gene_by_cds_args(get_gene_by_cds_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetCds_id_list()) {
        List<String> __this__cds_id_list = new ArrayList<String>(other.cds_id_list);
        this.cds_id_list = __this__cds_id_list;
      }
    }

    public get_gene_by_cds_args deepCopy() {
      return new get_gene_by_cds_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.cds_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_gene_by_cds_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_gene_by_cds_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getCds_id_listSize() {
      return (this.cds_id_list == null) ? 0 : this.cds_id_list.size();
    }

    public java.util.Iterator<String> getCds_id_listIterator() {
      return (this.cds_id_list == null) ? null : this.cds_id_list.iterator();
    }

    public void addToCds_id_list(String elem) {
      if (this.cds_id_list == null) {
        this.cds_id_list = new ArrayList<String>();
      }
      this.cds_id_list.add(elem);
    }

    public List<String> getCds_id_list() {
      return this.cds_id_list;
    }

    public get_gene_by_cds_args setCds_id_list(List<String> cds_id_list) {
      this.cds_id_list = cds_id_list;
      return this;
    }

    public void unsetCds_id_list() {
      this.cds_id_list = null;
    }

    /** Returns true if field cds_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetCds_id_list() {
      return this.cds_id_list != null;
    }

    public void setCds_id_listIsSet(boolean value) {
      if (!value) {
        this.cds_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case CDS_ID_LIST:
        if (value == null) {
          unsetCds_id_list();
        } else {
          setCds_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case CDS_ID_LIST:
        return getCds_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case CDS_ID_LIST:
        return isSetCds_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_gene_by_cds_args)
        return this.equals((get_gene_by_cds_args)that);
      return false;
    }

    public boolean equals(get_gene_by_cds_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_cds_id_list = true && this.isSetCds_id_list();
      boolean that_present_cds_id_list = true && that.isSetCds_id_list();
      if (this_present_cds_id_list || that_present_cds_id_list) {
        if (!(this_present_cds_id_list && that_present_cds_id_list))
          return false;
        if (!this.cds_id_list.equals(that.cds_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_cds_id_list = true && (isSetCds_id_list());
      list.add(present_cds_id_list);
      if (present_cds_id_list)
        list.add(cds_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_gene_by_cds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCds_id_list()).compareTo(other.isSetCds_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCds_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cds_id_list, other.cds_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_gene_by_cds_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cds_id_list:");
      if (this.cds_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.cds_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_gene_by_cds_argsStandardSchemeFactory implements SchemeFactory {
      public get_gene_by_cds_argsStandardScheme getScheme() {
        return new get_gene_by_cds_argsStandardScheme();
      }
    }

    private static class get_gene_by_cds_argsStandardScheme extends StandardScheme<get_gene_by_cds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_gene_by_cds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CDS_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list446 = iprot.readListBegin();
                  struct.cds_id_list = new ArrayList<String>(_list446.size);
                  String _elem447;
                  for (int _i448 = 0; _i448 < _list446.size; ++_i448)
                  {
                    _elem447 = iprot.readString();
                    struct.cds_id_list.add(_elem447);
                  }
                  iprot.readListEnd();
                }
                struct.setCds_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_gene_by_cds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.cds_id_list != null) {
          oprot.writeFieldBegin(CDS_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cds_id_list.size()));
            for (String _iter449 : struct.cds_id_list)
            {
              oprot.writeString(_iter449);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_gene_by_cds_argsTupleSchemeFactory implements SchemeFactory {
      public get_gene_by_cds_argsTupleScheme getScheme() {
        return new get_gene_by_cds_argsTupleScheme();
      }
    }

    private static class get_gene_by_cds_argsTupleScheme extends TupleScheme<get_gene_by_cds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_gene_by_cds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetCds_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCds_id_list()) {
          {
            oprot.writeI32(struct.cds_id_list.size());
            for (String _iter450 : struct.cds_id_list)
            {
              oprot.writeString(_iter450);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_gene_by_cds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list451 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.cds_id_list = new ArrayList<String>(_list451.size);
            String _elem452;
            for (int _i453 = 0; _i453 < _list451.size; ++_i453)
            {
              _elem452 = iprot.readString();
              struct.cds_id_list.add(_elem452);
            }
          }
          struct.setCds_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_gene_by_cds_result implements org.apache.thrift.TBase<get_gene_by_cds_result, get_gene_by_cds_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_gene_by_cds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_gene_by_cds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_gene_by_cds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_gene_by_cds_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_gene_by_cds_result.class, metaDataMap);
    }

    public get_gene_by_cds_result() {
    }

    public get_gene_by_cds_result(
      Map<String,String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_gene_by_cds_result(get_gene_by_cds_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new TreeMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_gene_by_cds_result deepCopy() {
      return new get_gene_by_cds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new TreeMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public get_gene_by_cds_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_gene_by_cds_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_gene_by_cds_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_gene_by_cds_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_gene_by_cds_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_gene_by_cds_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_gene_by_cds_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_gene_by_cds_result)
        return this.equals((get_gene_by_cds_result)that);
      return false;
    }

    public boolean equals(get_gene_by_cds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_gene_by_cds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_gene_by_cds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_gene_by_cds_resultStandardSchemeFactory implements SchemeFactory {
      public get_gene_by_cds_resultStandardScheme getScheme() {
        return new get_gene_by_cds_resultStandardScheme();
      }
    }

    private static class get_gene_by_cds_resultStandardScheme extends StandardScheme<get_gene_by_cds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_gene_by_cds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map454 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,String>();
                  String _key455;
                  String _val456;
                  for (int _i457 = 0; _i457 < _map454.size; ++_i457)
                  {
                    _key455 = iprot.readString();
                    _val456 = iprot.readString();
                    struct.success.put(_key455, _val456);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_gene_by_cds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter458 : struct.success.entrySet())
            {
              oprot.writeString(_iter458.getKey());
              oprot.writeString(_iter458.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_gene_by_cds_resultTupleSchemeFactory implements SchemeFactory {
      public get_gene_by_cds_resultTupleScheme getScheme() {
        return new get_gene_by_cds_resultTupleScheme();
      }
    }

    private static class get_gene_by_cds_resultTupleScheme extends TupleScheme<get_gene_by_cds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_gene_by_cds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter459 : struct.success.entrySet())
            {
              oprot.writeString(_iter459.getKey());
              oprot.writeString(_iter459.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_gene_by_cds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map460 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new TreeMap<String,String>();
            String _key461;
            String _val462;
            for (int _i463 = 0; _i463 < _map460.size; ++_i463)
            {
              _key461 = iprot.readString();
              _val462 = iprot.readString();
              struct.success.put(_key461, _val462);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_gene_by_mrna_args implements org.apache.thrift.TBase<get_gene_by_mrna_args, get_gene_by_mrna_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_gene_by_mrna_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_gene_by_mrna_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MRNA_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mrna_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_gene_by_mrna_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_gene_by_mrna_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> mrna_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      MRNA_ID_LIST((short)3, "mrna_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // MRNA_ID_LIST
            return MRNA_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.MRNA_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("mrna_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_gene_by_mrna_args.class, metaDataMap);
    }

    public get_gene_by_mrna_args() {
    }

    public get_gene_by_mrna_args(
      String token,
      String ref,
      List<String> mrna_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.mrna_id_list = mrna_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_gene_by_mrna_args(get_gene_by_mrna_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetMrna_id_list()) {
        List<String> __this__mrna_id_list = new ArrayList<String>(other.mrna_id_list);
        this.mrna_id_list = __this__mrna_id_list;
      }
    }

    public get_gene_by_mrna_args deepCopy() {
      return new get_gene_by_mrna_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.mrna_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_gene_by_mrna_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_gene_by_mrna_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getMrna_id_listSize() {
      return (this.mrna_id_list == null) ? 0 : this.mrna_id_list.size();
    }

    public java.util.Iterator<String> getMrna_id_listIterator() {
      return (this.mrna_id_list == null) ? null : this.mrna_id_list.iterator();
    }

    public void addToMrna_id_list(String elem) {
      if (this.mrna_id_list == null) {
        this.mrna_id_list = new ArrayList<String>();
      }
      this.mrna_id_list.add(elem);
    }

    public List<String> getMrna_id_list() {
      return this.mrna_id_list;
    }

    public get_gene_by_mrna_args setMrna_id_list(List<String> mrna_id_list) {
      this.mrna_id_list = mrna_id_list;
      return this;
    }

    public void unsetMrna_id_list() {
      this.mrna_id_list = null;
    }

    /** Returns true if field mrna_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetMrna_id_list() {
      return this.mrna_id_list != null;
    }

    public void setMrna_id_listIsSet(boolean value) {
      if (!value) {
        this.mrna_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case MRNA_ID_LIST:
        if (value == null) {
          unsetMrna_id_list();
        } else {
          setMrna_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case MRNA_ID_LIST:
        return getMrna_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case MRNA_ID_LIST:
        return isSetMrna_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_gene_by_mrna_args)
        return this.equals((get_gene_by_mrna_args)that);
      return false;
    }

    public boolean equals(get_gene_by_mrna_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_mrna_id_list = true && this.isSetMrna_id_list();
      boolean that_present_mrna_id_list = true && that.isSetMrna_id_list();
      if (this_present_mrna_id_list || that_present_mrna_id_list) {
        if (!(this_present_mrna_id_list && that_present_mrna_id_list))
          return false;
        if (!this.mrna_id_list.equals(that.mrna_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_mrna_id_list = true && (isSetMrna_id_list());
      list.add(present_mrna_id_list);
      if (present_mrna_id_list)
        list.add(mrna_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_gene_by_mrna_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMrna_id_list()).compareTo(other.isSetMrna_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMrna_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mrna_id_list, other.mrna_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_gene_by_mrna_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mrna_id_list:");
      if (this.mrna_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.mrna_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_gene_by_mrna_argsStandardSchemeFactory implements SchemeFactory {
      public get_gene_by_mrna_argsStandardScheme getScheme() {
        return new get_gene_by_mrna_argsStandardScheme();
      }
    }

    private static class get_gene_by_mrna_argsStandardScheme extends StandardScheme<get_gene_by_mrna_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_gene_by_mrna_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MRNA_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list464 = iprot.readListBegin();
                  struct.mrna_id_list = new ArrayList<String>(_list464.size);
                  String _elem465;
                  for (int _i466 = 0; _i466 < _list464.size; ++_i466)
                  {
                    _elem465 = iprot.readString();
                    struct.mrna_id_list.add(_elem465);
                  }
                  iprot.readListEnd();
                }
                struct.setMrna_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_gene_by_mrna_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.mrna_id_list != null) {
          oprot.writeFieldBegin(MRNA_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mrna_id_list.size()));
            for (String _iter467 : struct.mrna_id_list)
            {
              oprot.writeString(_iter467);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_gene_by_mrna_argsTupleSchemeFactory implements SchemeFactory {
      public get_gene_by_mrna_argsTupleScheme getScheme() {
        return new get_gene_by_mrna_argsTupleScheme();
      }
    }

    private static class get_gene_by_mrna_argsTupleScheme extends TupleScheme<get_gene_by_mrna_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_gene_by_mrna_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetMrna_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMrna_id_list()) {
          {
            oprot.writeI32(struct.mrna_id_list.size());
            for (String _iter468 : struct.mrna_id_list)
            {
              oprot.writeString(_iter468);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_gene_by_mrna_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list469 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mrna_id_list = new ArrayList<String>(_list469.size);
            String _elem470;
            for (int _i471 = 0; _i471 < _list469.size; ++_i471)
            {
              _elem470 = iprot.readString();
              struct.mrna_id_list.add(_elem470);
            }
          }
          struct.setMrna_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_gene_by_mrna_result implements org.apache.thrift.TBase<get_gene_by_mrna_result, get_gene_by_mrna_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_gene_by_mrna_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_gene_by_mrna_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_gene_by_mrna_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_gene_by_mrna_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_gene_by_mrna_result.class, metaDataMap);
    }

    public get_gene_by_mrna_result() {
    }

    public get_gene_by_mrna_result(
      Map<String,String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_gene_by_mrna_result(get_gene_by_mrna_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new TreeMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_gene_by_mrna_result deepCopy() {
      return new get_gene_by_mrna_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new TreeMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public get_gene_by_mrna_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_gene_by_mrna_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_gene_by_mrna_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_gene_by_mrna_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_gene_by_mrna_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_gene_by_mrna_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_gene_by_mrna_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_gene_by_mrna_result)
        return this.equals((get_gene_by_mrna_result)that);
      return false;
    }

    public boolean equals(get_gene_by_mrna_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_gene_by_mrna_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_gene_by_mrna_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_gene_by_mrna_resultStandardSchemeFactory implements SchemeFactory {
      public get_gene_by_mrna_resultStandardScheme getScheme() {
        return new get_gene_by_mrna_resultStandardScheme();
      }
    }

    private static class get_gene_by_mrna_resultStandardScheme extends StandardScheme<get_gene_by_mrna_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_gene_by_mrna_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map472 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,String>();
                  String _key473;
                  String _val474;
                  for (int _i475 = 0; _i475 < _map472.size; ++_i475)
                  {
                    _key473 = iprot.readString();
                    _val474 = iprot.readString();
                    struct.success.put(_key473, _val474);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_gene_by_mrna_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter476 : struct.success.entrySet())
            {
              oprot.writeString(_iter476.getKey());
              oprot.writeString(_iter476.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_gene_by_mrna_resultTupleSchemeFactory implements SchemeFactory {
      public get_gene_by_mrna_resultTupleScheme getScheme() {
        return new get_gene_by_mrna_resultTupleScheme();
      }
    }

    private static class get_gene_by_mrna_resultTupleScheme extends TupleScheme<get_gene_by_mrna_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_gene_by_mrna_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter477 : struct.success.entrySet())
            {
              oprot.writeString(_iter477.getKey());
              oprot.writeString(_iter477.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_gene_by_mrna_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map478 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new TreeMap<String,String>();
            String _key479;
            String _val480;
            for (int _i481 = 0; _i481 < _map478.size; ++_i481)
            {
              _key479 = iprot.readString();
              _val480 = iprot.readString();
              struct.success.put(_key479, _val480);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_mrna_by_cds_args implements org.apache.thrift.TBase<get_mrna_by_cds_args, get_mrna_by_cds_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_mrna_by_cds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_mrna_by_cds_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CDS_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("cds_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_mrna_by_cds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_mrna_by_cds_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> cds_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      CDS_ID_LIST((short)3, "cds_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // CDS_ID_LIST
            return CDS_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.CDS_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("cds_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_mrna_by_cds_args.class, metaDataMap);
    }

    public get_mrna_by_cds_args() {
    }

    public get_mrna_by_cds_args(
      String token,
      String ref,
      List<String> cds_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.cds_id_list = cds_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_mrna_by_cds_args(get_mrna_by_cds_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetCds_id_list()) {
        List<String> __this__cds_id_list = new ArrayList<String>(other.cds_id_list);
        this.cds_id_list = __this__cds_id_list;
      }
    }

    public get_mrna_by_cds_args deepCopy() {
      return new get_mrna_by_cds_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.cds_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_mrna_by_cds_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_mrna_by_cds_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getCds_id_listSize() {
      return (this.cds_id_list == null) ? 0 : this.cds_id_list.size();
    }

    public java.util.Iterator<String> getCds_id_listIterator() {
      return (this.cds_id_list == null) ? null : this.cds_id_list.iterator();
    }

    public void addToCds_id_list(String elem) {
      if (this.cds_id_list == null) {
        this.cds_id_list = new ArrayList<String>();
      }
      this.cds_id_list.add(elem);
    }

    public List<String> getCds_id_list() {
      return this.cds_id_list;
    }

    public get_mrna_by_cds_args setCds_id_list(List<String> cds_id_list) {
      this.cds_id_list = cds_id_list;
      return this;
    }

    public void unsetCds_id_list() {
      this.cds_id_list = null;
    }

    /** Returns true if field cds_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetCds_id_list() {
      return this.cds_id_list != null;
    }

    public void setCds_id_listIsSet(boolean value) {
      if (!value) {
        this.cds_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case CDS_ID_LIST:
        if (value == null) {
          unsetCds_id_list();
        } else {
          setCds_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case CDS_ID_LIST:
        return getCds_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case CDS_ID_LIST:
        return isSetCds_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_mrna_by_cds_args)
        return this.equals((get_mrna_by_cds_args)that);
      return false;
    }

    public boolean equals(get_mrna_by_cds_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_cds_id_list = true && this.isSetCds_id_list();
      boolean that_present_cds_id_list = true && that.isSetCds_id_list();
      if (this_present_cds_id_list || that_present_cds_id_list) {
        if (!(this_present_cds_id_list && that_present_cds_id_list))
          return false;
        if (!this.cds_id_list.equals(that.cds_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_cds_id_list = true && (isSetCds_id_list());
      list.add(present_cds_id_list);
      if (present_cds_id_list)
        list.add(cds_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_mrna_by_cds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCds_id_list()).compareTo(other.isSetCds_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCds_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cds_id_list, other.cds_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_mrna_by_cds_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cds_id_list:");
      if (this.cds_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.cds_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_mrna_by_cds_argsStandardSchemeFactory implements SchemeFactory {
      public get_mrna_by_cds_argsStandardScheme getScheme() {
        return new get_mrna_by_cds_argsStandardScheme();
      }
    }

    private static class get_mrna_by_cds_argsStandardScheme extends StandardScheme<get_mrna_by_cds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_mrna_by_cds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CDS_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list482 = iprot.readListBegin();
                  struct.cds_id_list = new ArrayList<String>(_list482.size);
                  String _elem483;
                  for (int _i484 = 0; _i484 < _list482.size; ++_i484)
                  {
                    _elem483 = iprot.readString();
                    struct.cds_id_list.add(_elem483);
                  }
                  iprot.readListEnd();
                }
                struct.setCds_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_mrna_by_cds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.cds_id_list != null) {
          oprot.writeFieldBegin(CDS_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cds_id_list.size()));
            for (String _iter485 : struct.cds_id_list)
            {
              oprot.writeString(_iter485);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_mrna_by_cds_argsTupleSchemeFactory implements SchemeFactory {
      public get_mrna_by_cds_argsTupleScheme getScheme() {
        return new get_mrna_by_cds_argsTupleScheme();
      }
    }

    private static class get_mrna_by_cds_argsTupleScheme extends TupleScheme<get_mrna_by_cds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_mrna_by_cds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetCds_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCds_id_list()) {
          {
            oprot.writeI32(struct.cds_id_list.size());
            for (String _iter486 : struct.cds_id_list)
            {
              oprot.writeString(_iter486);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_mrna_by_cds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list487 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.cds_id_list = new ArrayList<String>(_list487.size);
            String _elem488;
            for (int _i489 = 0; _i489 < _list487.size; ++_i489)
            {
              _elem488 = iprot.readString();
              struct.cds_id_list.add(_elem488);
            }
          }
          struct.setCds_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_mrna_by_cds_result implements org.apache.thrift.TBase<get_mrna_by_cds_result, get_mrna_by_cds_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_mrna_by_cds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_mrna_by_cds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_mrna_by_cds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_mrna_by_cds_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_mrna_by_cds_result.class, metaDataMap);
    }

    public get_mrna_by_cds_result() {
    }

    public get_mrna_by_cds_result(
      Map<String,String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_mrna_by_cds_result(get_mrna_by_cds_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new TreeMap<String,String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_mrna_by_cds_result deepCopy() {
      return new get_mrna_by_cds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new TreeMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public get_mrna_by_cds_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_mrna_by_cds_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_mrna_by_cds_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_mrna_by_cds_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_mrna_by_cds_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_mrna_by_cds_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_mrna_by_cds_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_mrna_by_cds_result)
        return this.equals((get_mrna_by_cds_result)that);
      return false;
    }

    public boolean equals(get_mrna_by_cds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_mrna_by_cds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_mrna_by_cds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_mrna_by_cds_resultStandardSchemeFactory implements SchemeFactory {
      public get_mrna_by_cds_resultStandardScheme getScheme() {
        return new get_mrna_by_cds_resultStandardScheme();
      }
    }

    private static class get_mrna_by_cds_resultStandardScheme extends StandardScheme<get_mrna_by_cds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_mrna_by_cds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map490 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,String>();
                  String _key491;
                  String _val492;
                  for (int _i493 = 0; _i493 < _map490.size; ++_i493)
                  {
                    _key491 = iprot.readString();
                    _val492 = iprot.readString();
                    struct.success.put(_key491, _val492);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_mrna_by_cds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter494 : struct.success.entrySet())
            {
              oprot.writeString(_iter494.getKey());
              oprot.writeString(_iter494.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_mrna_by_cds_resultTupleSchemeFactory implements SchemeFactory {
      public get_mrna_by_cds_resultTupleScheme getScheme() {
        return new get_mrna_by_cds_resultTupleScheme();
      }
    }

    private static class get_mrna_by_cds_resultTupleScheme extends TupleScheme<get_mrna_by_cds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_mrna_by_cds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter495 : struct.success.entrySet())
            {
              oprot.writeString(_iter495.getKey());
              oprot.writeString(_iter495.getValue());
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_mrna_by_cds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map496 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new TreeMap<String,String>();
            String _key497;
            String _val498;
            for (int _i499 = 0; _i499 < _map496.size; ++_i499)
            {
              _key497 = iprot.readString();
              _val498 = iprot.readString();
              struct.success.put(_key497, _val498);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_mrna_by_gene_args implements org.apache.thrift.TBase<get_mrna_by_gene_args, get_mrna_by_gene_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_mrna_by_gene_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_mrna_by_gene_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GENE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("gene_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_mrna_by_gene_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_mrna_by_gene_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> gene_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      GENE_ID_LIST((short)3, "gene_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // GENE_ID_LIST
            return GENE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.GENE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("gene_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_mrna_by_gene_args.class, metaDataMap);
    }

    public get_mrna_by_gene_args() {
    }

    public get_mrna_by_gene_args(
      String token,
      String ref,
      List<String> gene_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.gene_id_list = gene_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_mrna_by_gene_args(get_mrna_by_gene_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetGene_id_list()) {
        List<String> __this__gene_id_list = new ArrayList<String>(other.gene_id_list);
        this.gene_id_list = __this__gene_id_list;
      }
    }

    public get_mrna_by_gene_args deepCopy() {
      return new get_mrna_by_gene_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.gene_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_mrna_by_gene_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_mrna_by_gene_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getGene_id_listSize() {
      return (this.gene_id_list == null) ? 0 : this.gene_id_list.size();
    }

    public java.util.Iterator<String> getGene_id_listIterator() {
      return (this.gene_id_list == null) ? null : this.gene_id_list.iterator();
    }

    public void addToGene_id_list(String elem) {
      if (this.gene_id_list == null) {
        this.gene_id_list = new ArrayList<String>();
      }
      this.gene_id_list.add(elem);
    }

    public List<String> getGene_id_list() {
      return this.gene_id_list;
    }

    public get_mrna_by_gene_args setGene_id_list(List<String> gene_id_list) {
      this.gene_id_list = gene_id_list;
      return this;
    }

    public void unsetGene_id_list() {
      this.gene_id_list = null;
    }

    /** Returns true if field gene_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetGene_id_list() {
      return this.gene_id_list != null;
    }

    public void setGene_id_listIsSet(boolean value) {
      if (!value) {
        this.gene_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case GENE_ID_LIST:
        if (value == null) {
          unsetGene_id_list();
        } else {
          setGene_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case GENE_ID_LIST:
        return getGene_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case GENE_ID_LIST:
        return isSetGene_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_mrna_by_gene_args)
        return this.equals((get_mrna_by_gene_args)that);
      return false;
    }

    public boolean equals(get_mrna_by_gene_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_gene_id_list = true && this.isSetGene_id_list();
      boolean that_present_gene_id_list = true && that.isSetGene_id_list();
      if (this_present_gene_id_list || that_present_gene_id_list) {
        if (!(this_present_gene_id_list && that_present_gene_id_list))
          return false;
        if (!this.gene_id_list.equals(that.gene_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_gene_id_list = true && (isSetGene_id_list());
      list.add(present_gene_id_list);
      if (present_gene_id_list)
        list.add(gene_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_mrna_by_gene_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGene_id_list()).compareTo(other.isSetGene_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGene_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gene_id_list, other.gene_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_mrna_by_gene_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gene_id_list:");
      if (this.gene_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.gene_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_mrna_by_gene_argsStandardSchemeFactory implements SchemeFactory {
      public get_mrna_by_gene_argsStandardScheme getScheme() {
        return new get_mrna_by_gene_argsStandardScheme();
      }
    }

    private static class get_mrna_by_gene_argsStandardScheme extends StandardScheme<get_mrna_by_gene_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_mrna_by_gene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GENE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list500 = iprot.readListBegin();
                  struct.gene_id_list = new ArrayList<String>(_list500.size);
                  String _elem501;
                  for (int _i502 = 0; _i502 < _list500.size; ++_i502)
                  {
                    _elem501 = iprot.readString();
                    struct.gene_id_list.add(_elem501);
                  }
                  iprot.readListEnd();
                }
                struct.setGene_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_mrna_by_gene_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.gene_id_list != null) {
          oprot.writeFieldBegin(GENE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.gene_id_list.size()));
            for (String _iter503 : struct.gene_id_list)
            {
              oprot.writeString(_iter503);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_mrna_by_gene_argsTupleSchemeFactory implements SchemeFactory {
      public get_mrna_by_gene_argsTupleScheme getScheme() {
        return new get_mrna_by_gene_argsTupleScheme();
      }
    }

    private static class get_mrna_by_gene_argsTupleScheme extends TupleScheme<get_mrna_by_gene_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_mrna_by_gene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetGene_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGene_id_list()) {
          {
            oprot.writeI32(struct.gene_id_list.size());
            for (String _iter504 : struct.gene_id_list)
            {
              oprot.writeString(_iter504);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_mrna_by_gene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list505 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.gene_id_list = new ArrayList<String>(_list505.size);
            String _elem506;
            for (int _i507 = 0; _i507 < _list505.size; ++_i507)
            {
              _elem506 = iprot.readString();
              struct.gene_id_list.add(_elem506);
            }
          }
          struct.setGene_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_mrna_by_gene_result implements org.apache.thrift.TBase<get_mrna_by_gene_result, get_mrna_by_gene_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_mrna_by_gene_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_mrna_by_gene_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_mrna_by_gene_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_mrna_by_gene_resultTupleSchemeFactory());
    }

    public Map<String,List<String>> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_mrna_by_gene_result.class, metaDataMap);
    }

    public get_mrna_by_gene_result() {
    }

    public get_mrna_by_gene_result(
      Map<String,List<String>> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_mrna_by_gene_result(get_mrna_by_gene_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<String>> __this__success = new TreeMap<String,List<String>>();
        for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<String> __this__success_copy_value = new ArrayList<String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_mrna_by_gene_result deepCopy() {
      return new get_mrna_by_gene_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<String> val) {
      if (this.success == null) {
        this.success = new TreeMap<String,List<String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<String>> getSuccess() {
      return this.success;
    }

    public get_mrna_by_gene_result setSuccess(Map<String,List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_mrna_by_gene_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_mrna_by_gene_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_mrna_by_gene_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_mrna_by_gene_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_mrna_by_gene_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_mrna_by_gene_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<String>>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_mrna_by_gene_result)
        return this.equals((get_mrna_by_gene_result)that);
      return false;
    }

    public boolean equals(get_mrna_by_gene_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_mrna_by_gene_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_mrna_by_gene_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_mrna_by_gene_resultStandardSchemeFactory implements SchemeFactory {
      public get_mrna_by_gene_resultStandardScheme getScheme() {
        return new get_mrna_by_gene_resultStandardScheme();
      }
    }

    private static class get_mrna_by_gene_resultStandardScheme extends StandardScheme<get_mrna_by_gene_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_mrna_by_gene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map508 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,List<String>>();
                  String _key509;
                  List<String> _val510;
                  for (int _i511 = 0; _i511 < _map508.size; ++_i511)
                  {
                    _key509 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list512 = iprot.readListBegin();
                      _val510 = new ArrayList<String>(_list512.size);
                      String _elem513;
                      for (int _i514 = 0; _i514 < _list512.size; ++_i514)
                      {
                        _elem513 = iprot.readString();
                        _val510.add(_elem513);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key509, _val510);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_mrna_by_gene_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<String>> _iter515 : struct.success.entrySet())
            {
              oprot.writeString(_iter515.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter515.getValue().size()));
                for (String _iter516 : _iter515.getValue())
                {
                  oprot.writeString(_iter516);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_mrna_by_gene_resultTupleSchemeFactory implements SchemeFactory {
      public get_mrna_by_gene_resultTupleScheme getScheme() {
        return new get_mrna_by_gene_resultTupleScheme();
      }
    }

    private static class get_mrna_by_gene_resultTupleScheme extends TupleScheme<get_mrna_by_gene_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_mrna_by_gene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<String>> _iter517 : struct.success.entrySet())
            {
              oprot.writeString(_iter517.getKey());
              {
                oprot.writeI32(_iter517.getValue().size());
                for (String _iter518 : _iter517.getValue())
                {
                  oprot.writeString(_iter518);
                }
              }
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_mrna_by_gene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map519 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new TreeMap<String,List<String>>();
            String _key520;
            List<String> _val521;
            for (int _i522 = 0; _i522 < _map519.size; ++_i522)
            {
              _key520 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list523 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val521 = new ArrayList<String>(_list523.size);
                String _elem524;
                for (int _i525 = 0; _i525 < _list523.size; ++_i525)
                {
                  _elem524 = iprot.readString();
                  _val521.add(_elem524);
                }
              }
              struct.success.put(_key520, _val521);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_mrna_exons_args implements org.apache.thrift.TBase<get_mrna_exons_args, get_mrna_exons_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_mrna_exons_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_mrna_exons_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MRNA_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mrna_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_mrna_exons_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_mrna_exons_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> mrna_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      MRNA_ID_LIST((short)3, "mrna_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // MRNA_ID_LIST
            return MRNA_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.MRNA_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("mrna_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_mrna_exons_args.class, metaDataMap);
    }

    public get_mrna_exons_args() {
    }

    public get_mrna_exons_args(
      String token,
      String ref,
      List<String> mrna_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.mrna_id_list = mrna_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_mrna_exons_args(get_mrna_exons_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetMrna_id_list()) {
        List<String> __this__mrna_id_list = new ArrayList<String>(other.mrna_id_list);
        this.mrna_id_list = __this__mrna_id_list;
      }
    }

    public get_mrna_exons_args deepCopy() {
      return new get_mrna_exons_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.mrna_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_mrna_exons_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_mrna_exons_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getMrna_id_listSize() {
      return (this.mrna_id_list == null) ? 0 : this.mrna_id_list.size();
    }

    public java.util.Iterator<String> getMrna_id_listIterator() {
      return (this.mrna_id_list == null) ? null : this.mrna_id_list.iterator();
    }

    public void addToMrna_id_list(String elem) {
      if (this.mrna_id_list == null) {
        this.mrna_id_list = new ArrayList<String>();
      }
      this.mrna_id_list.add(elem);
    }

    public List<String> getMrna_id_list() {
      return this.mrna_id_list;
    }

    public get_mrna_exons_args setMrna_id_list(List<String> mrna_id_list) {
      this.mrna_id_list = mrna_id_list;
      return this;
    }

    public void unsetMrna_id_list() {
      this.mrna_id_list = null;
    }

    /** Returns true if field mrna_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetMrna_id_list() {
      return this.mrna_id_list != null;
    }

    public void setMrna_id_listIsSet(boolean value) {
      if (!value) {
        this.mrna_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case MRNA_ID_LIST:
        if (value == null) {
          unsetMrna_id_list();
        } else {
          setMrna_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case MRNA_ID_LIST:
        return getMrna_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case MRNA_ID_LIST:
        return isSetMrna_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_mrna_exons_args)
        return this.equals((get_mrna_exons_args)that);
      return false;
    }

    public boolean equals(get_mrna_exons_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_mrna_id_list = true && this.isSetMrna_id_list();
      boolean that_present_mrna_id_list = true && that.isSetMrna_id_list();
      if (this_present_mrna_id_list || that_present_mrna_id_list) {
        if (!(this_present_mrna_id_list && that_present_mrna_id_list))
          return false;
        if (!this.mrna_id_list.equals(that.mrna_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_mrna_id_list = true && (isSetMrna_id_list());
      list.add(present_mrna_id_list);
      if (present_mrna_id_list)
        list.add(mrna_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_mrna_exons_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMrna_id_list()).compareTo(other.isSetMrna_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMrna_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mrna_id_list, other.mrna_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_mrna_exons_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mrna_id_list:");
      if (this.mrna_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.mrna_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_mrna_exons_argsStandardSchemeFactory implements SchemeFactory {
      public get_mrna_exons_argsStandardScheme getScheme() {
        return new get_mrna_exons_argsStandardScheme();
      }
    }

    private static class get_mrna_exons_argsStandardScheme extends StandardScheme<get_mrna_exons_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_mrna_exons_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MRNA_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list526 = iprot.readListBegin();
                  struct.mrna_id_list = new ArrayList<String>(_list526.size);
                  String _elem527;
                  for (int _i528 = 0; _i528 < _list526.size; ++_i528)
                  {
                    _elem527 = iprot.readString();
                    struct.mrna_id_list.add(_elem527);
                  }
                  iprot.readListEnd();
                }
                struct.setMrna_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_mrna_exons_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.mrna_id_list != null) {
          oprot.writeFieldBegin(MRNA_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mrna_id_list.size()));
            for (String _iter529 : struct.mrna_id_list)
            {
              oprot.writeString(_iter529);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_mrna_exons_argsTupleSchemeFactory implements SchemeFactory {
      public get_mrna_exons_argsTupleScheme getScheme() {
        return new get_mrna_exons_argsTupleScheme();
      }
    }

    private static class get_mrna_exons_argsTupleScheme extends TupleScheme<get_mrna_exons_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_mrna_exons_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetMrna_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMrna_id_list()) {
          {
            oprot.writeI32(struct.mrna_id_list.size());
            for (String _iter530 : struct.mrna_id_list)
            {
              oprot.writeString(_iter530);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_mrna_exons_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list531 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mrna_id_list = new ArrayList<String>(_list531.size);
            String _elem532;
            for (int _i533 = 0; _i533 < _list531.size; ++_i533)
            {
              _elem532 = iprot.readString();
              struct.mrna_id_list.add(_elem532);
            }
          }
          struct.setMrna_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_mrna_exons_result implements org.apache.thrift.TBase<get_mrna_exons_result, get_mrna_exons_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_mrna_exons_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_mrna_exons_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_mrna_exons_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_mrna_exons_resultTupleSchemeFactory());
    }

    public Map<String,List<Exon_data>> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Exon_data.class)))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_mrna_exons_result.class, metaDataMap);
    }

    public get_mrna_exons_result() {
    }

    public get_mrna_exons_result(
      Map<String,List<Exon_data>> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_mrna_exons_result(get_mrna_exons_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<Exon_data>> __this__success = new TreeMap<String,List<Exon_data>>();
        for (Map.Entry<String, List<Exon_data>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Exon_data> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<Exon_data> __this__success_copy_value = new ArrayList<Exon_data>(other_element_value.size());
          for (Exon_data other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new Exon_data(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_mrna_exons_result deepCopy() {
      return new get_mrna_exons_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<Exon_data> val) {
      if (this.success == null) {
        this.success = new TreeMap<String,List<Exon_data>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<Exon_data>> getSuccess() {
      return this.success;
    }

    public get_mrna_exons_result setSuccess(Map<String,List<Exon_data>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_mrna_exons_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_mrna_exons_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_mrna_exons_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_mrna_exons_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_mrna_exons_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_mrna_exons_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<Exon_data>>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_mrna_exons_result)
        return this.equals((get_mrna_exons_result)that);
      return false;
    }

    public boolean equals(get_mrna_exons_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_mrna_exons_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_mrna_exons_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_mrna_exons_resultStandardSchemeFactory implements SchemeFactory {
      public get_mrna_exons_resultStandardScheme getScheme() {
        return new get_mrna_exons_resultStandardScheme();
      }
    }

    private static class get_mrna_exons_resultStandardScheme extends StandardScheme<get_mrna_exons_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_mrna_exons_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map534 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,List<Exon_data>>();
                  String _key535;
                  List<Exon_data> _val536;
                  for (int _i537 = 0; _i537 < _map534.size; ++_i537)
                  {
                    _key535 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list538 = iprot.readListBegin();
                      _val536 = new ArrayList<Exon_data>(_list538.size);
                      Exon_data _elem539;
                      for (int _i540 = 0; _i540 < _list538.size; ++_i540)
                      {
                        _elem539 = new Exon_data();
                        _elem539.read(iprot);
                        _val536.add(_elem539);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key535, _val536);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_mrna_exons_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<Exon_data>> _iter541 : struct.success.entrySet())
            {
              oprot.writeString(_iter541.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter541.getValue().size()));
                for (Exon_data _iter542 : _iter541.getValue())
                {
                  _iter542.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_mrna_exons_resultTupleSchemeFactory implements SchemeFactory {
      public get_mrna_exons_resultTupleScheme getScheme() {
        return new get_mrna_exons_resultTupleScheme();
      }
    }

    private static class get_mrna_exons_resultTupleScheme extends TupleScheme<get_mrna_exons_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_mrna_exons_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<Exon_data>> _iter543 : struct.success.entrySet())
            {
              oprot.writeString(_iter543.getKey());
              {
                oprot.writeI32(_iter543.getValue().size());
                for (Exon_data _iter544 : _iter543.getValue())
                {
                  _iter544.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_mrna_exons_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map545 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new TreeMap<String,List<Exon_data>>();
            String _key546;
            List<Exon_data> _val547;
            for (int _i548 = 0; _i548 < _map545.size; ++_i548)
            {
              _key546 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list549 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val547 = new ArrayList<Exon_data>(_list549.size);
                Exon_data _elem550;
                for (int _i551 = 0; _i551 < _list549.size; ++_i551)
                {
                  _elem550 = new Exon_data();
                  _elem550.read(iprot);
                  _val547.add(_elem550);
                }
              }
              struct.success.put(_key546, _val547);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_mrna_utrs_args implements org.apache.thrift.TBase<get_mrna_utrs_args, get_mrna_utrs_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_mrna_utrs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_mrna_utrs_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MRNA_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mrna_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_mrna_utrs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_mrna_utrs_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> mrna_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      MRNA_ID_LIST((short)3, "mrna_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // MRNA_ID_LIST
            return MRNA_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.MRNA_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("mrna_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_mrna_utrs_args.class, metaDataMap);
    }

    public get_mrna_utrs_args() {
    }

    public get_mrna_utrs_args(
      String token,
      String ref,
      List<String> mrna_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.mrna_id_list = mrna_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_mrna_utrs_args(get_mrna_utrs_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetMrna_id_list()) {
        List<String> __this__mrna_id_list = new ArrayList<String>(other.mrna_id_list);
        this.mrna_id_list = __this__mrna_id_list;
      }
    }

    public get_mrna_utrs_args deepCopy() {
      return new get_mrna_utrs_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.mrna_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_mrna_utrs_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_mrna_utrs_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getMrna_id_listSize() {
      return (this.mrna_id_list == null) ? 0 : this.mrna_id_list.size();
    }

    public java.util.Iterator<String> getMrna_id_listIterator() {
      return (this.mrna_id_list == null) ? null : this.mrna_id_list.iterator();
    }

    public void addToMrna_id_list(String elem) {
      if (this.mrna_id_list == null) {
        this.mrna_id_list = new ArrayList<String>();
      }
      this.mrna_id_list.add(elem);
    }

    public List<String> getMrna_id_list() {
      return this.mrna_id_list;
    }

    public get_mrna_utrs_args setMrna_id_list(List<String> mrna_id_list) {
      this.mrna_id_list = mrna_id_list;
      return this;
    }

    public void unsetMrna_id_list() {
      this.mrna_id_list = null;
    }

    /** Returns true if field mrna_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetMrna_id_list() {
      return this.mrna_id_list != null;
    }

    public void setMrna_id_listIsSet(boolean value) {
      if (!value) {
        this.mrna_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case MRNA_ID_LIST:
        if (value == null) {
          unsetMrna_id_list();
        } else {
          setMrna_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case MRNA_ID_LIST:
        return getMrna_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case MRNA_ID_LIST:
        return isSetMrna_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_mrna_utrs_args)
        return this.equals((get_mrna_utrs_args)that);
      return false;
    }

    public boolean equals(get_mrna_utrs_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_mrna_id_list = true && this.isSetMrna_id_list();
      boolean that_present_mrna_id_list = true && that.isSetMrna_id_list();
      if (this_present_mrna_id_list || that_present_mrna_id_list) {
        if (!(this_present_mrna_id_list && that_present_mrna_id_list))
          return false;
        if (!this.mrna_id_list.equals(that.mrna_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_mrna_id_list = true && (isSetMrna_id_list());
      list.add(present_mrna_id_list);
      if (present_mrna_id_list)
        list.add(mrna_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_mrna_utrs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMrna_id_list()).compareTo(other.isSetMrna_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMrna_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mrna_id_list, other.mrna_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_mrna_utrs_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mrna_id_list:");
      if (this.mrna_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.mrna_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_mrna_utrs_argsStandardSchemeFactory implements SchemeFactory {
      public get_mrna_utrs_argsStandardScheme getScheme() {
        return new get_mrna_utrs_argsStandardScheme();
      }
    }

    private static class get_mrna_utrs_argsStandardScheme extends StandardScheme<get_mrna_utrs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_mrna_utrs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MRNA_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list552 = iprot.readListBegin();
                  struct.mrna_id_list = new ArrayList<String>(_list552.size);
                  String _elem553;
                  for (int _i554 = 0; _i554 < _list552.size; ++_i554)
                  {
                    _elem553 = iprot.readString();
                    struct.mrna_id_list.add(_elem553);
                  }
                  iprot.readListEnd();
                }
                struct.setMrna_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_mrna_utrs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.mrna_id_list != null) {
          oprot.writeFieldBegin(MRNA_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mrna_id_list.size()));
            for (String _iter555 : struct.mrna_id_list)
            {
              oprot.writeString(_iter555);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_mrna_utrs_argsTupleSchemeFactory implements SchemeFactory {
      public get_mrna_utrs_argsTupleScheme getScheme() {
        return new get_mrna_utrs_argsTupleScheme();
      }
    }

    private static class get_mrna_utrs_argsTupleScheme extends TupleScheme<get_mrna_utrs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_mrna_utrs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetMrna_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMrna_id_list()) {
          {
            oprot.writeI32(struct.mrna_id_list.size());
            for (String _iter556 : struct.mrna_id_list)
            {
              oprot.writeString(_iter556);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_mrna_utrs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list557 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mrna_id_list = new ArrayList<String>(_list557.size);
            String _elem558;
            for (int _i559 = 0; _i559 < _list557.size; ++_i559)
            {
              _elem558 = iprot.readString();
              struct.mrna_id_list.add(_elem558);
            }
          }
          struct.setMrna_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_mrna_utrs_result implements org.apache.thrift.TBase<get_mrna_utrs_result, get_mrna_utrs_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_mrna_utrs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_mrna_utrs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_mrna_utrs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_mrna_utrs_resultTupleSchemeFactory());
    }

    public Map<String,Map<String,UTR_data>> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UTR_data.class)))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_mrna_utrs_result.class, metaDataMap);
    }

    public get_mrna_utrs_result() {
    }

    public get_mrna_utrs_result(
      Map<String,Map<String,UTR_data>> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_mrna_utrs_result(get_mrna_utrs_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<String,UTR_data>> __this__success = new TreeMap<String,Map<String,UTR_data>>();
        for (Map.Entry<String, Map<String,UTR_data>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,UTR_data> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<String,UTR_data> __this__success_copy_value = new TreeMap<String,UTR_data>();
          for (Map.Entry<String, UTR_data> other_element_value_element : other_element_value.entrySet()) {

            String other_element_value_element_key = other_element_value_element.getKey();
            UTR_data other_element_value_element_value = other_element_value_element.getValue();

            String __this__success_copy_value_copy_key = other_element_value_element_key;

            UTR_data __this__success_copy_value_copy_value = new UTR_data(other_element_value_element_value);

            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_mrna_utrs_result deepCopy() {
      return new get_mrna_utrs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<String,UTR_data> val) {
      if (this.success == null) {
        this.success = new TreeMap<String,Map<String,UTR_data>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<String,UTR_data>> getSuccess() {
      return this.success;
    }

    public get_mrna_utrs_result setSuccess(Map<String,Map<String,UTR_data>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_mrna_utrs_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_mrna_utrs_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_mrna_utrs_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_mrna_utrs_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_mrna_utrs_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_mrna_utrs_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<String,UTR_data>>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_mrna_utrs_result)
        return this.equals((get_mrna_utrs_result)that);
      return false;
    }

    public boolean equals(get_mrna_utrs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_mrna_utrs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_mrna_utrs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_mrna_utrs_resultStandardSchemeFactory implements SchemeFactory {
      public get_mrna_utrs_resultStandardScheme getScheme() {
        return new get_mrna_utrs_resultStandardScheme();
      }
    }

    private static class get_mrna_utrs_resultStandardScheme extends StandardScheme<get_mrna_utrs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_mrna_utrs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map560 = iprot.readMapBegin();
                  struct.success = new TreeMap<String,Map<String,UTR_data>>();
                  String _key561;
                  Map<String,UTR_data> _val562;
                  for (int _i563 = 0; _i563 < _map560.size; ++_i563)
                  {
                    _key561 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map564 = iprot.readMapBegin();
                      _val562 = new TreeMap<String,UTR_data>();
                      String _key565;
                      UTR_data _val566;
                      for (int _i567 = 0; _i567 < _map564.size; ++_i567)
                      {
                        _key565 = iprot.readString();
                        _val566 = new UTR_data();
                        _val566.read(iprot);
                        _val562.put(_key565, _val566);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key561, _val562);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_mrna_utrs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<String,UTR_data>> _iter568 : struct.success.entrySet())
            {
              oprot.writeString(_iter568.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _iter568.getValue().size()));
                for (Map.Entry<String, UTR_data> _iter569 : _iter568.getValue().entrySet())
                {
                  oprot.writeString(_iter569.getKey());
                  _iter569.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_mrna_utrs_resultTupleSchemeFactory implements SchemeFactory {
      public get_mrna_utrs_resultTupleScheme getScheme() {
        return new get_mrna_utrs_resultTupleScheme();
      }
    }

    private static class get_mrna_utrs_resultTupleScheme extends TupleScheme<get_mrna_utrs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_mrna_utrs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<String,UTR_data>> _iter570 : struct.success.entrySet())
            {
              oprot.writeString(_iter570.getKey());
              {
                oprot.writeI32(_iter570.getValue().size());
                for (Map.Entry<String, UTR_data> _iter571 : _iter570.getValue().entrySet())
                {
                  oprot.writeString(_iter571.getKey());
                  _iter571.getValue().write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_mrna_utrs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map572 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new TreeMap<String,Map<String,UTR_data>>();
            String _key573;
            Map<String,UTR_data> _val574;
            for (int _i575 = 0; _i575 < _map572.size; ++_i575)
            {
              _key573 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map576 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val574 = new TreeMap<String,UTR_data>();
                String _key577;
                UTR_data _val578;
                for (int _i579 = 0; _i579 < _map576.size; ++_i579)
                {
                  _key577 = iprot.readString();
                  _val578 = new UTR_data();
                  _val578.read(iprot);
                  _val574.put(_key577, _val578);
                }
              }
              struct.success.put(_key573, _val574);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_gff_args implements org.apache.thrift.TBase<get_gff_args, get_gff_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_gff_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_gff_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GENE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("gene_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_gff_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_gff_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required
    public List<String> gene_id_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref"),
      GENE_ID_LIST((short)3, "gene_id_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          case 3: // GENE_ID_LIST
            return GENE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.GENE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("gene_id_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_gff_args.class, metaDataMap);
    }

    public get_gff_args() {
    }

    public get_gff_args(
      String token,
      String ref,
      List<String> gene_id_list)
    {
      this();
      this.token = token;
      this.ref = ref;
      this.gene_id_list = gene_id_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_gff_args(get_gff_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
      if (other.isSetGene_id_list()) {
        List<String> __this__gene_id_list = new ArrayList<String>(other.gene_id_list);
        this.gene_id_list = __this__gene_id_list;
      }
    }

    public get_gff_args deepCopy() {
      return new get_gff_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
      this.gene_id_list = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_gff_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_gff_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public int getGene_id_listSize() {
      return (this.gene_id_list == null) ? 0 : this.gene_id_list.size();
    }

    public java.util.Iterator<String> getGene_id_listIterator() {
      return (this.gene_id_list == null) ? null : this.gene_id_list.iterator();
    }

    public void addToGene_id_list(String elem) {
      if (this.gene_id_list == null) {
        this.gene_id_list = new ArrayList<String>();
      }
      this.gene_id_list.add(elem);
    }

    public List<String> getGene_id_list() {
      return this.gene_id_list;
    }

    public get_gff_args setGene_id_list(List<String> gene_id_list) {
      this.gene_id_list = gene_id_list;
      return this;
    }

    public void unsetGene_id_list() {
      this.gene_id_list = null;
    }

    /** Returns true if field gene_id_list is set (has been assigned a value) and false otherwise */
    public boolean isSetGene_id_list() {
      return this.gene_id_list != null;
    }

    public void setGene_id_listIsSet(boolean value) {
      if (!value) {
        this.gene_id_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      case GENE_ID_LIST:
        if (value == null) {
          unsetGene_id_list();
        } else {
          setGene_id_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      case GENE_ID_LIST:
        return getGene_id_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      case GENE_ID_LIST:
        return isSetGene_id_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_gff_args)
        return this.equals((get_gff_args)that);
      return false;
    }

    public boolean equals(get_gff_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      boolean this_present_gene_id_list = true && this.isSetGene_id_list();
      boolean that_present_gene_id_list = true && that.isSetGene_id_list();
      if (this_present_gene_id_list || that_present_gene_id_list) {
        if (!(this_present_gene_id_list && that_present_gene_id_list))
          return false;
        if (!this.gene_id_list.equals(that.gene_id_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      boolean present_gene_id_list = true && (isSetGene_id_list());
      list.add(present_gene_id_list);
      if (present_gene_id_list)
        list.add(gene_id_list);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_gff_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGene_id_list()).compareTo(other.isSetGene_id_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGene_id_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gene_id_list, other.gene_id_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_gff_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gene_id_list:");
      if (this.gene_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.gene_id_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (ref == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ref' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_gff_argsStandardSchemeFactory implements SchemeFactory {
      public get_gff_argsStandardScheme getScheme() {
        return new get_gff_argsStandardScheme();
      }
    }

    private static class get_gff_argsStandardScheme extends StandardScheme<get_gff_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_gff_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GENE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list580 = iprot.readListBegin();
                  struct.gene_id_list = new ArrayList<String>(_list580.size);
                  String _elem581;
                  for (int _i582 = 0; _i582 < _list580.size; ++_i582)
                  {
                    _elem581 = iprot.readString();
                    struct.gene_id_list.add(_elem581);
                  }
                  iprot.readListEnd();
                }
                struct.setGene_id_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_gff_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        if (struct.gene_id_list != null) {
          oprot.writeFieldBegin(GENE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.gene_id_list.size()));
            for (String _iter583 : struct.gene_id_list)
            {
              oprot.writeString(_iter583);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_gff_argsTupleSchemeFactory implements SchemeFactory {
      public get_gff_argsTupleScheme getScheme() {
        return new get_gff_argsTupleScheme();
      }
    }

    private static class get_gff_argsTupleScheme extends TupleScheme<get_gff_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_gff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
        oprot.writeString(struct.ref);
        BitSet optionals = new BitSet();
        if (struct.isSetGene_id_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGene_id_list()) {
          {
            oprot.writeI32(struct.gene_id_list.size());
            for (String _iter584 : struct.gene_id_list)
            {
              oprot.writeString(_iter584);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_gff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
        struct.ref = iprot.readString();
        struct.setRefIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list585 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.gene_id_list = new ArrayList<String>(_list585.size);
            String _elem586;
            for (int _i587 = 0; _i587 < _list585.size; ++_i587)
            {
              _elem586 = iprot.readString();
              struct.gene_id_list.add(_elem586);
            }
          }
          struct.setGene_id_listIsSet(true);
        }
      }
    }

  }

  public static class get_gff_result implements org.apache.thrift.TBase<get_gff_result, get_gff_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_gff_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_gff_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_gff_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_gff_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_gff_result.class, metaDataMap);
    }

    public get_gff_result() {
    }

    public get_gff_result(
      ByteBuffer success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_gff_result(get_gff_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_gff_result deepCopy() {
      return new get_gff_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public get_gff_result setSuccess(byte[] success) {
      this.success = success == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(success, success.length));
      return this;
    }

    public get_gff_result setSuccess(ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_gff_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_gff_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_gff_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_gff_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_gff_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_gff_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_gff_result)
        return this.equals((get_gff_result)that);
      return false;
    }

    public boolean equals(get_gff_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_gff_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_gff_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_gff_resultStandardSchemeFactory implements SchemeFactory {
      public get_gff_resultStandardScheme getScheme() {
        return new get_gff_resultStandardScheme();
      }
    }

    private static class get_gff_resultStandardScheme extends StandardScheme<get_gff_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_gff_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_gff_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_gff_resultTupleSchemeFactory implements SchemeFactory {
      public get_gff_resultTupleScheme getScheme() {
        return new get_gff_resultTupleScheme();
      }
    }

    private static class get_gff_resultTupleScheme extends TupleScheme<get_gff_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_gff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_gff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

}
