/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genome_annotation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-20")
public class AssemblyContig implements org.apache.thrift.TBase<AssemblyContig, AssemblyContig._Fields>, java.io.Serializable, Cloneable, Comparable<AssemblyContig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssemblyContig");

  private static final org.apache.thrift.protocol.TField CONTIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contig_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField GC_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("gc_content", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("md5", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_complete", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_CIRCULAR_FIELD_DESC = new org.apache.thrift.protocol.TField("is_circular", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AssemblyContigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AssemblyContigTupleSchemeFactory());
  }

  public String contig_id; // required
  public String sequence; // required
  public long length; // required
  public double gc_content; // required
  public String md5; // required
  public String name; // required
  public String description; // required
  public boolean is_complete; // required
  public boolean is_circular; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTIG_ID((short)1, "contig_id"),
    SEQUENCE((short)2, "sequence"),
    LENGTH((short)3, "length"),
    GC_CONTENT((short)4, "gc_content"),
    MD5((short)5, "md5"),
    NAME((short)6, "name"),
    DESCRIPTION((short)7, "description"),
    IS_COMPLETE((short)8, "is_complete"),
    IS_CIRCULAR((short)9, "is_circular");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTIG_ID
          return CONTIG_ID;
        case 2: // SEQUENCE
          return SEQUENCE;
        case 3: // LENGTH
          return LENGTH;
        case 4: // GC_CONTENT
          return GC_CONTENT;
        case 5: // MD5
          return MD5;
        case 6: // NAME
          return NAME;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        case 8: // IS_COMPLETE
          return IS_COMPLETE;
        case 9: // IS_CIRCULAR
          return IS_CIRCULAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LENGTH_ISSET_ID = 0;
  private static final int __GC_CONTENT_ISSET_ID = 1;
  private static final int __IS_COMPLETE_ISSET_ID = 2;
  private static final int __IS_CIRCULAR_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTIG_ID, new org.apache.thrift.meta_data.FieldMetaData("contig_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("sequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GC_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("gc_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("is_complete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_CIRCULAR, new org.apache.thrift.meta_data.FieldMetaData("is_circular", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssemblyContig.class, metaDataMap);
  }

  public AssemblyContig() {
  }

  public AssemblyContig(
    String contig_id,
    String sequence,
    long length,
    double gc_content,
    String md5,
    String name,
    String description,
    boolean is_complete,
    boolean is_circular)
  {
    this();
    this.contig_id = contig_id;
    this.sequence = sequence;
    this.length = length;
    setLengthIsSet(true);
    this.gc_content = gc_content;
    setGc_contentIsSet(true);
    this.md5 = md5;
    this.name = name;
    this.description = description;
    this.is_complete = is_complete;
    setIs_completeIsSet(true);
    this.is_circular = is_circular;
    setIs_circularIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AssemblyContig(AssemblyContig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContig_id()) {
      this.contig_id = other.contig_id;
    }
    if (other.isSetSequence()) {
      this.sequence = other.sequence;
    }
    this.length = other.length;
    this.gc_content = other.gc_content;
    if (other.isSetMd5()) {
      this.md5 = other.md5;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.is_complete = other.is_complete;
    this.is_circular = other.is_circular;
  }

  public AssemblyContig deepCopy() {
    return new AssemblyContig(this);
  }

  @Override
  public void clear() {
    this.contig_id = null;
    this.sequence = null;
    setLengthIsSet(false);
    this.length = 0;
    setGc_contentIsSet(false);
    this.gc_content = 0.0;
    this.md5 = null;
    this.name = null;
    this.description = null;
    setIs_completeIsSet(false);
    this.is_complete = false;
    setIs_circularIsSet(false);
    this.is_circular = false;
  }

  public String getContig_id() {
    return this.contig_id;
  }

  public AssemblyContig setContig_id(String contig_id) {
    this.contig_id = contig_id;
    return this;
  }

  public void unsetContig_id() {
    this.contig_id = null;
  }

  /** Returns true if field contig_id is set (has been assigned a value) and false otherwise */
  public boolean isSetContig_id() {
    return this.contig_id != null;
  }

  public void setContig_idIsSet(boolean value) {
    if (!value) {
      this.contig_id = null;
    }
  }

  public String getSequence() {
    return this.sequence;
  }

  public AssemblyContig setSequence(String sequence) {
    this.sequence = sequence;
    return this;
  }

  public void unsetSequence() {
    this.sequence = null;
  }

  /** Returns true if field sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return this.sequence != null;
  }

  public void setSequenceIsSet(boolean value) {
    if (!value) {
      this.sequence = null;
    }
  }

  public long getLength() {
    return this.length;
  }

  public AssemblyContig setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public double getGc_content() {
    return this.gc_content;
  }

  public AssemblyContig setGc_content(double gc_content) {
    this.gc_content = gc_content;
    setGc_contentIsSet(true);
    return this;
  }

  public void unsetGc_content() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GC_CONTENT_ISSET_ID);
  }

  /** Returns true if field gc_content is set (has been assigned a value) and false otherwise */
  public boolean isSetGc_content() {
    return EncodingUtils.testBit(__isset_bitfield, __GC_CONTENT_ISSET_ID);
  }

  public void setGc_contentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GC_CONTENT_ISSET_ID, value);
  }

  public String getMd5() {
    return this.md5;
  }

  public AssemblyContig setMd5(String md5) {
    this.md5 = md5;
    return this;
  }

  public void unsetMd5() {
    this.md5 = null;
  }

  /** Returns true if field md5 is set (has been assigned a value) and false otherwise */
  public boolean isSetMd5() {
    return this.md5 != null;
  }

  public void setMd5IsSet(boolean value) {
    if (!value) {
      this.md5 = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public AssemblyContig setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public AssemblyContig setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public boolean isIs_complete() {
    return this.is_complete;
  }

  public AssemblyContig setIs_complete(boolean is_complete) {
    this.is_complete = is_complete;
    setIs_completeIsSet(true);
    return this;
  }

  public void unsetIs_complete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_COMPLETE_ISSET_ID);
  }

  /** Returns true if field is_complete is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_complete() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_COMPLETE_ISSET_ID);
  }

  public void setIs_completeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_COMPLETE_ISSET_ID, value);
  }

  public boolean isIs_circular() {
    return this.is_circular;
  }

  public AssemblyContig setIs_circular(boolean is_circular) {
    this.is_circular = is_circular;
    setIs_circularIsSet(true);
    return this;
  }

  public void unsetIs_circular() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_CIRCULAR_ISSET_ID);
  }

  /** Returns true if field is_circular is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_circular() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_CIRCULAR_ISSET_ID);
  }

  public void setIs_circularIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_CIRCULAR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTIG_ID:
      if (value == null) {
        unsetContig_id();
      } else {
        setContig_id((String)value);
      }
      break;

    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((String)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case GC_CONTENT:
      if (value == null) {
        unsetGc_content();
      } else {
        setGc_content((Double)value);
      }
      break;

    case MD5:
      if (value == null) {
        unsetMd5();
      } else {
        setMd5((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case IS_COMPLETE:
      if (value == null) {
        unsetIs_complete();
      } else {
        setIs_complete((Boolean)value);
      }
      break;

    case IS_CIRCULAR:
      if (value == null) {
        unsetIs_circular();
      } else {
        setIs_circular((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTIG_ID:
      return getContig_id();

    case SEQUENCE:
      return getSequence();

    case LENGTH:
      return Long.valueOf(getLength());

    case GC_CONTENT:
      return Double.valueOf(getGc_content());

    case MD5:
      return getMd5();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case IS_COMPLETE:
      return Boolean.valueOf(isIs_complete());

    case IS_CIRCULAR:
      return Boolean.valueOf(isIs_circular());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTIG_ID:
      return isSetContig_id();
    case SEQUENCE:
      return isSetSequence();
    case LENGTH:
      return isSetLength();
    case GC_CONTENT:
      return isSetGc_content();
    case MD5:
      return isSetMd5();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case IS_COMPLETE:
      return isSetIs_complete();
    case IS_CIRCULAR:
      return isSetIs_circular();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AssemblyContig)
      return this.equals((AssemblyContig)that);
    return false;
  }

  public boolean equals(AssemblyContig that) {
    if (that == null)
      return false;

    boolean this_present_contig_id = true && this.isSetContig_id();
    boolean that_present_contig_id = true && that.isSetContig_id();
    if (this_present_contig_id || that_present_contig_id) {
      if (!(this_present_contig_id && that_present_contig_id))
        return false;
      if (!this.contig_id.equals(that.contig_id))
        return false;
    }

    boolean this_present_sequence = true && this.isSetSequence();
    boolean that_present_sequence = true && that.isSetSequence();
    if (this_present_sequence || that_present_sequence) {
      if (!(this_present_sequence && that_present_sequence))
        return false;
      if (!this.sequence.equals(that.sequence))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_gc_content = true;
    boolean that_present_gc_content = true;
    if (this_present_gc_content || that_present_gc_content) {
      if (!(this_present_gc_content && that_present_gc_content))
        return false;
      if (this.gc_content != that.gc_content)
        return false;
    }

    boolean this_present_md5 = true && this.isSetMd5();
    boolean that_present_md5 = true && that.isSetMd5();
    if (this_present_md5 || that_present_md5) {
      if (!(this_present_md5 && that_present_md5))
        return false;
      if (!this.md5.equals(that.md5))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_is_complete = true;
    boolean that_present_is_complete = true;
    if (this_present_is_complete || that_present_is_complete) {
      if (!(this_present_is_complete && that_present_is_complete))
        return false;
      if (this.is_complete != that.is_complete)
        return false;
    }

    boolean this_present_is_circular = true;
    boolean that_present_is_circular = true;
    if (this_present_is_circular || that_present_is_circular) {
      if (!(this_present_is_circular && that_present_is_circular))
        return false;
      if (this.is_circular != that.is_circular)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_contig_id = true && (isSetContig_id());
    list.add(present_contig_id);
    if (present_contig_id)
      list.add(contig_id);

    boolean present_sequence = true && (isSetSequence());
    list.add(present_sequence);
    if (present_sequence)
      list.add(sequence);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    boolean present_gc_content = true;
    list.add(present_gc_content);
    if (present_gc_content)
      list.add(gc_content);

    boolean present_md5 = true && (isSetMd5());
    list.add(present_md5);
    if (present_md5)
      list.add(md5);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_is_complete = true;
    list.add(present_is_complete);
    if (present_is_complete)
      list.add(is_complete);

    boolean present_is_circular = true;
    list.add(present_is_circular);
    if (present_is_circular)
      list.add(is_circular);

    return list.hashCode();
  }

  @Override
  public int compareTo(AssemblyContig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContig_id()).compareTo(other.isSetContig_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContig_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contig_id, other.contig_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(other.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence, other.sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc_content()).compareTo(other.isSetGc_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc_content, other.gc_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMd5()).compareTo(other.isSetMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, other.md5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_complete()).compareTo(other.isSetIs_complete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_complete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_complete, other.is_complete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_circular()).compareTo(other.isSetIs_circular());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_circular()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_circular, other.is_circular);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AssemblyContig(");
    boolean first = true;

    sb.append("contig_id:");
    if (this.contig_id == null) {
      sb.append("null");
    } else {
      sb.append(this.contig_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequence:");
    if (this.sequence == null) {
      sb.append("null");
    } else {
      sb.append(this.sequence);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gc_content:");
    sb.append(this.gc_content);
    first = false;
    if (!first) sb.append(", ");
    sb.append("md5:");
    if (this.md5 == null) {
      sb.append("null");
    } else {
      sb.append(this.md5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_complete:");
    sb.append(this.is_complete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_circular:");
    sb.append(this.is_circular);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssemblyContigStandardSchemeFactory implements SchemeFactory {
    public AssemblyContigStandardScheme getScheme() {
      return new AssemblyContigStandardScheme();
    }
  }

  private static class AssemblyContigStandardScheme extends StandardScheme<AssemblyContig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AssemblyContig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contig_id = iprot.readString();
              struct.setContig_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sequence = iprot.readString();
              struct.setSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GC_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.gc_content = iprot.readDouble();
              struct.setGc_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.md5 = iprot.readString();
              struct.setMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_complete = iprot.readBool();
              struct.setIs_completeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_CIRCULAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_circular = iprot.readBool();
              struct.setIs_circularIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AssemblyContig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contig_id != null) {
        oprot.writeFieldBegin(CONTIG_ID_FIELD_DESC);
        oprot.writeString(struct.contig_id);
        oprot.writeFieldEnd();
      }
      if (struct.sequence != null) {
        oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
        oprot.writeString(struct.sequence);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GC_CONTENT_FIELD_DESC);
      oprot.writeDouble(struct.gc_content);
      oprot.writeFieldEnd();
      if (struct.md5 != null) {
        oprot.writeFieldBegin(MD5_FIELD_DESC);
        oprot.writeString(struct.md5);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_COMPLETE_FIELD_DESC);
      oprot.writeBool(struct.is_complete);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CIRCULAR_FIELD_DESC);
      oprot.writeBool(struct.is_circular);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssemblyContigTupleSchemeFactory implements SchemeFactory {
    public AssemblyContigTupleScheme getScheme() {
      return new AssemblyContigTupleScheme();
    }
  }

  private static class AssemblyContigTupleScheme extends TupleScheme<AssemblyContig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AssemblyContig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContig_id()) {
        optionals.set(0);
      }
      if (struct.isSetSequence()) {
        optionals.set(1);
      }
      if (struct.isSetLength()) {
        optionals.set(2);
      }
      if (struct.isSetGc_content()) {
        optionals.set(3);
      }
      if (struct.isSetMd5()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetDescription()) {
        optionals.set(6);
      }
      if (struct.isSetIs_complete()) {
        optionals.set(7);
      }
      if (struct.isSetIs_circular()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetContig_id()) {
        oprot.writeString(struct.contig_id);
      }
      if (struct.isSetSequence()) {
        oprot.writeString(struct.sequence);
      }
      if (struct.isSetLength()) {
        oprot.writeI64(struct.length);
      }
      if (struct.isSetGc_content()) {
        oprot.writeDouble(struct.gc_content);
      }
      if (struct.isSetMd5()) {
        oprot.writeString(struct.md5);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetIs_complete()) {
        oprot.writeBool(struct.is_complete);
      }
      if (struct.isSetIs_circular()) {
        oprot.writeBool(struct.is_circular);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AssemblyContig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.contig_id = iprot.readString();
        struct.setContig_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sequence = iprot.readString();
        struct.setSequenceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.length = iprot.readI64();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gc_content = iprot.readDouble();
        struct.setGc_contentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.md5 = iprot.readString();
        struct.setMd5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_complete = iprot.readBool();
        struct.setIs_completeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.is_circular = iprot.readBool();
        struct.setIs_circularIsSet(true);
      }
    }
  }

}

