/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-20")
public class thrift_service {

  public interface Iface {

    /**
     * Retrieve parent Taxon.
     * 
     * @return Reference to parent Taxon.
     * 
     * @param token
     * @param ref
     */
    public String get_parent(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve children Taxon.
     * 
     * @return List of references to child Taxons.
     * 
     * @param token
     * @param ref
     */
    public List<String> get_children(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the GenomeAnnotation(s) that refer to this Taxon.
     * If this is accessing a KBaseGenomes.Genome object, it will
     * return an empty list (this information is not available).
     * 
     * @return List of references to GenomeAnnotation objects.
     * 
     * @param token
     * @param ref
     */
    public List<String> get_genome_annotations(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the scientific lineage.
     * 
     * @return Strings for each 'unit' of the lineage, ordered in
     *   the usual way from Domain to Kingdom to Phylum, etc.
     * 
     * 
     * @param token
     * @param ref
     */
    public List<String> get_scientific_lineage(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the scientific name.
     * 
     * @return The scientific name, e.g., "Escherichia Coli K12 str. MG1655"
     * 
     * @param token
     * @param ref
     */
    public String get_scientific_name(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the NCBI taxonomic ID of this Taxon.
     * For type KBaseGenomes.Genome, the ``source_id`` will be returned.
     * 
     * @return Integer taxonomic ID.
     * 
     * @param token
     * @param ref
     */
    public int get_taxonomic_id(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the kingdom.
     * 
     * 
     * @param token
     * @param ref
     */
    public String get_kingdom(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the domain.
     * 
     * 
     * @param token
     * @param ref
     */
    public String get_domain(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the genetic code.
     * 
     * 
     * @param token
     * @param ref
     */
    public int get_genetic_code(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve the aliases.
     * 
     * 
     * @param token
     * @param ref
     */
    public List<String> get_aliases(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve object info.
     * @skip documentation
     * 
     * @param token
     * @param ref
     */
    public ObjectInfo get_info(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve object history.
     * @skip documentation
     * 
     * @param token
     * @param ref
     */
    public List<ObjectInfo> get_history(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve object provenance.
     * @skip documentation
     * 
     * @param token
     * @param ref
     */
    public List<ObjectProvenanceAction> get_provenance(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve object identifier.
     * @skip documentation
     * 
     * @param token
     * @param ref
     */
    public long get_id(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve object name.
     * @skip documentation
     * 
     * @param token
     * @param ref
     */
    public String get_name(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

    /**
     * Retrieve object version.
     * @skip documentation
     * 
     * @param token
     * @param ref
     */
    public String get_version(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void get_parent(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_children(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_genome_annotations(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_scientific_lineage(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_scientific_name(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_taxonomic_id(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_kingdom(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_domain(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_genetic_code(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_aliases(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_info(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_history(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_provenance(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_id(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_name(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_version(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String get_parent(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_parent(token, ref);
      return recv_get_parent();
    }

    public void send_get_parent(String token, String ref) throws org.apache.thrift.TException
    {
      get_parent_args args = new get_parent_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_parent", args);
    }

    public String recv_get_parent() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_parent_result result = new get_parent_result();
      receiveBase(result, "get_parent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_parent failed: unknown result");
    }

    public List<String> get_children(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_children(token, ref);
      return recv_get_children();
    }

    public void send_get_children(String token, String ref) throws org.apache.thrift.TException
    {
      get_children_args args = new get_children_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_children", args);
    }

    public List<String> recv_get_children() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_children_result result = new get_children_result();
      receiveBase(result, "get_children");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_children failed: unknown result");
    }

    public List<String> get_genome_annotations(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_genome_annotations(token, ref);
      return recv_get_genome_annotations();
    }

    public void send_get_genome_annotations(String token, String ref) throws org.apache.thrift.TException
    {
      get_genome_annotations_args args = new get_genome_annotations_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_genome_annotations", args);
    }

    public List<String> recv_get_genome_annotations() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_genome_annotations_result result = new get_genome_annotations_result();
      receiveBase(result, "get_genome_annotations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_genome_annotations failed: unknown result");
    }

    public List<String> get_scientific_lineage(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_scientific_lineage(token, ref);
      return recv_get_scientific_lineage();
    }

    public void send_get_scientific_lineage(String token, String ref) throws org.apache.thrift.TException
    {
      get_scientific_lineage_args args = new get_scientific_lineage_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_scientific_lineage", args);
    }

    public List<String> recv_get_scientific_lineage() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_scientific_lineage_result result = new get_scientific_lineage_result();
      receiveBase(result, "get_scientific_lineage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_scientific_lineage failed: unknown result");
    }

    public String get_scientific_name(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_scientific_name(token, ref);
      return recv_get_scientific_name();
    }

    public void send_get_scientific_name(String token, String ref) throws org.apache.thrift.TException
    {
      get_scientific_name_args args = new get_scientific_name_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_scientific_name", args);
    }

    public String recv_get_scientific_name() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_scientific_name_result result = new get_scientific_name_result();
      receiveBase(result, "get_scientific_name");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_scientific_name failed: unknown result");
    }

    public int get_taxonomic_id(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_taxonomic_id(token, ref);
      return recv_get_taxonomic_id();
    }

    public void send_get_taxonomic_id(String token, String ref) throws org.apache.thrift.TException
    {
      get_taxonomic_id_args args = new get_taxonomic_id_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_taxonomic_id", args);
    }

    public int recv_get_taxonomic_id() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_taxonomic_id_result result = new get_taxonomic_id_result();
      receiveBase(result, "get_taxonomic_id");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_taxonomic_id failed: unknown result");
    }

    public String get_kingdom(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_kingdom(token, ref);
      return recv_get_kingdom();
    }

    public void send_get_kingdom(String token, String ref) throws org.apache.thrift.TException
    {
      get_kingdom_args args = new get_kingdom_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_kingdom", args);
    }

    public String recv_get_kingdom() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_kingdom_result result = new get_kingdom_result();
      receiveBase(result, "get_kingdom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_kingdom failed: unknown result");
    }

    public String get_domain(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_domain(token, ref);
      return recv_get_domain();
    }

    public void send_get_domain(String token, String ref) throws org.apache.thrift.TException
    {
      get_domain_args args = new get_domain_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_domain", args);
    }

    public String recv_get_domain() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_domain_result result = new get_domain_result();
      receiveBase(result, "get_domain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_domain failed: unknown result");
    }

    public int get_genetic_code(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_genetic_code(token, ref);
      return recv_get_genetic_code();
    }

    public void send_get_genetic_code(String token, String ref) throws org.apache.thrift.TException
    {
      get_genetic_code_args args = new get_genetic_code_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_genetic_code", args);
    }

    public int recv_get_genetic_code() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_genetic_code_result result = new get_genetic_code_result();
      receiveBase(result, "get_genetic_code");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_genetic_code failed: unknown result");
    }

    public List<String> get_aliases(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_aliases(token, ref);
      return recv_get_aliases();
    }

    public void send_get_aliases(String token, String ref) throws org.apache.thrift.TException
    {
      get_aliases_args args = new get_aliases_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_aliases", args);
    }

    public List<String> recv_get_aliases() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_aliases_result result = new get_aliases_result();
      receiveBase(result, "get_aliases");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_aliases failed: unknown result");
    }

    public ObjectInfo get_info(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_info(token, ref);
      return recv_get_info();
    }

    public void send_get_info(String token, String ref) throws org.apache.thrift.TException
    {
      get_info_args args = new get_info_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_info", args);
    }

    public ObjectInfo recv_get_info() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_info_result result = new get_info_result();
      receiveBase(result, "get_info");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_info failed: unknown result");
    }

    public List<ObjectInfo> get_history(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_history(token, ref);
      return recv_get_history();
    }

    public void send_get_history(String token, String ref) throws org.apache.thrift.TException
    {
      get_history_args args = new get_history_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_history", args);
    }

    public List<ObjectInfo> recv_get_history() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_history_result result = new get_history_result();
      receiveBase(result, "get_history");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_history failed: unknown result");
    }

    public List<ObjectProvenanceAction> get_provenance(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_provenance(token, ref);
      return recv_get_provenance();
    }

    public void send_get_provenance(String token, String ref) throws org.apache.thrift.TException
    {
      get_provenance_args args = new get_provenance_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_provenance", args);
    }

    public List<ObjectProvenanceAction> recv_get_provenance() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_provenance_result result = new get_provenance_result();
      receiveBase(result, "get_provenance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_provenance failed: unknown result");
    }

    public long get_id(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_id(token, ref);
      return recv_get_id();
    }

    public void send_get_id(String token, String ref) throws org.apache.thrift.TException
    {
      get_id_args args = new get_id_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_id", args);
    }

    public long recv_get_id() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_id_result result = new get_id_result();
      receiveBase(result, "get_id");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_id failed: unknown result");
    }

    public String get_name(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_name(token, ref);
      return recv_get_name();
    }

    public void send_get_name(String token, String ref) throws org.apache.thrift.TException
    {
      get_name_args args = new get_name_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_name", args);
    }

    public String recv_get_name() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_name_result result = new get_name_result();
      receiveBase(result, "get_name");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_name failed: unknown result");
    }

    public String get_version(String token, String ref) throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      send_get_version(token, ref);
      return recv_get_version();
    }

    public void send_get_version(String token, String ref) throws org.apache.thrift.TException
    {
      get_version_args args = new get_version_args();
      args.setToken(token);
      args.setRef(ref);
      sendBase("get_version", args);
    }

    public String recv_get_version() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException
    {
      get_version_result result = new get_version_result();
      receiveBase(result, "get_version");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.generic_exception != null) {
        throw result.generic_exception;
      }
      if (result.authorization_exception != null) {
        throw result.authorization_exception;
      }
      if (result.authentication_exception != null) {
        throw result.authentication_exception;
      }
      if (result.reference_exception != null) {
        throw result.reference_exception;
      }
      if (result.attribute_exception != null) {
        throw result.attribute_exception;
      }
      if (result.type_exception != null) {
        throw result.type_exception;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_version failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void get_parent(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_parent_call method_call = new get_parent_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_parent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_parent_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_parent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_parent_args args = new get_parent_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_parent();
      }
    }

    public void get_children(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_children_call method_call = new get_children_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_children_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_children_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_children", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_children_args args = new get_children_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_children();
      }
    }

    public void get_genome_annotations(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_genome_annotations_call method_call = new get_genome_annotations_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_genome_annotations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_genome_annotations_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_genome_annotations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_genome_annotations_args args = new get_genome_annotations_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_genome_annotations();
      }
    }

    public void get_scientific_lineage(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_scientific_lineage_call method_call = new get_scientific_lineage_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_scientific_lineage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_scientific_lineage_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_scientific_lineage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_scientific_lineage_args args = new get_scientific_lineage_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_scientific_lineage();
      }
    }

    public void get_scientific_name(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_scientific_name_call method_call = new get_scientific_name_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_scientific_name_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_scientific_name_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_scientific_name", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_scientific_name_args args = new get_scientific_name_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_scientific_name();
      }
    }

    public void get_taxonomic_id(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_taxonomic_id_call method_call = new get_taxonomic_id_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_taxonomic_id_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_taxonomic_id_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_taxonomic_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_taxonomic_id_args args = new get_taxonomic_id_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_taxonomic_id();
      }
    }

    public void get_kingdom(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_kingdom_call method_call = new get_kingdom_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_kingdom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_kingdom_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_kingdom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_kingdom_args args = new get_kingdom_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_kingdom();
      }
    }

    public void get_domain(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_domain_call method_call = new get_domain_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_domain_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_domain_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_domain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_domain_args args = new get_domain_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_domain();
      }
    }

    public void get_genetic_code(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_genetic_code_call method_call = new get_genetic_code_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_genetic_code_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_genetic_code_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_genetic_code", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_genetic_code_args args = new get_genetic_code_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_genetic_code();
      }
    }

    public void get_aliases(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_aliases_call method_call = new get_aliases_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_aliases_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_aliases_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_aliases", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_aliases_args args = new get_aliases_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_aliases();
      }
    }

    public void get_info(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_info_call method_call = new get_info_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_info_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_info_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_info", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_info_args args = new get_info_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ObjectInfo getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_info();
      }
    }

    public void get_history(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_history_call method_call = new get_history_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_history_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_history_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_history", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_history_args args = new get_history_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ObjectInfo> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_history();
      }
    }

    public void get_provenance(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_provenance_call method_call = new get_provenance_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_provenance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_provenance_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_provenance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_provenance_args args = new get_provenance_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ObjectProvenanceAction> getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_provenance();
      }
    }

    public void get_id(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_id_call method_call = new get_id_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_id_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_id_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_id_args args = new get_id_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_id();
      }
    }

    public void get_name(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_name_call method_call = new get_name_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_name_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_name_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_name", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_name_args args = new get_name_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_name();
      }
    }

    public void get_version(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_version_call method_call = new get_version_call(token, ref, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_version_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String ref;
      public get_version_call(String token, String ref, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ref = ref;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_version", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_version_args args = new get_version_args();
        args.setToken(token);
        args.setRef(ref);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ServiceException, AuthorizationException, AuthenticationException, ObjectReferenceException, AttributeException, TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_version();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("get_parent", new get_parent());
      processMap.put("get_children", new get_children());
      processMap.put("get_genome_annotations", new get_genome_annotations());
      processMap.put("get_scientific_lineage", new get_scientific_lineage());
      processMap.put("get_scientific_name", new get_scientific_name());
      processMap.put("get_taxonomic_id", new get_taxonomic_id());
      processMap.put("get_kingdom", new get_kingdom());
      processMap.put("get_domain", new get_domain());
      processMap.put("get_genetic_code", new get_genetic_code());
      processMap.put("get_aliases", new get_aliases());
      processMap.put("get_info", new get_info());
      processMap.put("get_history", new get_history());
      processMap.put("get_provenance", new get_provenance());
      processMap.put("get_id", new get_id());
      processMap.put("get_name", new get_name());
      processMap.put("get_version", new get_version());
      return processMap;
    }

    public static class get_parent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_parent_args> {
      public get_parent() {
        super("get_parent");
      }

      public get_parent_args getEmptyArgsInstance() {
        return new get_parent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_parent_result getResult(I iface, get_parent_args args) throws org.apache.thrift.TException {
        get_parent_result result = new get_parent_result();
        try {
          result.success = iface.get_parent(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_children<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_children_args> {
      public get_children() {
        super("get_children");
      }

      public get_children_args getEmptyArgsInstance() {
        return new get_children_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_children_result getResult(I iface, get_children_args args) throws org.apache.thrift.TException {
        get_children_result result = new get_children_result();
        try {
          result.success = iface.get_children(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_genome_annotations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_genome_annotations_args> {
      public get_genome_annotations() {
        super("get_genome_annotations");
      }

      public get_genome_annotations_args getEmptyArgsInstance() {
        return new get_genome_annotations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_genome_annotations_result getResult(I iface, get_genome_annotations_args args) throws org.apache.thrift.TException {
        get_genome_annotations_result result = new get_genome_annotations_result();
        try {
          result.success = iface.get_genome_annotations(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_scientific_lineage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_scientific_lineage_args> {
      public get_scientific_lineage() {
        super("get_scientific_lineage");
      }

      public get_scientific_lineage_args getEmptyArgsInstance() {
        return new get_scientific_lineage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_scientific_lineage_result getResult(I iface, get_scientific_lineage_args args) throws org.apache.thrift.TException {
        get_scientific_lineage_result result = new get_scientific_lineage_result();
        try {
          result.success = iface.get_scientific_lineage(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_scientific_name<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_scientific_name_args> {
      public get_scientific_name() {
        super("get_scientific_name");
      }

      public get_scientific_name_args getEmptyArgsInstance() {
        return new get_scientific_name_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_scientific_name_result getResult(I iface, get_scientific_name_args args) throws org.apache.thrift.TException {
        get_scientific_name_result result = new get_scientific_name_result();
        try {
          result.success = iface.get_scientific_name(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_taxonomic_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_taxonomic_id_args> {
      public get_taxonomic_id() {
        super("get_taxonomic_id");
      }

      public get_taxonomic_id_args getEmptyArgsInstance() {
        return new get_taxonomic_id_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_taxonomic_id_result getResult(I iface, get_taxonomic_id_args args) throws org.apache.thrift.TException {
        get_taxonomic_id_result result = new get_taxonomic_id_result();
        try {
          result.success = iface.get_taxonomic_id(args.token, args.ref);
          result.setSuccessIsSet(true);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_kingdom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_kingdom_args> {
      public get_kingdom() {
        super("get_kingdom");
      }

      public get_kingdom_args getEmptyArgsInstance() {
        return new get_kingdom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_kingdom_result getResult(I iface, get_kingdom_args args) throws org.apache.thrift.TException {
        get_kingdom_result result = new get_kingdom_result();
        try {
          result.success = iface.get_kingdom(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_domain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_domain_args> {
      public get_domain() {
        super("get_domain");
      }

      public get_domain_args getEmptyArgsInstance() {
        return new get_domain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_domain_result getResult(I iface, get_domain_args args) throws org.apache.thrift.TException {
        get_domain_result result = new get_domain_result();
        try {
          result.success = iface.get_domain(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_genetic_code<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_genetic_code_args> {
      public get_genetic_code() {
        super("get_genetic_code");
      }

      public get_genetic_code_args getEmptyArgsInstance() {
        return new get_genetic_code_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_genetic_code_result getResult(I iface, get_genetic_code_args args) throws org.apache.thrift.TException {
        get_genetic_code_result result = new get_genetic_code_result();
        try {
          result.success = iface.get_genetic_code(args.token, args.ref);
          result.setSuccessIsSet(true);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_aliases<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_aliases_args> {
      public get_aliases() {
        super("get_aliases");
      }

      public get_aliases_args getEmptyArgsInstance() {
        return new get_aliases_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_aliases_result getResult(I iface, get_aliases_args args) throws org.apache.thrift.TException {
        get_aliases_result result = new get_aliases_result();
        try {
          result.success = iface.get_aliases(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_info<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_info_args> {
      public get_info() {
        super("get_info");
      }

      public get_info_args getEmptyArgsInstance() {
        return new get_info_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_info_result getResult(I iface, get_info_args args) throws org.apache.thrift.TException {
        get_info_result result = new get_info_result();
        try {
          result.success = iface.get_info(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_history<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_history_args> {
      public get_history() {
        super("get_history");
      }

      public get_history_args getEmptyArgsInstance() {
        return new get_history_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_history_result getResult(I iface, get_history_args args) throws org.apache.thrift.TException {
        get_history_result result = new get_history_result();
        try {
          result.success = iface.get_history(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_provenance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_provenance_args> {
      public get_provenance() {
        super("get_provenance");
      }

      public get_provenance_args getEmptyArgsInstance() {
        return new get_provenance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_provenance_result getResult(I iface, get_provenance_args args) throws org.apache.thrift.TException {
        get_provenance_result result = new get_provenance_result();
        try {
          result.success = iface.get_provenance(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_id_args> {
      public get_id() {
        super("get_id");
      }

      public get_id_args getEmptyArgsInstance() {
        return new get_id_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_id_result getResult(I iface, get_id_args args) throws org.apache.thrift.TException {
        get_id_result result = new get_id_result();
        try {
          result.success = iface.get_id(args.token, args.ref);
          result.setSuccessIsSet(true);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_name<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_name_args> {
      public get_name() {
        super("get_name");
      }

      public get_name_args getEmptyArgsInstance() {
        return new get_name_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_name_result getResult(I iface, get_name_args args) throws org.apache.thrift.TException {
        get_name_result result = new get_name_result();
        try {
          result.success = iface.get_name(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

    public static class get_version<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_version_args> {
      public get_version() {
        super("get_version");
      }

      public get_version_args getEmptyArgsInstance() {
        return new get_version_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_version_result getResult(I iface, get_version_args args) throws org.apache.thrift.TException {
        get_version_result result = new get_version_result();
        try {
          result.success = iface.get_version(args.token, args.ref);
        } catch (ServiceException generic_exception) {
          result.generic_exception = generic_exception;
        } catch (AuthorizationException authorization_exception) {
          result.authorization_exception = authorization_exception;
        } catch (AuthenticationException authentication_exception) {
          result.authentication_exception = authentication_exception;
        } catch (ObjectReferenceException reference_exception) {
          result.reference_exception = reference_exception;
        } catch (AttributeException attribute_exception) {
          result.attribute_exception = attribute_exception;
        } catch (TypeException type_exception) {
          result.type_exception = type_exception;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("get_parent", new get_parent());
      processMap.put("get_children", new get_children());
      processMap.put("get_genome_annotations", new get_genome_annotations());
      processMap.put("get_scientific_lineage", new get_scientific_lineage());
      processMap.put("get_scientific_name", new get_scientific_name());
      processMap.put("get_taxonomic_id", new get_taxonomic_id());
      processMap.put("get_kingdom", new get_kingdom());
      processMap.put("get_domain", new get_domain());
      processMap.put("get_genetic_code", new get_genetic_code());
      processMap.put("get_aliases", new get_aliases());
      processMap.put("get_info", new get_info());
      processMap.put("get_history", new get_history());
      processMap.put("get_provenance", new get_provenance());
      processMap.put("get_id", new get_id());
      processMap.put("get_name", new get_name());
      processMap.put("get_version", new get_version());
      return processMap;
    }

    public static class get_parent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_parent_args, String> {
      public get_parent() {
        super("get_parent");
      }

      public get_parent_args getEmptyArgsInstance() {
        return new get_parent_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_parent_result result = new get_parent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_parent_result result = new get_parent_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_parent_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_parent(args.token, args.ref,resultHandler);
      }
    }

    public static class get_children<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_children_args, List<String>> {
      public get_children() {
        super("get_children");
      }

      public get_children_args getEmptyArgsInstance() {
        return new get_children_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            get_children_result result = new get_children_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_children_result result = new get_children_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_children_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.get_children(args.token, args.ref,resultHandler);
      }
    }

    public static class get_genome_annotations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_genome_annotations_args, List<String>> {
      public get_genome_annotations() {
        super("get_genome_annotations");
      }

      public get_genome_annotations_args getEmptyArgsInstance() {
        return new get_genome_annotations_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            get_genome_annotations_result result = new get_genome_annotations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_genome_annotations_result result = new get_genome_annotations_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_genome_annotations_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.get_genome_annotations(args.token, args.ref,resultHandler);
      }
    }

    public static class get_scientific_lineage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_scientific_lineage_args, List<String>> {
      public get_scientific_lineage() {
        super("get_scientific_lineage");
      }

      public get_scientific_lineage_args getEmptyArgsInstance() {
        return new get_scientific_lineage_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            get_scientific_lineage_result result = new get_scientific_lineage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_scientific_lineage_result result = new get_scientific_lineage_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_scientific_lineage_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.get_scientific_lineage(args.token, args.ref,resultHandler);
      }
    }

    public static class get_scientific_name<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_scientific_name_args, String> {
      public get_scientific_name() {
        super("get_scientific_name");
      }

      public get_scientific_name_args getEmptyArgsInstance() {
        return new get_scientific_name_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_scientific_name_result result = new get_scientific_name_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_scientific_name_result result = new get_scientific_name_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_scientific_name_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_scientific_name(args.token, args.ref,resultHandler);
      }
    }

    public static class get_taxonomic_id<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_taxonomic_id_args, Integer> {
      public get_taxonomic_id() {
        super("get_taxonomic_id");
      }

      public get_taxonomic_id_args getEmptyArgsInstance() {
        return new get_taxonomic_id_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            get_taxonomic_id_result result = new get_taxonomic_id_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_taxonomic_id_result result = new get_taxonomic_id_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_taxonomic_id_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.get_taxonomic_id(args.token, args.ref,resultHandler);
      }
    }

    public static class get_kingdom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_kingdom_args, String> {
      public get_kingdom() {
        super("get_kingdom");
      }

      public get_kingdom_args getEmptyArgsInstance() {
        return new get_kingdom_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_kingdom_result result = new get_kingdom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_kingdom_result result = new get_kingdom_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_kingdom_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_kingdom(args.token, args.ref,resultHandler);
      }
    }

    public static class get_domain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_domain_args, String> {
      public get_domain() {
        super("get_domain");
      }

      public get_domain_args getEmptyArgsInstance() {
        return new get_domain_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_domain_result result = new get_domain_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_domain_result result = new get_domain_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_domain_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_domain(args.token, args.ref,resultHandler);
      }
    }

    public static class get_genetic_code<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_genetic_code_args, Integer> {
      public get_genetic_code() {
        super("get_genetic_code");
      }

      public get_genetic_code_args getEmptyArgsInstance() {
        return new get_genetic_code_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            get_genetic_code_result result = new get_genetic_code_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_genetic_code_result result = new get_genetic_code_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_genetic_code_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.get_genetic_code(args.token, args.ref,resultHandler);
      }
    }

    public static class get_aliases<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_aliases_args, List<String>> {
      public get_aliases() {
        super("get_aliases");
      }

      public get_aliases_args getEmptyArgsInstance() {
        return new get_aliases_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            get_aliases_result result = new get_aliases_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_aliases_result result = new get_aliases_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_aliases_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.get_aliases(args.token, args.ref,resultHandler);
      }
    }

    public static class get_info<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_info_args, ObjectInfo> {
      public get_info() {
        super("get_info");
      }

      public get_info_args getEmptyArgsInstance() {
        return new get_info_args();
      }

      public AsyncMethodCallback<ObjectInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ObjectInfo>() { 
          public void onComplete(ObjectInfo o) {
            get_info_result result = new get_info_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_info_result result = new get_info_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_info_args args, org.apache.thrift.async.AsyncMethodCallback<ObjectInfo> resultHandler) throws TException {
        iface.get_info(args.token, args.ref,resultHandler);
      }
    }

    public static class get_history<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_history_args, List<ObjectInfo>> {
      public get_history() {
        super("get_history");
      }

      public get_history_args getEmptyArgsInstance() {
        return new get_history_args();
      }

      public AsyncMethodCallback<List<ObjectInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ObjectInfo>>() { 
          public void onComplete(List<ObjectInfo> o) {
            get_history_result result = new get_history_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_history_result result = new get_history_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_history_args args, org.apache.thrift.async.AsyncMethodCallback<List<ObjectInfo>> resultHandler) throws TException {
        iface.get_history(args.token, args.ref,resultHandler);
      }
    }

    public static class get_provenance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_provenance_args, List<ObjectProvenanceAction>> {
      public get_provenance() {
        super("get_provenance");
      }

      public get_provenance_args getEmptyArgsInstance() {
        return new get_provenance_args();
      }

      public AsyncMethodCallback<List<ObjectProvenanceAction>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ObjectProvenanceAction>>() { 
          public void onComplete(List<ObjectProvenanceAction> o) {
            get_provenance_result result = new get_provenance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_provenance_result result = new get_provenance_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_provenance_args args, org.apache.thrift.async.AsyncMethodCallback<List<ObjectProvenanceAction>> resultHandler) throws TException {
        iface.get_provenance(args.token, args.ref,resultHandler);
      }
    }

    public static class get_id<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_id_args, Long> {
      public get_id() {
        super("get_id");
      }

      public get_id_args getEmptyArgsInstance() {
        return new get_id_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            get_id_result result = new get_id_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_id_result result = new get_id_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_id_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.get_id(args.token, args.ref,resultHandler);
      }
    }

    public static class get_name<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_name_args, String> {
      public get_name() {
        super("get_name");
      }

      public get_name_args getEmptyArgsInstance() {
        return new get_name_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_name_result result = new get_name_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_name_result result = new get_name_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_name_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_name(args.token, args.ref,resultHandler);
      }
    }

    public static class get_version<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_version_args, String> {
      public get_version() {
        super("get_version");
      }

      public get_version_args getEmptyArgsInstance() {
        return new get_version_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            get_version_result result = new get_version_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_version_result result = new get_version_result();
            if (e instanceof ServiceException) {
                        result.generic_exception = (ServiceException) e;
                        result.setGeneric_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthorizationException) {
                        result.authorization_exception = (AuthorizationException) e;
                        result.setAuthorization_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AuthenticationException) {
                        result.authentication_exception = (AuthenticationException) e;
                        result.setAuthentication_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ObjectReferenceException) {
                        result.reference_exception = (ObjectReferenceException) e;
                        result.setReference_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof AttributeException) {
                        result.attribute_exception = (AttributeException) e;
                        result.setAttribute_exceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TypeException) {
                        result.type_exception = (TypeException) e;
                        result.setType_exceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_version_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.get_version(args.token, args.ref,resultHandler);
      }
    }

  }

  public static class get_parent_args implements org.apache.thrift.TBase<get_parent_args, get_parent_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_parent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_parent_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_parent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_parent_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_parent_args.class, metaDataMap);
    }

    public get_parent_args() {
    }

    public get_parent_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_parent_args(get_parent_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_parent_args deepCopy() {
      return new get_parent_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_parent_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_parent_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_parent_args)
        return this.equals((get_parent_args)that);
      return false;
    }

    public boolean equals(get_parent_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_parent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_parent_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_parent_argsStandardSchemeFactory implements SchemeFactory {
      public get_parent_argsStandardScheme getScheme() {
        return new get_parent_argsStandardScheme();
      }
    }

    private static class get_parent_argsStandardScheme extends StandardScheme<get_parent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_parent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_parent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_parent_argsTupleSchemeFactory implements SchemeFactory {
      public get_parent_argsTupleScheme getScheme() {
        return new get_parent_argsTupleScheme();
      }
    }

    private static class get_parent_argsTupleScheme extends TupleScheme<get_parent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_parent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_parent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_parent_result implements org.apache.thrift.TBase<get_parent_result, get_parent_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_parent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_parent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_parent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_parent_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_parent_result.class, metaDataMap);
    }

    public get_parent_result() {
    }

    public get_parent_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_parent_result(get_parent_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_parent_result deepCopy() {
      return new get_parent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_parent_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_parent_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_parent_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_parent_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_parent_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_parent_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_parent_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_parent_result)
        return this.equals((get_parent_result)that);
      return false;
    }

    public boolean equals(get_parent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_parent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_parent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_parent_resultStandardSchemeFactory implements SchemeFactory {
      public get_parent_resultStandardScheme getScheme() {
        return new get_parent_resultStandardScheme();
      }
    }

    private static class get_parent_resultStandardScheme extends StandardScheme<get_parent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_parent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_parent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_parent_resultTupleSchemeFactory implements SchemeFactory {
      public get_parent_resultTupleScheme getScheme() {
        return new get_parent_resultTupleScheme();
      }
    }

    private static class get_parent_resultTupleScheme extends TupleScheme<get_parent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_parent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_parent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_children_args implements org.apache.thrift.TBase<get_children_args, get_children_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_children_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_children_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_children_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_children_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_children_args.class, metaDataMap);
    }

    public get_children_args() {
    }

    public get_children_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_children_args(get_children_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_children_args deepCopy() {
      return new get_children_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_children_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_children_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_children_args)
        return this.equals((get_children_args)that);
      return false;
    }

    public boolean equals(get_children_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_children_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_children_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_children_argsStandardSchemeFactory implements SchemeFactory {
      public get_children_argsStandardScheme getScheme() {
        return new get_children_argsStandardScheme();
      }
    }

    private static class get_children_argsStandardScheme extends StandardScheme<get_children_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_children_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_children_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_children_argsTupleSchemeFactory implements SchemeFactory {
      public get_children_argsTupleScheme getScheme() {
        return new get_children_argsTupleScheme();
      }
    }

    private static class get_children_argsTupleScheme extends TupleScheme<get_children_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_children_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_children_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_children_result implements org.apache.thrift.TBase<get_children_result, get_children_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_children_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_children_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_children_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_children_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "ObjectReference"))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_children_result.class, metaDataMap);
    }

    public get_children_result() {
    }

    public get_children_result(
      List<String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_children_result(get_children_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success.size());
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_children_result deepCopy() {
      return new get_children_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_children_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_children_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_children_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_children_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_children_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_children_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_children_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_children_result)
        return this.equals((get_children_result)that);
      return false;
    }

    public boolean equals(get_children_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_children_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_children_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_children_resultStandardSchemeFactory implements SchemeFactory {
      public get_children_resultStandardScheme getScheme() {
        return new get_children_resultStandardScheme();
      }
    }

    private static class get_children_resultStandardScheme extends StandardScheme<get_children_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_children_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list76.size);
                  String _elem77;
                  for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                  {
                    _elem77 = iprot.readString();
                    struct.success.add(_elem77);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_children_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter79 : struct.success)
            {
              oprot.writeString(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_children_resultTupleSchemeFactory implements SchemeFactory {
      public get_children_resultTupleScheme getScheme() {
        return new get_children_resultTupleScheme();
      }
    }

    private static class get_children_resultTupleScheme extends TupleScheme<get_children_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_children_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter80 : struct.success)
            {
              oprot.writeString(_iter80);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_children_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list81.size);
            String _elem82;
            for (int _i83 = 0; _i83 < _list81.size; ++_i83)
            {
              _elem82 = iprot.readString();
              struct.success.add(_elem82);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_genome_annotations_args implements org.apache.thrift.TBase<get_genome_annotations_args, get_genome_annotations_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_genome_annotations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_genome_annotations_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_genome_annotations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_genome_annotations_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_genome_annotations_args.class, metaDataMap);
    }

    public get_genome_annotations_args() {
    }

    public get_genome_annotations_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_genome_annotations_args(get_genome_annotations_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_genome_annotations_args deepCopy() {
      return new get_genome_annotations_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_genome_annotations_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_genome_annotations_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_genome_annotations_args)
        return this.equals((get_genome_annotations_args)that);
      return false;
    }

    public boolean equals(get_genome_annotations_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_genome_annotations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_genome_annotations_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_genome_annotations_argsStandardSchemeFactory implements SchemeFactory {
      public get_genome_annotations_argsStandardScheme getScheme() {
        return new get_genome_annotations_argsStandardScheme();
      }
    }

    private static class get_genome_annotations_argsStandardScheme extends StandardScheme<get_genome_annotations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_genome_annotations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_genome_annotations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_genome_annotations_argsTupleSchemeFactory implements SchemeFactory {
      public get_genome_annotations_argsTupleScheme getScheme() {
        return new get_genome_annotations_argsTupleScheme();
      }
    }

    private static class get_genome_annotations_argsTupleScheme extends TupleScheme<get_genome_annotations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_genome_annotations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_genome_annotations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_genome_annotations_result implements org.apache.thrift.TBase<get_genome_annotations_result, get_genome_annotations_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_genome_annotations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_genome_annotations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_genome_annotations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_genome_annotations_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "ObjectReference"))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_genome_annotations_result.class, metaDataMap);
    }

    public get_genome_annotations_result() {
    }

    public get_genome_annotations_result(
      List<String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_genome_annotations_result(get_genome_annotations_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success.size());
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_genome_annotations_result deepCopy() {
      return new get_genome_annotations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_genome_annotations_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_genome_annotations_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_genome_annotations_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_genome_annotations_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_genome_annotations_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_genome_annotations_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_genome_annotations_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_genome_annotations_result)
        return this.equals((get_genome_annotations_result)that);
      return false;
    }

    public boolean equals(get_genome_annotations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_genome_annotations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_genome_annotations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_genome_annotations_resultStandardSchemeFactory implements SchemeFactory {
      public get_genome_annotations_resultStandardScheme getScheme() {
        return new get_genome_annotations_resultStandardScheme();
      }
    }

    private static class get_genome_annotations_resultStandardScheme extends StandardScheme<get_genome_annotations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_genome_annotations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list84.size);
                  String _elem85;
                  for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                  {
                    _elem85 = iprot.readString();
                    struct.success.add(_elem85);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_genome_annotations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter87 : struct.success)
            {
              oprot.writeString(_iter87);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_genome_annotations_resultTupleSchemeFactory implements SchemeFactory {
      public get_genome_annotations_resultTupleScheme getScheme() {
        return new get_genome_annotations_resultTupleScheme();
      }
    }

    private static class get_genome_annotations_resultTupleScheme extends TupleScheme<get_genome_annotations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_genome_annotations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter88 : struct.success)
            {
              oprot.writeString(_iter88);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_genome_annotations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list89.size);
            String _elem90;
            for (int _i91 = 0; _i91 < _list89.size; ++_i91)
            {
              _elem90 = iprot.readString();
              struct.success.add(_elem90);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_scientific_lineage_args implements org.apache.thrift.TBase<get_scientific_lineage_args, get_scientific_lineage_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_scientific_lineage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_scientific_lineage_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_scientific_lineage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_scientific_lineage_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_scientific_lineage_args.class, metaDataMap);
    }

    public get_scientific_lineage_args() {
    }

    public get_scientific_lineage_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_scientific_lineage_args(get_scientific_lineage_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_scientific_lineage_args deepCopy() {
      return new get_scientific_lineage_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_scientific_lineage_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_scientific_lineage_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_scientific_lineage_args)
        return this.equals((get_scientific_lineage_args)that);
      return false;
    }

    public boolean equals(get_scientific_lineage_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_scientific_lineage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_scientific_lineage_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_scientific_lineage_argsStandardSchemeFactory implements SchemeFactory {
      public get_scientific_lineage_argsStandardScheme getScheme() {
        return new get_scientific_lineage_argsStandardScheme();
      }
    }

    private static class get_scientific_lineage_argsStandardScheme extends StandardScheme<get_scientific_lineage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_scientific_lineage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_scientific_lineage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_scientific_lineage_argsTupleSchemeFactory implements SchemeFactory {
      public get_scientific_lineage_argsTupleScheme getScheme() {
        return new get_scientific_lineage_argsTupleScheme();
      }
    }

    private static class get_scientific_lineage_argsTupleScheme extends TupleScheme<get_scientific_lineage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_scientific_lineage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_scientific_lineage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_scientific_lineage_result implements org.apache.thrift.TBase<get_scientific_lineage_result, get_scientific_lineage_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_scientific_lineage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_scientific_lineage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_scientific_lineage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_scientific_lineage_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_scientific_lineage_result.class, metaDataMap);
    }

    public get_scientific_lineage_result() {
    }

    public get_scientific_lineage_result(
      List<String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_scientific_lineage_result(get_scientific_lineage_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_scientific_lineage_result deepCopy() {
      return new get_scientific_lineage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_scientific_lineage_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_scientific_lineage_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_scientific_lineage_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_scientific_lineage_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_scientific_lineage_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_scientific_lineage_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_scientific_lineage_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_scientific_lineage_result)
        return this.equals((get_scientific_lineage_result)that);
      return false;
    }

    public boolean equals(get_scientific_lineage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_scientific_lineage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_scientific_lineage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_scientific_lineage_resultStandardSchemeFactory implements SchemeFactory {
      public get_scientific_lineage_resultStandardScheme getScheme() {
        return new get_scientific_lineage_resultStandardScheme();
      }
    }

    private static class get_scientific_lineage_resultStandardScheme extends StandardScheme<get_scientific_lineage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_scientific_lineage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list92.size);
                  String _elem93;
                  for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                  {
                    _elem93 = iprot.readString();
                    struct.success.add(_elem93);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_scientific_lineage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter95 : struct.success)
            {
              oprot.writeString(_iter95);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_scientific_lineage_resultTupleSchemeFactory implements SchemeFactory {
      public get_scientific_lineage_resultTupleScheme getScheme() {
        return new get_scientific_lineage_resultTupleScheme();
      }
    }

    private static class get_scientific_lineage_resultTupleScheme extends TupleScheme<get_scientific_lineage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_scientific_lineage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter96 : struct.success)
            {
              oprot.writeString(_iter96);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_scientific_lineage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list97.size);
            String _elem98;
            for (int _i99 = 0; _i99 < _list97.size; ++_i99)
            {
              _elem98 = iprot.readString();
              struct.success.add(_elem98);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_scientific_name_args implements org.apache.thrift.TBase<get_scientific_name_args, get_scientific_name_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_scientific_name_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_scientific_name_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_scientific_name_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_scientific_name_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_scientific_name_args.class, metaDataMap);
    }

    public get_scientific_name_args() {
    }

    public get_scientific_name_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_scientific_name_args(get_scientific_name_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_scientific_name_args deepCopy() {
      return new get_scientific_name_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_scientific_name_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_scientific_name_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_scientific_name_args)
        return this.equals((get_scientific_name_args)that);
      return false;
    }

    public boolean equals(get_scientific_name_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_scientific_name_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_scientific_name_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_scientific_name_argsStandardSchemeFactory implements SchemeFactory {
      public get_scientific_name_argsStandardScheme getScheme() {
        return new get_scientific_name_argsStandardScheme();
      }
    }

    private static class get_scientific_name_argsStandardScheme extends StandardScheme<get_scientific_name_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_scientific_name_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_scientific_name_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_scientific_name_argsTupleSchemeFactory implements SchemeFactory {
      public get_scientific_name_argsTupleScheme getScheme() {
        return new get_scientific_name_argsTupleScheme();
      }
    }

    private static class get_scientific_name_argsTupleScheme extends TupleScheme<get_scientific_name_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_scientific_name_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_scientific_name_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_scientific_name_result implements org.apache.thrift.TBase<get_scientific_name_result, get_scientific_name_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_scientific_name_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_scientific_name_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_scientific_name_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_scientific_name_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_scientific_name_result.class, metaDataMap);
    }

    public get_scientific_name_result() {
    }

    public get_scientific_name_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_scientific_name_result(get_scientific_name_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_scientific_name_result deepCopy() {
      return new get_scientific_name_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_scientific_name_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_scientific_name_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_scientific_name_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_scientific_name_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_scientific_name_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_scientific_name_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_scientific_name_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_scientific_name_result)
        return this.equals((get_scientific_name_result)that);
      return false;
    }

    public boolean equals(get_scientific_name_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_scientific_name_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_scientific_name_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_scientific_name_resultStandardSchemeFactory implements SchemeFactory {
      public get_scientific_name_resultStandardScheme getScheme() {
        return new get_scientific_name_resultStandardScheme();
      }
    }

    private static class get_scientific_name_resultStandardScheme extends StandardScheme<get_scientific_name_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_scientific_name_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_scientific_name_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_scientific_name_resultTupleSchemeFactory implements SchemeFactory {
      public get_scientific_name_resultTupleScheme getScheme() {
        return new get_scientific_name_resultTupleScheme();
      }
    }

    private static class get_scientific_name_resultTupleScheme extends TupleScheme<get_scientific_name_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_scientific_name_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_scientific_name_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_taxonomic_id_args implements org.apache.thrift.TBase<get_taxonomic_id_args, get_taxonomic_id_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_taxonomic_id_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_taxonomic_id_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_taxonomic_id_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_taxonomic_id_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_taxonomic_id_args.class, metaDataMap);
    }

    public get_taxonomic_id_args() {
    }

    public get_taxonomic_id_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_taxonomic_id_args(get_taxonomic_id_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_taxonomic_id_args deepCopy() {
      return new get_taxonomic_id_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_taxonomic_id_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_taxonomic_id_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_taxonomic_id_args)
        return this.equals((get_taxonomic_id_args)that);
      return false;
    }

    public boolean equals(get_taxonomic_id_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_taxonomic_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_taxonomic_id_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_taxonomic_id_argsStandardSchemeFactory implements SchemeFactory {
      public get_taxonomic_id_argsStandardScheme getScheme() {
        return new get_taxonomic_id_argsStandardScheme();
      }
    }

    private static class get_taxonomic_id_argsStandardScheme extends StandardScheme<get_taxonomic_id_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_taxonomic_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_taxonomic_id_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_taxonomic_id_argsTupleSchemeFactory implements SchemeFactory {
      public get_taxonomic_id_argsTupleScheme getScheme() {
        return new get_taxonomic_id_argsTupleScheme();
      }
    }

    private static class get_taxonomic_id_argsTupleScheme extends TupleScheme<get_taxonomic_id_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_taxonomic_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_taxonomic_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_taxonomic_id_result implements org.apache.thrift.TBase<get_taxonomic_id_result, get_taxonomic_id_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_taxonomic_id_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_taxonomic_id_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_taxonomic_id_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_taxonomic_id_resultTupleSchemeFactory());
    }

    public int success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_taxonomic_id_result.class, metaDataMap);
    }

    public get_taxonomic_id_result() {
    }

    public get_taxonomic_id_result(
      int success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_taxonomic_id_result(get_taxonomic_id_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_taxonomic_id_result deepCopy() {
      return new get_taxonomic_id_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public get_taxonomic_id_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_taxonomic_id_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_taxonomic_id_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_taxonomic_id_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_taxonomic_id_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_taxonomic_id_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_taxonomic_id_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_taxonomic_id_result)
        return this.equals((get_taxonomic_id_result)that);
      return false;
    }

    public boolean equals(get_taxonomic_id_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_taxonomic_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_taxonomic_id_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_taxonomic_id_resultStandardSchemeFactory implements SchemeFactory {
      public get_taxonomic_id_resultStandardScheme getScheme() {
        return new get_taxonomic_id_resultStandardScheme();
      }
    }

    private static class get_taxonomic_id_resultStandardScheme extends StandardScheme<get_taxonomic_id_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_taxonomic_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_taxonomic_id_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_taxonomic_id_resultTupleSchemeFactory implements SchemeFactory {
      public get_taxonomic_id_resultTupleScheme getScheme() {
        return new get_taxonomic_id_resultTupleScheme();
      }
    }

    private static class get_taxonomic_id_resultTupleScheme extends TupleScheme<get_taxonomic_id_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_taxonomic_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_taxonomic_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_kingdom_args implements org.apache.thrift.TBase<get_kingdom_args, get_kingdom_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_kingdom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_kingdom_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_kingdom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_kingdom_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_kingdom_args.class, metaDataMap);
    }

    public get_kingdom_args() {
    }

    public get_kingdom_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_kingdom_args(get_kingdom_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_kingdom_args deepCopy() {
      return new get_kingdom_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_kingdom_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_kingdom_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_kingdom_args)
        return this.equals((get_kingdom_args)that);
      return false;
    }

    public boolean equals(get_kingdom_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_kingdom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_kingdom_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_kingdom_argsStandardSchemeFactory implements SchemeFactory {
      public get_kingdom_argsStandardScheme getScheme() {
        return new get_kingdom_argsStandardScheme();
      }
    }

    private static class get_kingdom_argsStandardScheme extends StandardScheme<get_kingdom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_kingdom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_kingdom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_kingdom_argsTupleSchemeFactory implements SchemeFactory {
      public get_kingdom_argsTupleScheme getScheme() {
        return new get_kingdom_argsTupleScheme();
      }
    }

    private static class get_kingdom_argsTupleScheme extends TupleScheme<get_kingdom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_kingdom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_kingdom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_kingdom_result implements org.apache.thrift.TBase<get_kingdom_result, get_kingdom_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_kingdom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_kingdom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_kingdom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_kingdom_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_kingdom_result.class, metaDataMap);
    }

    public get_kingdom_result() {
    }

    public get_kingdom_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_kingdom_result(get_kingdom_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_kingdom_result deepCopy() {
      return new get_kingdom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_kingdom_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_kingdom_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_kingdom_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_kingdom_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_kingdom_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_kingdom_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_kingdom_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_kingdom_result)
        return this.equals((get_kingdom_result)that);
      return false;
    }

    public boolean equals(get_kingdom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_kingdom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_kingdom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_kingdom_resultStandardSchemeFactory implements SchemeFactory {
      public get_kingdom_resultStandardScheme getScheme() {
        return new get_kingdom_resultStandardScheme();
      }
    }

    private static class get_kingdom_resultStandardScheme extends StandardScheme<get_kingdom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_kingdom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_kingdom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_kingdom_resultTupleSchemeFactory implements SchemeFactory {
      public get_kingdom_resultTupleScheme getScheme() {
        return new get_kingdom_resultTupleScheme();
      }
    }

    private static class get_kingdom_resultTupleScheme extends TupleScheme<get_kingdom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_kingdom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_kingdom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_domain_args implements org.apache.thrift.TBase<get_domain_args, get_domain_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_domain_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_domain_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_domain_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_domain_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_domain_args.class, metaDataMap);
    }

    public get_domain_args() {
    }

    public get_domain_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_domain_args(get_domain_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_domain_args deepCopy() {
      return new get_domain_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_domain_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_domain_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_domain_args)
        return this.equals((get_domain_args)that);
      return false;
    }

    public boolean equals(get_domain_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_domain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_domain_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_domain_argsStandardSchemeFactory implements SchemeFactory {
      public get_domain_argsStandardScheme getScheme() {
        return new get_domain_argsStandardScheme();
      }
    }

    private static class get_domain_argsStandardScheme extends StandardScheme<get_domain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_domain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_domain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_domain_argsTupleSchemeFactory implements SchemeFactory {
      public get_domain_argsTupleScheme getScheme() {
        return new get_domain_argsTupleScheme();
      }
    }

    private static class get_domain_argsTupleScheme extends TupleScheme<get_domain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_domain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_domain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_domain_result implements org.apache.thrift.TBase<get_domain_result, get_domain_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_domain_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_domain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_domain_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_domain_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_domain_result.class, metaDataMap);
    }

    public get_domain_result() {
    }

    public get_domain_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_domain_result(get_domain_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_domain_result deepCopy() {
      return new get_domain_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_domain_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_domain_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_domain_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_domain_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_domain_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_domain_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_domain_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_domain_result)
        return this.equals((get_domain_result)that);
      return false;
    }

    public boolean equals(get_domain_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_domain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_domain_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_domain_resultStandardSchemeFactory implements SchemeFactory {
      public get_domain_resultStandardScheme getScheme() {
        return new get_domain_resultStandardScheme();
      }
    }

    private static class get_domain_resultStandardScheme extends StandardScheme<get_domain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_domain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_domain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_domain_resultTupleSchemeFactory implements SchemeFactory {
      public get_domain_resultTupleScheme getScheme() {
        return new get_domain_resultTupleScheme();
      }
    }

    private static class get_domain_resultTupleScheme extends TupleScheme<get_domain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_domain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_domain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_genetic_code_args implements org.apache.thrift.TBase<get_genetic_code_args, get_genetic_code_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_genetic_code_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_genetic_code_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_genetic_code_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_genetic_code_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_genetic_code_args.class, metaDataMap);
    }

    public get_genetic_code_args() {
    }

    public get_genetic_code_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_genetic_code_args(get_genetic_code_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_genetic_code_args deepCopy() {
      return new get_genetic_code_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_genetic_code_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_genetic_code_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_genetic_code_args)
        return this.equals((get_genetic_code_args)that);
      return false;
    }

    public boolean equals(get_genetic_code_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_genetic_code_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_genetic_code_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_genetic_code_argsStandardSchemeFactory implements SchemeFactory {
      public get_genetic_code_argsStandardScheme getScheme() {
        return new get_genetic_code_argsStandardScheme();
      }
    }

    private static class get_genetic_code_argsStandardScheme extends StandardScheme<get_genetic_code_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_genetic_code_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_genetic_code_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_genetic_code_argsTupleSchemeFactory implements SchemeFactory {
      public get_genetic_code_argsTupleScheme getScheme() {
        return new get_genetic_code_argsTupleScheme();
      }
    }

    private static class get_genetic_code_argsTupleScheme extends TupleScheme<get_genetic_code_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_genetic_code_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_genetic_code_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_genetic_code_result implements org.apache.thrift.TBase<get_genetic_code_result, get_genetic_code_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_genetic_code_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_genetic_code_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_genetic_code_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_genetic_code_resultTupleSchemeFactory());
    }

    public int success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_genetic_code_result.class, metaDataMap);
    }

    public get_genetic_code_result() {
    }

    public get_genetic_code_result(
      int success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_genetic_code_result(get_genetic_code_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_genetic_code_result deepCopy() {
      return new get_genetic_code_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public get_genetic_code_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_genetic_code_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_genetic_code_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_genetic_code_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_genetic_code_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_genetic_code_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_genetic_code_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_genetic_code_result)
        return this.equals((get_genetic_code_result)that);
      return false;
    }

    public boolean equals(get_genetic_code_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_genetic_code_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_genetic_code_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_genetic_code_resultStandardSchemeFactory implements SchemeFactory {
      public get_genetic_code_resultStandardScheme getScheme() {
        return new get_genetic_code_resultStandardScheme();
      }
    }

    private static class get_genetic_code_resultStandardScheme extends StandardScheme<get_genetic_code_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_genetic_code_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_genetic_code_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_genetic_code_resultTupleSchemeFactory implements SchemeFactory {
      public get_genetic_code_resultTupleScheme getScheme() {
        return new get_genetic_code_resultTupleScheme();
      }
    }

    private static class get_genetic_code_resultTupleScheme extends TupleScheme<get_genetic_code_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_genetic_code_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_genetic_code_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_aliases_args implements org.apache.thrift.TBase<get_aliases_args, get_aliases_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_aliases_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_aliases_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_aliases_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_aliases_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_aliases_args.class, metaDataMap);
    }

    public get_aliases_args() {
    }

    public get_aliases_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_aliases_args(get_aliases_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_aliases_args deepCopy() {
      return new get_aliases_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_aliases_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_aliases_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_aliases_args)
        return this.equals((get_aliases_args)that);
      return false;
    }

    public boolean equals(get_aliases_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_aliases_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_aliases_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_aliases_argsStandardSchemeFactory implements SchemeFactory {
      public get_aliases_argsStandardScheme getScheme() {
        return new get_aliases_argsStandardScheme();
      }
    }

    private static class get_aliases_argsStandardScheme extends StandardScheme<get_aliases_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_aliases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_aliases_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_aliases_argsTupleSchemeFactory implements SchemeFactory {
      public get_aliases_argsTupleScheme getScheme() {
        return new get_aliases_argsTupleScheme();
      }
    }

    private static class get_aliases_argsTupleScheme extends TupleScheme<get_aliases_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_aliases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_aliases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_aliases_result implements org.apache.thrift.TBase<get_aliases_result, get_aliases_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_aliases_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_aliases_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_aliases_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_aliases_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_aliases_result.class, metaDataMap);
    }

    public get_aliases_result() {
    }

    public get_aliases_result(
      List<String> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_aliases_result(get_aliases_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_aliases_result deepCopy() {
      return new get_aliases_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_aliases_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_aliases_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_aliases_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_aliases_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_aliases_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_aliases_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_aliases_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_aliases_result)
        return this.equals((get_aliases_result)that);
      return false;
    }

    public boolean equals(get_aliases_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_aliases_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_aliases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_aliases_resultStandardSchemeFactory implements SchemeFactory {
      public get_aliases_resultStandardScheme getScheme() {
        return new get_aliases_resultStandardScheme();
      }
    }

    private static class get_aliases_resultStandardScheme extends StandardScheme<get_aliases_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_aliases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list100.size);
                  String _elem101;
                  for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                  {
                    _elem101 = iprot.readString();
                    struct.success.add(_elem101);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_aliases_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter103 : struct.success)
            {
              oprot.writeString(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_aliases_resultTupleSchemeFactory implements SchemeFactory {
      public get_aliases_resultTupleScheme getScheme() {
        return new get_aliases_resultTupleScheme();
      }
    }

    private static class get_aliases_resultTupleScheme extends TupleScheme<get_aliases_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_aliases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter104 : struct.success)
            {
              oprot.writeString(_iter104);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_aliases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list105.size);
            String _elem106;
            for (int _i107 = 0; _i107 < _list105.size; ++_i107)
            {
              _elem106 = iprot.readString();
              struct.success.add(_elem106);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_info_args implements org.apache.thrift.TBase<get_info_args, get_info_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_info_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_info_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_info_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_info_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_info_args.class, metaDataMap);
    }

    public get_info_args() {
    }

    public get_info_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_info_args(get_info_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_info_args deepCopy() {
      return new get_info_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_info_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_info_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_info_args)
        return this.equals((get_info_args)that);
      return false;
    }

    public boolean equals(get_info_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_info_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_info_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_info_argsStandardSchemeFactory implements SchemeFactory {
      public get_info_argsStandardScheme getScheme() {
        return new get_info_argsStandardScheme();
      }
    }

    private static class get_info_argsStandardScheme extends StandardScheme<get_info_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_info_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_info_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_info_argsTupleSchemeFactory implements SchemeFactory {
      public get_info_argsTupleScheme getScheme() {
        return new get_info_argsTupleScheme();
      }
    }

    private static class get_info_argsTupleScheme extends TupleScheme<get_info_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_info_result implements org.apache.thrift.TBase<get_info_result, get_info_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_info_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_info_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_info_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_info_resultTupleSchemeFactory());
    }

    public ObjectInfo success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectInfo.class)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_info_result.class, metaDataMap);
    }

    public get_info_result() {
    }

    public get_info_result(
      ObjectInfo success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_info_result(get_info_result other) {
      if (other.isSetSuccess()) {
        this.success = new ObjectInfo(other.success);
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_info_result deepCopy() {
      return new get_info_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public ObjectInfo getSuccess() {
      return this.success;
    }

    public get_info_result setSuccess(ObjectInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_info_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_info_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_info_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_info_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_info_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_info_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ObjectInfo)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_info_result)
        return this.equals((get_info_result)that);
      return false;
    }

    public boolean equals(get_info_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_info_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_info_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_info_resultStandardSchemeFactory implements SchemeFactory {
      public get_info_resultStandardScheme getScheme() {
        return new get_info_resultStandardScheme();
      }
    }

    private static class get_info_resultStandardScheme extends StandardScheme<get_info_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_info_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ObjectInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_info_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_info_resultTupleSchemeFactory implements SchemeFactory {
      public get_info_resultTupleScheme getScheme() {
        return new get_info_resultTupleScheme();
      }
    }

    private static class get_info_resultTupleScheme extends TupleScheme<get_info_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = new ObjectInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_history_args implements org.apache.thrift.TBase<get_history_args, get_history_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_history_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_history_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_history_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_history_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_history_args.class, metaDataMap);
    }

    public get_history_args() {
    }

    public get_history_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_history_args(get_history_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_history_args deepCopy() {
      return new get_history_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_history_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_history_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_history_args)
        return this.equals((get_history_args)that);
      return false;
    }

    public boolean equals(get_history_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_history_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_history_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_history_argsStandardSchemeFactory implements SchemeFactory {
      public get_history_argsStandardScheme getScheme() {
        return new get_history_argsStandardScheme();
      }
    }

    private static class get_history_argsStandardScheme extends StandardScheme<get_history_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_history_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_history_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_history_argsTupleSchemeFactory implements SchemeFactory {
      public get_history_argsTupleScheme getScheme() {
        return new get_history_argsTupleScheme();
      }
    }

    private static class get_history_argsTupleScheme extends TupleScheme<get_history_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_history_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_history_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_history_result implements org.apache.thrift.TBase<get_history_result, get_history_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_history_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_history_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_history_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_history_resultTupleSchemeFactory());
    }

    public List<ObjectInfo> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ObjectHistory")));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_history_result.class, metaDataMap);
    }

    public get_history_result() {
    }

    public get_history_result(
      List<ObjectInfo> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_history_result(get_history_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_history_result deepCopy() {
      return new get_history_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ObjectInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ObjectInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<ObjectInfo>();
      }
      this.success.add(elem);
    }

    public List<ObjectInfo> getSuccess() {
      return this.success;
    }

    public get_history_result setSuccess(List<ObjectInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_history_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_history_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_history_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_history_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_history_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_history_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ObjectInfo>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_history_result)
        return this.equals((get_history_result)that);
      return false;
    }

    public boolean equals(get_history_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_history_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_history_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_history_resultStandardSchemeFactory implements SchemeFactory {
      public get_history_resultStandardScheme getScheme() {
        return new get_history_resultStandardScheme();
      }
    }

    private static class get_history_resultStandardScheme extends StandardScheme<get_history_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_history_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                  struct.success = new ArrayList<ObjectInfo>(_list108.size);
                  ObjectInfo _elem109;
                  for (int _i110 = 0; _i110 < _list108.size; ++_i110)
                  {
                    _elem109 = new ObjectInfo();
                    _elem109.read(iprot);
                    struct.success.add(_elem109);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_history_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ObjectInfo _iter111 : struct.success)
            {
              _iter111.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_history_resultTupleSchemeFactory implements SchemeFactory {
      public get_history_resultTupleScheme getScheme() {
        return new get_history_resultTupleScheme();
      }
    }

    private static class get_history_resultTupleScheme extends TupleScheme<get_history_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_history_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ObjectInfo _iter112 : struct.success)
            {
              _iter112.write(oprot);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_history_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ObjectInfo>(_list113.size);
            ObjectInfo _elem114;
            for (int _i115 = 0; _i115 < _list113.size; ++_i115)
            {
              _elem114 = new ObjectInfo();
              _elem114.read(iprot);
              struct.success.add(_elem114);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_provenance_args implements org.apache.thrift.TBase<get_provenance_args, get_provenance_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_provenance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_provenance_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_provenance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_provenance_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_provenance_args.class, metaDataMap);
    }

    public get_provenance_args() {
    }

    public get_provenance_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_provenance_args(get_provenance_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_provenance_args deepCopy() {
      return new get_provenance_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_provenance_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_provenance_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_provenance_args)
        return this.equals((get_provenance_args)that);
      return false;
    }

    public boolean equals(get_provenance_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_provenance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_provenance_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_provenance_argsStandardSchemeFactory implements SchemeFactory {
      public get_provenance_argsStandardScheme getScheme() {
        return new get_provenance_argsStandardScheme();
      }
    }

    private static class get_provenance_argsStandardScheme extends StandardScheme<get_provenance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_provenance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_provenance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_provenance_argsTupleSchemeFactory implements SchemeFactory {
      public get_provenance_argsTupleScheme getScheme() {
        return new get_provenance_argsTupleScheme();
      }
    }

    private static class get_provenance_argsTupleScheme extends TupleScheme<get_provenance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_provenance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_provenance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_provenance_result implements org.apache.thrift.TBase<get_provenance_result, get_provenance_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_provenance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_provenance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_provenance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_provenance_resultTupleSchemeFactory());
    }

    public List<ObjectProvenanceAction> success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "ObjectProvenance")));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_provenance_result.class, metaDataMap);
    }

    public get_provenance_result() {
    }

    public get_provenance_result(
      List<ObjectProvenanceAction> success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_provenance_result(get_provenance_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_provenance_result deepCopy() {
      return new get_provenance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ObjectProvenanceAction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ObjectProvenanceAction elem) {
      if (this.success == null) {
        this.success = new ArrayList<ObjectProvenanceAction>();
      }
      this.success.add(elem);
    }

    public List<ObjectProvenanceAction> getSuccess() {
      return this.success;
    }

    public get_provenance_result setSuccess(List<ObjectProvenanceAction> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_provenance_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_provenance_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_provenance_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_provenance_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_provenance_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_provenance_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ObjectProvenanceAction>)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_provenance_result)
        return this.equals((get_provenance_result)that);
      return false;
    }

    public boolean equals(get_provenance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_provenance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_provenance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_provenance_resultStandardSchemeFactory implements SchemeFactory {
      public get_provenance_resultStandardScheme getScheme() {
        return new get_provenance_resultStandardScheme();
      }
    }

    private static class get_provenance_resultStandardScheme extends StandardScheme<get_provenance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_provenance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list116 = iprot.readListBegin();
                  struct.success = new ArrayList<ObjectProvenanceAction>(_list116.size);
                  ObjectProvenanceAction _elem117;
                  for (int _i118 = 0; _i118 < _list116.size; ++_i118)
                  {
                    _elem117 = new ObjectProvenanceAction();
                    _elem117.read(iprot);
                    struct.success.add(_elem117);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_provenance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ObjectProvenanceAction _iter119 : struct.success)
            {
              _iter119.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_provenance_resultTupleSchemeFactory implements SchemeFactory {
      public get_provenance_resultTupleScheme getScheme() {
        return new get_provenance_resultTupleScheme();
      }
    }

    private static class get_provenance_resultTupleScheme extends TupleScheme<get_provenance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_provenance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ObjectProvenanceAction _iter120 : struct.success)
            {
              _iter120.write(oprot);
            }
          }
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_provenance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ObjectProvenanceAction>(_list121.size);
            ObjectProvenanceAction _elem122;
            for (int _i123 = 0; _i123 < _list121.size; ++_i123)
            {
              _elem122 = new ObjectProvenanceAction();
              _elem122.read(iprot);
              struct.success.add(_elem122);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_id_args implements org.apache.thrift.TBase<get_id_args, get_id_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_id_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_id_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_id_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_id_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_id_args.class, metaDataMap);
    }

    public get_id_args() {
    }

    public get_id_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_id_args(get_id_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_id_args deepCopy() {
      return new get_id_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_id_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_id_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_id_args)
        return this.equals((get_id_args)that);
      return false;
    }

    public boolean equals(get_id_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_id_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_id_argsStandardSchemeFactory implements SchemeFactory {
      public get_id_argsStandardScheme getScheme() {
        return new get_id_argsStandardScheme();
      }
    }

    private static class get_id_argsStandardScheme extends StandardScheme<get_id_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_id_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_id_argsTupleSchemeFactory implements SchemeFactory {
      public get_id_argsTupleScheme getScheme() {
        return new get_id_argsTupleScheme();
      }
    }

    private static class get_id_argsTupleScheme extends TupleScheme<get_id_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_id_result implements org.apache.thrift.TBase<get_id_result, get_id_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_id_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_id_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_id_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_id_resultTupleSchemeFactory());
    }

    public long success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_id_result.class, metaDataMap);
    }

    public get_id_result() {
    }

    public get_id_result(
      long success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_id_result(get_id_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_id_result deepCopy() {
      return new get_id_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public get_id_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_id_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_id_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_id_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_id_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_id_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_id_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_id_result)
        return this.equals((get_id_result)that);
      return false;
    }

    public boolean equals(get_id_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_id_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_id_resultStandardSchemeFactory implements SchemeFactory {
      public get_id_resultStandardScheme getScheme() {
        return new get_id_resultStandardScheme();
      }
    }

    private static class get_id_resultStandardScheme extends StandardScheme<get_id_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_id_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_id_resultTupleSchemeFactory implements SchemeFactory {
      public get_id_resultTupleScheme getScheme() {
        return new get_id_resultTupleScheme();
      }
    }

    private static class get_id_resultTupleScheme extends TupleScheme<get_id_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_name_args implements org.apache.thrift.TBase<get_name_args, get_name_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_name_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_name_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_name_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_name_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_name_args.class, metaDataMap);
    }

    public get_name_args() {
    }

    public get_name_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_name_args(get_name_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_name_args deepCopy() {
      return new get_name_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_name_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_name_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_name_args)
        return this.equals((get_name_args)that);
      return false;
    }

    public boolean equals(get_name_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_name_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_name_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_name_argsStandardSchemeFactory implements SchemeFactory {
      public get_name_argsStandardScheme getScheme() {
        return new get_name_argsStandardScheme();
      }
    }

    private static class get_name_argsStandardScheme extends StandardScheme<get_name_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_name_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_name_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_name_argsTupleSchemeFactory implements SchemeFactory {
      public get_name_argsTupleScheme getScheme() {
        return new get_name_argsTupleScheme();
      }
    }

    private static class get_name_argsTupleScheme extends TupleScheme<get_name_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_name_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_name_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_name_result implements org.apache.thrift.TBase<get_name_result, get_name_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_name_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_name_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_name_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_name_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_name_result.class, metaDataMap);
    }

    public get_name_result() {
    }

    public get_name_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_name_result(get_name_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_name_result deepCopy() {
      return new get_name_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_name_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_name_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_name_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_name_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_name_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_name_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_name_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_name_result)
        return this.equals((get_name_result)that);
      return false;
    }

    public boolean equals(get_name_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_name_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_name_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_name_resultStandardSchemeFactory implements SchemeFactory {
      public get_name_resultStandardScheme getScheme() {
        return new get_name_resultStandardScheme();
      }
    }

    private static class get_name_resultStandardScheme extends StandardScheme<get_name_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_name_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_name_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_name_resultTupleSchemeFactory implements SchemeFactory {
      public get_name_resultTupleScheme getScheme() {
        return new get_name_resultTupleScheme();
      }
    }

    private static class get_name_resultTupleScheme extends TupleScheme<get_name_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_name_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_name_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

  public static class get_version_args implements org.apache.thrift.TBase<get_version_args, get_version_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_version_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_version_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_FIELD_DESC = new org.apache.thrift.protocol.TField("ref", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_version_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_version_argsTupleSchemeFactory());
    }

    public String token; // required
    public String ref; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      REF((short)2, "ref");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // REF
            return REF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF, new org.apache.thrift.meta_data.FieldMetaData("ref", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ObjectReference")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_version_args.class, metaDataMap);
    }

    public get_version_args() {
    }

    public get_version_args(
      String token,
      String ref)
    {
      this();
      this.token = token;
      this.ref = ref;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_version_args(get_version_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetRef()) {
        this.ref = other.ref;
      }
    }

    public get_version_args deepCopy() {
      return new get_version_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ref = null;
    }

    public String getToken() {
      return this.token;
    }

    public get_version_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getRef() {
      return this.ref;
    }

    public get_version_args setRef(String ref) {
      this.ref = ref;
      return this;
    }

    public void unsetRef() {
      this.ref = null;
    }

    /** Returns true if field ref is set (has been assigned a value) and false otherwise */
    public boolean isSetRef() {
      return this.ref != null;
    }

    public void setRefIsSet(boolean value) {
      if (!value) {
        this.ref = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case REF:
        if (value == null) {
          unsetRef();
        } else {
          setRef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case REF:
        return getRef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case REF:
        return isSetRef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_version_args)
        return this.equals((get_version_args)that);
      return false;
    }

    public boolean equals(get_version_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ref = true && this.isSetRef();
      boolean that_present_ref = true && that.isSetRef();
      if (this_present_ref || that_present_ref) {
        if (!(this_present_ref && that_present_ref))
          return false;
        if (!this.ref.equals(that.ref))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_ref = true && (isSetRef());
      list.add(present_ref);
      if (present_ref)
        list.add(ref);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_version_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRef()).compareTo(other.isSetRef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref, other.ref);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_version_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ref:");
      if (this.ref == null) {
        sb.append("null");
      } else {
        sb.append(this.ref);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_version_argsStandardSchemeFactory implements SchemeFactory {
      public get_version_argsStandardScheme getScheme() {
        return new get_version_argsStandardScheme();
      }
    }

    private static class get_version_argsStandardScheme extends StandardScheme<get_version_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_version_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ref = iprot.readString();
                struct.setRefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_version_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.ref != null) {
          oprot.writeFieldBegin(REF_FIELD_DESC);
          oprot.writeString(struct.ref);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_version_argsTupleSchemeFactory implements SchemeFactory {
      public get_version_argsTupleScheme getScheme() {
        return new get_version_argsTupleScheme();
      }
    }

    private static class get_version_argsTupleScheme extends TupleScheme<get_version_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_version_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetRef()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetRef()) {
          oprot.writeString(struct.ref);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_version_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ref = iprot.readString();
          struct.setRefIsSet(true);
        }
      }
    }

  }

  public static class get_version_result implements org.apache.thrift.TBase<get_version_result, get_version_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_version_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_version_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField GENERIC_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("generic_exception", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHORIZATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_exception", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication_exception", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField REFERENCE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_exception", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_exception", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("type_exception", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_version_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_version_resultTupleSchemeFactory());
    }

    public String success; // required
    public ServiceException generic_exception; // required
    public AuthorizationException authorization_exception; // required
    public AuthenticationException authentication_exception; // required
    public ObjectReferenceException reference_exception; // required
    public AttributeException attribute_exception; // required
    public TypeException type_exception; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      GENERIC_EXCEPTION((short)1, "generic_exception"),
      AUTHORIZATION_EXCEPTION((short)2, "authorization_exception"),
      AUTHENTICATION_EXCEPTION((short)3, "authentication_exception"),
      REFERENCE_EXCEPTION((short)4, "reference_exception"),
      ATTRIBUTE_EXCEPTION((short)5, "attribute_exception"),
      TYPE_EXCEPTION((short)6, "type_exception");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // GENERIC_EXCEPTION
            return GENERIC_EXCEPTION;
          case 2: // AUTHORIZATION_EXCEPTION
            return AUTHORIZATION_EXCEPTION;
          case 3: // AUTHENTICATION_EXCEPTION
            return AUTHENTICATION_EXCEPTION;
          case 4: // REFERENCE_EXCEPTION
            return REFERENCE_EXCEPTION;
          case 5: // ATTRIBUTE_EXCEPTION
            return ATTRIBUTE_EXCEPTION;
          case 6: // TYPE_EXCEPTION
            return TYPE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENERIC_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("generic_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHORIZATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authorization_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.AUTHENTICATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("authentication_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.REFERENCE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("reference_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATTRIBUTE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("attribute_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("type_exception", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_version_result.class, metaDataMap);
    }

    public get_version_result() {
    }

    public get_version_result(
      String success,
      ServiceException generic_exception,
      AuthorizationException authorization_exception,
      AuthenticationException authentication_exception,
      ObjectReferenceException reference_exception,
      AttributeException attribute_exception,
      TypeException type_exception)
    {
      this();
      this.success = success;
      this.generic_exception = generic_exception;
      this.authorization_exception = authorization_exception;
      this.authentication_exception = authentication_exception;
      this.reference_exception = reference_exception;
      this.attribute_exception = attribute_exception;
      this.type_exception = type_exception;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_version_result(get_version_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetGeneric_exception()) {
        this.generic_exception = new ServiceException(other.generic_exception);
      }
      if (other.isSetAuthorization_exception()) {
        this.authorization_exception = new AuthorizationException(other.authorization_exception);
      }
      if (other.isSetAuthentication_exception()) {
        this.authentication_exception = new AuthenticationException(other.authentication_exception);
      }
      if (other.isSetReference_exception()) {
        this.reference_exception = new ObjectReferenceException(other.reference_exception);
      }
      if (other.isSetAttribute_exception()) {
        this.attribute_exception = new AttributeException(other.attribute_exception);
      }
      if (other.isSetType_exception()) {
        this.type_exception = new TypeException(other.type_exception);
      }
    }

    public get_version_result deepCopy() {
      return new get_version_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.generic_exception = null;
      this.authorization_exception = null;
      this.authentication_exception = null;
      this.reference_exception = null;
      this.attribute_exception = null;
      this.type_exception = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_version_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getGeneric_exception() {
      return this.generic_exception;
    }

    public get_version_result setGeneric_exception(ServiceException generic_exception) {
      this.generic_exception = generic_exception;
      return this;
    }

    public void unsetGeneric_exception() {
      this.generic_exception = null;
    }

    /** Returns true if field generic_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneric_exception() {
      return this.generic_exception != null;
    }

    public void setGeneric_exceptionIsSet(boolean value) {
      if (!value) {
        this.generic_exception = null;
      }
    }

    public AuthorizationException getAuthorization_exception() {
      return this.authorization_exception;
    }

    public get_version_result setAuthorization_exception(AuthorizationException authorization_exception) {
      this.authorization_exception = authorization_exception;
      return this;
    }

    public void unsetAuthorization_exception() {
      this.authorization_exception = null;
    }

    /** Returns true if field authorization_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorization_exception() {
      return this.authorization_exception != null;
    }

    public void setAuthorization_exceptionIsSet(boolean value) {
      if (!value) {
        this.authorization_exception = null;
      }
    }

    public AuthenticationException getAuthentication_exception() {
      return this.authentication_exception;
    }

    public get_version_result setAuthentication_exception(AuthenticationException authentication_exception) {
      this.authentication_exception = authentication_exception;
      return this;
    }

    public void unsetAuthentication_exception() {
      this.authentication_exception = null;
    }

    /** Returns true if field authentication_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication_exception() {
      return this.authentication_exception != null;
    }

    public void setAuthentication_exceptionIsSet(boolean value) {
      if (!value) {
        this.authentication_exception = null;
      }
    }

    public ObjectReferenceException getReference_exception() {
      return this.reference_exception;
    }

    public get_version_result setReference_exception(ObjectReferenceException reference_exception) {
      this.reference_exception = reference_exception;
      return this;
    }

    public void unsetReference_exception() {
      this.reference_exception = null;
    }

    /** Returns true if field reference_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetReference_exception() {
      return this.reference_exception != null;
    }

    public void setReference_exceptionIsSet(boolean value) {
      if (!value) {
        this.reference_exception = null;
      }
    }

    public AttributeException getAttribute_exception() {
      return this.attribute_exception;
    }

    public get_version_result setAttribute_exception(AttributeException attribute_exception) {
      this.attribute_exception = attribute_exception;
      return this;
    }

    public void unsetAttribute_exception() {
      this.attribute_exception = null;
    }

    /** Returns true if field attribute_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute_exception() {
      return this.attribute_exception != null;
    }

    public void setAttribute_exceptionIsSet(boolean value) {
      if (!value) {
        this.attribute_exception = null;
      }
    }

    public TypeException getType_exception() {
      return this.type_exception;
    }

    public get_version_result setType_exception(TypeException type_exception) {
      this.type_exception = type_exception;
      return this;
    }

    public void unsetType_exception() {
      this.type_exception = null;
    }

    /** Returns true if field type_exception is set (has been assigned a value) and false otherwise */
    public boolean isSetType_exception() {
      return this.type_exception != null;
    }

    public void setType_exceptionIsSet(boolean value) {
      if (!value) {
        this.type_exception = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case GENERIC_EXCEPTION:
        if (value == null) {
          unsetGeneric_exception();
        } else {
          setGeneric_exception((ServiceException)value);
        }
        break;

      case AUTHORIZATION_EXCEPTION:
        if (value == null) {
          unsetAuthorization_exception();
        } else {
          setAuthorization_exception((AuthorizationException)value);
        }
        break;

      case AUTHENTICATION_EXCEPTION:
        if (value == null) {
          unsetAuthentication_exception();
        } else {
          setAuthentication_exception((AuthenticationException)value);
        }
        break;

      case REFERENCE_EXCEPTION:
        if (value == null) {
          unsetReference_exception();
        } else {
          setReference_exception((ObjectReferenceException)value);
        }
        break;

      case ATTRIBUTE_EXCEPTION:
        if (value == null) {
          unsetAttribute_exception();
        } else {
          setAttribute_exception((AttributeException)value);
        }
        break;

      case TYPE_EXCEPTION:
        if (value == null) {
          unsetType_exception();
        } else {
          setType_exception((TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case GENERIC_EXCEPTION:
        return getGeneric_exception();

      case AUTHORIZATION_EXCEPTION:
        return getAuthorization_exception();

      case AUTHENTICATION_EXCEPTION:
        return getAuthentication_exception();

      case REFERENCE_EXCEPTION:
        return getReference_exception();

      case ATTRIBUTE_EXCEPTION:
        return getAttribute_exception();

      case TYPE_EXCEPTION:
        return getType_exception();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case GENERIC_EXCEPTION:
        return isSetGeneric_exception();
      case AUTHORIZATION_EXCEPTION:
        return isSetAuthorization_exception();
      case AUTHENTICATION_EXCEPTION:
        return isSetAuthentication_exception();
      case REFERENCE_EXCEPTION:
        return isSetReference_exception();
      case ATTRIBUTE_EXCEPTION:
        return isSetAttribute_exception();
      case TYPE_EXCEPTION:
        return isSetType_exception();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_version_result)
        return this.equals((get_version_result)that);
      return false;
    }

    public boolean equals(get_version_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_generic_exception = true && this.isSetGeneric_exception();
      boolean that_present_generic_exception = true && that.isSetGeneric_exception();
      if (this_present_generic_exception || that_present_generic_exception) {
        if (!(this_present_generic_exception && that_present_generic_exception))
          return false;
        if (!this.generic_exception.equals(that.generic_exception))
          return false;
      }

      boolean this_present_authorization_exception = true && this.isSetAuthorization_exception();
      boolean that_present_authorization_exception = true && that.isSetAuthorization_exception();
      if (this_present_authorization_exception || that_present_authorization_exception) {
        if (!(this_present_authorization_exception && that_present_authorization_exception))
          return false;
        if (!this.authorization_exception.equals(that.authorization_exception))
          return false;
      }

      boolean this_present_authentication_exception = true && this.isSetAuthentication_exception();
      boolean that_present_authentication_exception = true && that.isSetAuthentication_exception();
      if (this_present_authentication_exception || that_present_authentication_exception) {
        if (!(this_present_authentication_exception && that_present_authentication_exception))
          return false;
        if (!this.authentication_exception.equals(that.authentication_exception))
          return false;
      }

      boolean this_present_reference_exception = true && this.isSetReference_exception();
      boolean that_present_reference_exception = true && that.isSetReference_exception();
      if (this_present_reference_exception || that_present_reference_exception) {
        if (!(this_present_reference_exception && that_present_reference_exception))
          return false;
        if (!this.reference_exception.equals(that.reference_exception))
          return false;
      }

      boolean this_present_attribute_exception = true && this.isSetAttribute_exception();
      boolean that_present_attribute_exception = true && that.isSetAttribute_exception();
      if (this_present_attribute_exception || that_present_attribute_exception) {
        if (!(this_present_attribute_exception && that_present_attribute_exception))
          return false;
        if (!this.attribute_exception.equals(that.attribute_exception))
          return false;
      }

      boolean this_present_type_exception = true && this.isSetType_exception();
      boolean that_present_type_exception = true && that.isSetType_exception();
      if (this_present_type_exception || that_present_type_exception) {
        if (!(this_present_type_exception && that_present_type_exception))
          return false;
        if (!this.type_exception.equals(that.type_exception))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_generic_exception = true && (isSetGeneric_exception());
      list.add(present_generic_exception);
      if (present_generic_exception)
        list.add(generic_exception);

      boolean present_authorization_exception = true && (isSetAuthorization_exception());
      list.add(present_authorization_exception);
      if (present_authorization_exception)
        list.add(authorization_exception);

      boolean present_authentication_exception = true && (isSetAuthentication_exception());
      list.add(present_authentication_exception);
      if (present_authentication_exception)
        list.add(authentication_exception);

      boolean present_reference_exception = true && (isSetReference_exception());
      list.add(present_reference_exception);
      if (present_reference_exception)
        list.add(reference_exception);

      boolean present_attribute_exception = true && (isSetAttribute_exception());
      list.add(present_attribute_exception);
      if (present_attribute_exception)
        list.add(attribute_exception);

      boolean present_type_exception = true && (isSetType_exception());
      list.add(present_type_exception);
      if (present_type_exception)
        list.add(type_exception);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_version_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGeneric_exception()).compareTo(other.isSetGeneric_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneric_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generic_exception, other.generic_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorization_exception()).compareTo(other.isSetAuthorization_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorization_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_exception, other.authorization_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication_exception()).compareTo(other.isSetAuthentication_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication_exception, other.authentication_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReference_exception()).compareTo(other.isSetReference_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_exception, other.reference_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute_exception()).compareTo(other.isSetAttribute_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_exception, other.attribute_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType_exception()).compareTo(other.isSetType_exception());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType_exception()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_exception, other.type_exception);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_version_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generic_exception:");
      if (this.generic_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.generic_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorization_exception:");
      if (this.authorization_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication_exception:");
      if (this.authentication_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference_exception:");
      if (this.reference_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.reference_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute_exception:");
      if (this.attribute_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_exception);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type_exception:");
      if (this.type_exception == null) {
        sb.append("null");
      } else {
        sb.append(this.type_exception);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_version_resultStandardSchemeFactory implements SchemeFactory {
      public get_version_resultStandardScheme getScheme() {
        return new get_version_resultStandardScheme();
      }
    }

    private static class get_version_resultStandardScheme extends StandardScheme<get_version_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_version_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // GENERIC_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generic_exception = new ServiceException();
                struct.generic_exception.read(iprot);
                struct.setGeneric_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHORIZATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authorization_exception = new AuthorizationException();
                struct.authorization_exception.read(iprot);
                struct.setAuthorization_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication_exception = new AuthenticationException();
                struct.authentication_exception.read(iprot);
                struct.setAuthentication_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERENCE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reference_exception = new ObjectReferenceException();
                struct.reference_exception.read(iprot);
                struct.setReference_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ATTRIBUTE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute_exception = new AttributeException();
                struct.attribute_exception.read(iprot);
                struct.setAttribute_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type_exception = new TypeException();
                struct.type_exception.read(iprot);
                struct.setType_exceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_version_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.generic_exception != null) {
          oprot.writeFieldBegin(GENERIC_EXCEPTION_FIELD_DESC);
          struct.generic_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authorization_exception != null) {
          oprot.writeFieldBegin(AUTHORIZATION_EXCEPTION_FIELD_DESC);
          struct.authorization_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authentication_exception != null) {
          oprot.writeFieldBegin(AUTHENTICATION_EXCEPTION_FIELD_DESC);
          struct.authentication_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reference_exception != null) {
          oprot.writeFieldBegin(REFERENCE_EXCEPTION_FIELD_DESC);
          struct.reference_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.attribute_exception != null) {
          oprot.writeFieldBegin(ATTRIBUTE_EXCEPTION_FIELD_DESC);
          struct.attribute_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type_exception != null) {
          oprot.writeFieldBegin(TYPE_EXCEPTION_FIELD_DESC);
          struct.type_exception.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_version_resultTupleSchemeFactory implements SchemeFactory {
      public get_version_resultTupleScheme getScheme() {
        return new get_version_resultTupleScheme();
      }
    }

    private static class get_version_resultTupleScheme extends TupleScheme<get_version_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_version_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGeneric_exception()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorization_exception()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication_exception()) {
          optionals.set(3);
        }
        if (struct.isSetReference_exception()) {
          optionals.set(4);
        }
        if (struct.isSetAttribute_exception()) {
          optionals.set(5);
        }
        if (struct.isSetType_exception()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetGeneric_exception()) {
          struct.generic_exception.write(oprot);
        }
        if (struct.isSetAuthorization_exception()) {
          struct.authorization_exception.write(oprot);
        }
        if (struct.isSetAuthentication_exception()) {
          struct.authentication_exception.write(oprot);
        }
        if (struct.isSetReference_exception()) {
          struct.reference_exception.write(oprot);
        }
        if (struct.isSetAttribute_exception()) {
          struct.attribute_exception.write(oprot);
        }
        if (struct.isSetType_exception()) {
          struct.type_exception.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_version_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.generic_exception = new ServiceException();
          struct.generic_exception.read(iprot);
          struct.setGeneric_exceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorization_exception = new AuthorizationException();
          struct.authorization_exception.read(iprot);
          struct.setAuthorization_exceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication_exception = new AuthenticationException();
          struct.authentication_exception.read(iprot);
          struct.setAuthentication_exceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reference_exception = new ObjectReferenceException();
          struct.reference_exception.read(iprot);
          struct.setReference_exceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.attribute_exception = new AttributeException();
          struct.attribute_exception.read(iprot);
          struct.setAttribute_exceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.type_exception = new TypeException();
          struct.type_exception.read(iprot);
          struct.setType_exceptionIsSet(true);
        }
      }
    }

  }

}
