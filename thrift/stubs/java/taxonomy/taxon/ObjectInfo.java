/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * @skip documentation
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-28")
public class ObjectInfo implements org.apache.thrift.TBase<ObjectInfo, ObjectInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ObjectInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ObjectInfo");

  private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("object_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OBJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("object_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OBJECT_REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("object_reference", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OBJECT_REFERENCE_VERSIONED_FIELD_DESC = new org.apache.thrift.protocol.TField("object_reference_versioned", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("type_string", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SAVE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("save_date", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SAVED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("saved_by", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField WORKSPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workspace_id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField WORKSPACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("workspace_name", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OBJECT_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("object_checksum", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OBJECT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("object_size", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField OBJECT_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("object_metadata", org.apache.thrift.protocol.TType.MAP, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ObjectInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ObjectInfoTupleSchemeFactory());
  }

  public long object_id; // required
  public String object_name; // required
  public String object_reference; // required
  public String object_reference_versioned; // required
  public String type_string; // required
  public String save_date; // required
  public long version; // required
  public String saved_by; // required
  public long workspace_id; // required
  public String workspace_name; // required
  public String object_checksum; // required
  public long object_size; // required
  public Map<String,String> object_metadata; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OBJECT_ID((short)1, "object_id"),
    OBJECT_NAME((short)2, "object_name"),
    OBJECT_REFERENCE((short)3, "object_reference"),
    OBJECT_REFERENCE_VERSIONED((short)4, "object_reference_versioned"),
    TYPE_STRING((short)5, "type_string"),
    SAVE_DATE((short)6, "save_date"),
    VERSION((short)7, "version"),
    SAVED_BY((short)8, "saved_by"),
    WORKSPACE_ID((short)9, "workspace_id"),
    WORKSPACE_NAME((short)10, "workspace_name"),
    OBJECT_CHECKSUM((short)11, "object_checksum"),
    OBJECT_SIZE((short)12, "object_size"),
    OBJECT_METADATA((short)13, "object_metadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OBJECT_ID
          return OBJECT_ID;
        case 2: // OBJECT_NAME
          return OBJECT_NAME;
        case 3: // OBJECT_REFERENCE
          return OBJECT_REFERENCE;
        case 4: // OBJECT_REFERENCE_VERSIONED
          return OBJECT_REFERENCE_VERSIONED;
        case 5: // TYPE_STRING
          return TYPE_STRING;
        case 6: // SAVE_DATE
          return SAVE_DATE;
        case 7: // VERSION
          return VERSION;
        case 8: // SAVED_BY
          return SAVED_BY;
        case 9: // WORKSPACE_ID
          return WORKSPACE_ID;
        case 10: // WORKSPACE_NAME
          return WORKSPACE_NAME;
        case 11: // OBJECT_CHECKSUM
          return OBJECT_CHECKSUM;
        case 12: // OBJECT_SIZE
          return OBJECT_SIZE;
        case 13: // OBJECT_METADATA
          return OBJECT_METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OBJECT_ID_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private static final int __WORKSPACE_ID_ISSET_ID = 2;
  private static final int __OBJECT_SIZE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("object_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OBJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("object_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("object_reference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_REFERENCE_VERSIONED, new org.apache.thrift.meta_data.FieldMetaData("object_reference_versioned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE_STRING, new org.apache.thrift.meta_data.FieldMetaData("type_string", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAVE_DATE, new org.apache.thrift.meta_data.FieldMetaData("save_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SAVED_BY, new org.apache.thrift.meta_data.FieldMetaData("saved_by", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKSPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("workspace_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WORKSPACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("workspace_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("object_checksum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("object_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OBJECT_METADATA, new org.apache.thrift.meta_data.FieldMetaData("object_metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ObjectInfo.class, metaDataMap);
  }

  public ObjectInfo() {
  }

  public ObjectInfo(
    long object_id,
    String object_name,
    String object_reference,
    String object_reference_versioned,
    String type_string,
    String save_date,
    long version,
    String saved_by,
    long workspace_id,
    String workspace_name,
    String object_checksum,
    long object_size,
    Map<String,String> object_metadata)
  {
    this();
    this.object_id = object_id;
    setObject_idIsSet(true);
    this.object_name = object_name;
    this.object_reference = object_reference;
    this.object_reference_versioned = object_reference_versioned;
    this.type_string = type_string;
    this.save_date = save_date;
    this.version = version;
    setVersionIsSet(true);
    this.saved_by = saved_by;
    this.workspace_id = workspace_id;
    setWorkspace_idIsSet(true);
    this.workspace_name = workspace_name;
    this.object_checksum = object_checksum;
    this.object_size = object_size;
    setObject_sizeIsSet(true);
    this.object_metadata = object_metadata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ObjectInfo(ObjectInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.object_id = other.object_id;
    if (other.isSetObject_name()) {
      this.object_name = other.object_name;
    }
    if (other.isSetObject_reference()) {
      this.object_reference = other.object_reference;
    }
    if (other.isSetObject_reference_versioned()) {
      this.object_reference_versioned = other.object_reference_versioned;
    }
    if (other.isSetType_string()) {
      this.type_string = other.type_string;
    }
    if (other.isSetSave_date()) {
      this.save_date = other.save_date;
    }
    this.version = other.version;
    if (other.isSetSaved_by()) {
      this.saved_by = other.saved_by;
    }
    this.workspace_id = other.workspace_id;
    if (other.isSetWorkspace_name()) {
      this.workspace_name = other.workspace_name;
    }
    if (other.isSetObject_checksum()) {
      this.object_checksum = other.object_checksum;
    }
    this.object_size = other.object_size;
    if (other.isSetObject_metadata()) {
      Map<String,String> __this__object_metadata = new TreeMap<String,String>(other.object_metadata);
      this.object_metadata = __this__object_metadata;
    }
  }

  public ObjectInfo deepCopy() {
    return new ObjectInfo(this);
  }

  @Override
  public void clear() {
    setObject_idIsSet(false);
    this.object_id = 0;
    this.object_name = null;
    this.object_reference = null;
    this.object_reference_versioned = null;
    this.type_string = null;
    this.save_date = null;
    setVersionIsSet(false);
    this.version = 0;
    this.saved_by = null;
    setWorkspace_idIsSet(false);
    this.workspace_id = 0;
    this.workspace_name = null;
    this.object_checksum = null;
    setObject_sizeIsSet(false);
    this.object_size = 0;
    this.object_metadata = null;
  }

  public long getObject_id() {
    return this.object_id;
  }

  public ObjectInfo setObject_id(long object_id) {
    this.object_id = object_id;
    setObject_idIsSet(true);
    return this;
  }

  public void unsetObject_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECT_ID_ISSET_ID);
  }

  /** Returns true if field object_id is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_id() {
    return EncodingUtils.testBit(__isset_bitfield, __OBJECT_ID_ISSET_ID);
  }

  public void setObject_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECT_ID_ISSET_ID, value);
  }

  public String getObject_name() {
    return this.object_name;
  }

  public ObjectInfo setObject_name(String object_name) {
    this.object_name = object_name;
    return this;
  }

  public void unsetObject_name() {
    this.object_name = null;
  }

  /** Returns true if field object_name is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_name() {
    return this.object_name != null;
  }

  public void setObject_nameIsSet(boolean value) {
    if (!value) {
      this.object_name = null;
    }
  }

  public String getObject_reference() {
    return this.object_reference;
  }

  public ObjectInfo setObject_reference(String object_reference) {
    this.object_reference = object_reference;
    return this;
  }

  public void unsetObject_reference() {
    this.object_reference = null;
  }

  /** Returns true if field object_reference is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_reference() {
    return this.object_reference != null;
  }

  public void setObject_referenceIsSet(boolean value) {
    if (!value) {
      this.object_reference = null;
    }
  }

  public String getObject_reference_versioned() {
    return this.object_reference_versioned;
  }

  public ObjectInfo setObject_reference_versioned(String object_reference_versioned) {
    this.object_reference_versioned = object_reference_versioned;
    return this;
  }

  public void unsetObject_reference_versioned() {
    this.object_reference_versioned = null;
  }

  /** Returns true if field object_reference_versioned is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_reference_versioned() {
    return this.object_reference_versioned != null;
  }

  public void setObject_reference_versionedIsSet(boolean value) {
    if (!value) {
      this.object_reference_versioned = null;
    }
  }

  public String getType_string() {
    return this.type_string;
  }

  public ObjectInfo setType_string(String type_string) {
    this.type_string = type_string;
    return this;
  }

  public void unsetType_string() {
    this.type_string = null;
  }

  /** Returns true if field type_string is set (has been assigned a value) and false otherwise */
  public boolean isSetType_string() {
    return this.type_string != null;
  }

  public void setType_stringIsSet(boolean value) {
    if (!value) {
      this.type_string = null;
    }
  }

  public String getSave_date() {
    return this.save_date;
  }

  public ObjectInfo setSave_date(String save_date) {
    this.save_date = save_date;
    return this;
  }

  public void unsetSave_date() {
    this.save_date = null;
  }

  /** Returns true if field save_date is set (has been assigned a value) and false otherwise */
  public boolean isSetSave_date() {
    return this.save_date != null;
  }

  public void setSave_dateIsSet(boolean value) {
    if (!value) {
      this.save_date = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public ObjectInfo setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public String getSaved_by() {
    return this.saved_by;
  }

  public ObjectInfo setSaved_by(String saved_by) {
    this.saved_by = saved_by;
    return this;
  }

  public void unsetSaved_by() {
    this.saved_by = null;
  }

  /** Returns true if field saved_by is set (has been assigned a value) and false otherwise */
  public boolean isSetSaved_by() {
    return this.saved_by != null;
  }

  public void setSaved_byIsSet(boolean value) {
    if (!value) {
      this.saved_by = null;
    }
  }

  public long getWorkspace_id() {
    return this.workspace_id;
  }

  public ObjectInfo setWorkspace_id(long workspace_id) {
    this.workspace_id = workspace_id;
    setWorkspace_idIsSet(true);
    return this;
  }

  public void unsetWorkspace_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKSPACE_ID_ISSET_ID);
  }

  /** Returns true if field workspace_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkspace_id() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKSPACE_ID_ISSET_ID);
  }

  public void setWorkspace_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKSPACE_ID_ISSET_ID, value);
  }

  public String getWorkspace_name() {
    return this.workspace_name;
  }

  public ObjectInfo setWorkspace_name(String workspace_name) {
    this.workspace_name = workspace_name;
    return this;
  }

  public void unsetWorkspace_name() {
    this.workspace_name = null;
  }

  /** Returns true if field workspace_name is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkspace_name() {
    return this.workspace_name != null;
  }

  public void setWorkspace_nameIsSet(boolean value) {
    if (!value) {
      this.workspace_name = null;
    }
  }

  public String getObject_checksum() {
    return this.object_checksum;
  }

  public ObjectInfo setObject_checksum(String object_checksum) {
    this.object_checksum = object_checksum;
    return this;
  }

  public void unsetObject_checksum() {
    this.object_checksum = null;
  }

  /** Returns true if field object_checksum is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_checksum() {
    return this.object_checksum != null;
  }

  public void setObject_checksumIsSet(boolean value) {
    if (!value) {
      this.object_checksum = null;
    }
  }

  public long getObject_size() {
    return this.object_size;
  }

  public ObjectInfo setObject_size(long object_size) {
    this.object_size = object_size;
    setObject_sizeIsSet(true);
    return this;
  }

  public void unsetObject_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECT_SIZE_ISSET_ID);
  }

  /** Returns true if field object_size is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_size() {
    return EncodingUtils.testBit(__isset_bitfield, __OBJECT_SIZE_ISSET_ID);
  }

  public void setObject_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECT_SIZE_ISSET_ID, value);
  }

  public int getObject_metadataSize() {
    return (this.object_metadata == null) ? 0 : this.object_metadata.size();
  }

  public void putToObject_metadata(String key, String val) {
    if (this.object_metadata == null) {
      this.object_metadata = new TreeMap<String,String>();
    }
    this.object_metadata.put(key, val);
  }

  public Map<String,String> getObject_metadata() {
    return this.object_metadata;
  }

  public ObjectInfo setObject_metadata(Map<String,String> object_metadata) {
    this.object_metadata = object_metadata;
    return this;
  }

  public void unsetObject_metadata() {
    this.object_metadata = null;
  }

  /** Returns true if field object_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_metadata() {
    return this.object_metadata != null;
  }

  public void setObject_metadataIsSet(boolean value) {
    if (!value) {
      this.object_metadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OBJECT_ID:
      if (value == null) {
        unsetObject_id();
      } else {
        setObject_id((Long)value);
      }
      break;

    case OBJECT_NAME:
      if (value == null) {
        unsetObject_name();
      } else {
        setObject_name((String)value);
      }
      break;

    case OBJECT_REFERENCE:
      if (value == null) {
        unsetObject_reference();
      } else {
        setObject_reference((String)value);
      }
      break;

    case OBJECT_REFERENCE_VERSIONED:
      if (value == null) {
        unsetObject_reference_versioned();
      } else {
        setObject_reference_versioned((String)value);
      }
      break;

    case TYPE_STRING:
      if (value == null) {
        unsetType_string();
      } else {
        setType_string((String)value);
      }
      break;

    case SAVE_DATE:
      if (value == null) {
        unsetSave_date();
      } else {
        setSave_date((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Long)value);
      }
      break;

    case SAVED_BY:
      if (value == null) {
        unsetSaved_by();
      } else {
        setSaved_by((String)value);
      }
      break;

    case WORKSPACE_ID:
      if (value == null) {
        unsetWorkspace_id();
      } else {
        setWorkspace_id((Long)value);
      }
      break;

    case WORKSPACE_NAME:
      if (value == null) {
        unsetWorkspace_name();
      } else {
        setWorkspace_name((String)value);
      }
      break;

    case OBJECT_CHECKSUM:
      if (value == null) {
        unsetObject_checksum();
      } else {
        setObject_checksum((String)value);
      }
      break;

    case OBJECT_SIZE:
      if (value == null) {
        unsetObject_size();
      } else {
        setObject_size((Long)value);
      }
      break;

    case OBJECT_METADATA:
      if (value == null) {
        unsetObject_metadata();
      } else {
        setObject_metadata((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OBJECT_ID:
      return Long.valueOf(getObject_id());

    case OBJECT_NAME:
      return getObject_name();

    case OBJECT_REFERENCE:
      return getObject_reference();

    case OBJECT_REFERENCE_VERSIONED:
      return getObject_reference_versioned();

    case TYPE_STRING:
      return getType_string();

    case SAVE_DATE:
      return getSave_date();

    case VERSION:
      return Long.valueOf(getVersion());

    case SAVED_BY:
      return getSaved_by();

    case WORKSPACE_ID:
      return Long.valueOf(getWorkspace_id());

    case WORKSPACE_NAME:
      return getWorkspace_name();

    case OBJECT_CHECKSUM:
      return getObject_checksum();

    case OBJECT_SIZE:
      return Long.valueOf(getObject_size());

    case OBJECT_METADATA:
      return getObject_metadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OBJECT_ID:
      return isSetObject_id();
    case OBJECT_NAME:
      return isSetObject_name();
    case OBJECT_REFERENCE:
      return isSetObject_reference();
    case OBJECT_REFERENCE_VERSIONED:
      return isSetObject_reference_versioned();
    case TYPE_STRING:
      return isSetType_string();
    case SAVE_DATE:
      return isSetSave_date();
    case VERSION:
      return isSetVersion();
    case SAVED_BY:
      return isSetSaved_by();
    case WORKSPACE_ID:
      return isSetWorkspace_id();
    case WORKSPACE_NAME:
      return isSetWorkspace_name();
    case OBJECT_CHECKSUM:
      return isSetObject_checksum();
    case OBJECT_SIZE:
      return isSetObject_size();
    case OBJECT_METADATA:
      return isSetObject_metadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ObjectInfo)
      return this.equals((ObjectInfo)that);
    return false;
  }

  public boolean equals(ObjectInfo that) {
    if (that == null)
      return false;

    boolean this_present_object_id = true;
    boolean that_present_object_id = true;
    if (this_present_object_id || that_present_object_id) {
      if (!(this_present_object_id && that_present_object_id))
        return false;
      if (this.object_id != that.object_id)
        return false;
    }

    boolean this_present_object_name = true && this.isSetObject_name();
    boolean that_present_object_name = true && that.isSetObject_name();
    if (this_present_object_name || that_present_object_name) {
      if (!(this_present_object_name && that_present_object_name))
        return false;
      if (!this.object_name.equals(that.object_name))
        return false;
    }

    boolean this_present_object_reference = true && this.isSetObject_reference();
    boolean that_present_object_reference = true && that.isSetObject_reference();
    if (this_present_object_reference || that_present_object_reference) {
      if (!(this_present_object_reference && that_present_object_reference))
        return false;
      if (!this.object_reference.equals(that.object_reference))
        return false;
    }

    boolean this_present_object_reference_versioned = true && this.isSetObject_reference_versioned();
    boolean that_present_object_reference_versioned = true && that.isSetObject_reference_versioned();
    if (this_present_object_reference_versioned || that_present_object_reference_versioned) {
      if (!(this_present_object_reference_versioned && that_present_object_reference_versioned))
        return false;
      if (!this.object_reference_versioned.equals(that.object_reference_versioned))
        return false;
    }

    boolean this_present_type_string = true && this.isSetType_string();
    boolean that_present_type_string = true && that.isSetType_string();
    if (this_present_type_string || that_present_type_string) {
      if (!(this_present_type_string && that_present_type_string))
        return false;
      if (!this.type_string.equals(that.type_string))
        return false;
    }

    boolean this_present_save_date = true && this.isSetSave_date();
    boolean that_present_save_date = true && that.isSetSave_date();
    if (this_present_save_date || that_present_save_date) {
      if (!(this_present_save_date && that_present_save_date))
        return false;
      if (!this.save_date.equals(that.save_date))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_saved_by = true && this.isSetSaved_by();
    boolean that_present_saved_by = true && that.isSetSaved_by();
    if (this_present_saved_by || that_present_saved_by) {
      if (!(this_present_saved_by && that_present_saved_by))
        return false;
      if (!this.saved_by.equals(that.saved_by))
        return false;
    }

    boolean this_present_workspace_id = true;
    boolean that_present_workspace_id = true;
    if (this_present_workspace_id || that_present_workspace_id) {
      if (!(this_present_workspace_id && that_present_workspace_id))
        return false;
      if (this.workspace_id != that.workspace_id)
        return false;
    }

    boolean this_present_workspace_name = true && this.isSetWorkspace_name();
    boolean that_present_workspace_name = true && that.isSetWorkspace_name();
    if (this_present_workspace_name || that_present_workspace_name) {
      if (!(this_present_workspace_name && that_present_workspace_name))
        return false;
      if (!this.workspace_name.equals(that.workspace_name))
        return false;
    }

    boolean this_present_object_checksum = true && this.isSetObject_checksum();
    boolean that_present_object_checksum = true && that.isSetObject_checksum();
    if (this_present_object_checksum || that_present_object_checksum) {
      if (!(this_present_object_checksum && that_present_object_checksum))
        return false;
      if (!this.object_checksum.equals(that.object_checksum))
        return false;
    }

    boolean this_present_object_size = true;
    boolean that_present_object_size = true;
    if (this_present_object_size || that_present_object_size) {
      if (!(this_present_object_size && that_present_object_size))
        return false;
      if (this.object_size != that.object_size)
        return false;
    }

    boolean this_present_object_metadata = true && this.isSetObject_metadata();
    boolean that_present_object_metadata = true && that.isSetObject_metadata();
    if (this_present_object_metadata || that_present_object_metadata) {
      if (!(this_present_object_metadata && that_present_object_metadata))
        return false;
      if (!this.object_metadata.equals(that.object_metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_object_id = true;
    list.add(present_object_id);
    if (present_object_id)
      list.add(object_id);

    boolean present_object_name = true && (isSetObject_name());
    list.add(present_object_name);
    if (present_object_name)
      list.add(object_name);

    boolean present_object_reference = true && (isSetObject_reference());
    list.add(present_object_reference);
    if (present_object_reference)
      list.add(object_reference);

    boolean present_object_reference_versioned = true && (isSetObject_reference_versioned());
    list.add(present_object_reference_versioned);
    if (present_object_reference_versioned)
      list.add(object_reference_versioned);

    boolean present_type_string = true && (isSetType_string());
    list.add(present_type_string);
    if (present_type_string)
      list.add(type_string);

    boolean present_save_date = true && (isSetSave_date());
    list.add(present_save_date);
    if (present_save_date)
      list.add(save_date);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_saved_by = true && (isSetSaved_by());
    list.add(present_saved_by);
    if (present_saved_by)
      list.add(saved_by);

    boolean present_workspace_id = true;
    list.add(present_workspace_id);
    if (present_workspace_id)
      list.add(workspace_id);

    boolean present_workspace_name = true && (isSetWorkspace_name());
    list.add(present_workspace_name);
    if (present_workspace_name)
      list.add(workspace_name);

    boolean present_object_checksum = true && (isSetObject_checksum());
    list.add(present_object_checksum);
    if (present_object_checksum)
      list.add(object_checksum);

    boolean present_object_size = true;
    list.add(present_object_size);
    if (present_object_size)
      list.add(object_size);

    boolean present_object_metadata = true && (isSetObject_metadata());
    list.add(present_object_metadata);
    if (present_object_metadata)
      list.add(object_metadata);

    return list.hashCode();
  }

  @Override
  public int compareTo(ObjectInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetObject_id()).compareTo(other.isSetObject_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_id, other.object_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObject_name()).compareTo(other.isSetObject_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_name, other.object_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObject_reference()).compareTo(other.isSetObject_reference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_reference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_reference, other.object_reference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObject_reference_versioned()).compareTo(other.isSetObject_reference_versioned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_reference_versioned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_reference_versioned, other.object_reference_versioned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType_string()).compareTo(other.isSetType_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_string, other.type_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSave_date()).compareTo(other.isSetSave_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSave_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.save_date, other.save_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaved_by()).compareTo(other.isSetSaved_by());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaved_by()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saved_by, other.saved_by);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkspace_id()).compareTo(other.isSetWorkspace_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkspace_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workspace_id, other.workspace_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkspace_name()).compareTo(other.isSetWorkspace_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkspace_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workspace_name, other.workspace_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObject_checksum()).compareTo(other.isSetObject_checksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_checksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_checksum, other.object_checksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObject_size()).compareTo(other.isSetObject_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_size, other.object_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObject_metadata()).compareTo(other.isSetObject_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_metadata, other.object_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ObjectInfo(");
    boolean first = true;

    sb.append("object_id:");
    sb.append(this.object_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("object_name:");
    if (this.object_name == null) {
      sb.append("null");
    } else {
      sb.append(this.object_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("object_reference:");
    if (this.object_reference == null) {
      sb.append("null");
    } else {
      sb.append(this.object_reference);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("object_reference_versioned:");
    if (this.object_reference_versioned == null) {
      sb.append("null");
    } else {
      sb.append(this.object_reference_versioned);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type_string:");
    if (this.type_string == null) {
      sb.append("null");
    } else {
      sb.append(this.type_string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("save_date:");
    if (this.save_date == null) {
      sb.append("null");
    } else {
      sb.append(this.save_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("saved_by:");
    if (this.saved_by == null) {
      sb.append("null");
    } else {
      sb.append(this.saved_by);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workspace_id:");
    sb.append(this.workspace_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workspace_name:");
    if (this.workspace_name == null) {
      sb.append("null");
    } else {
      sb.append(this.workspace_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("object_checksum:");
    if (this.object_checksum == null) {
      sb.append("null");
    } else {
      sb.append(this.object_checksum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("object_size:");
    sb.append(this.object_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("object_metadata:");
    if (this.object_metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.object_metadata);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ObjectInfoStandardSchemeFactory implements SchemeFactory {
    public ObjectInfoStandardScheme getScheme() {
      return new ObjectInfoStandardScheme();
    }
  }

  private static class ObjectInfoStandardScheme extends StandardScheme<ObjectInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ObjectInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.object_id = iprot.readI64();
              struct.setObject_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OBJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.object_name = iprot.readString();
              struct.setObject_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OBJECT_REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.object_reference = iprot.readString();
              struct.setObject_referenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OBJECT_REFERENCE_VERSIONED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.object_reference_versioned = iprot.readString();
              struct.setObject_reference_versionedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type_string = iprot.readString();
              struct.setType_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SAVE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.save_date = iprot.readString();
              struct.setSave_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SAVED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saved_by = iprot.readString();
              struct.setSaved_byIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WORKSPACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.workspace_id = iprot.readI64();
              struct.setWorkspace_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WORKSPACE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workspace_name = iprot.readString();
              struct.setWorkspace_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OBJECT_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.object_checksum = iprot.readString();
              struct.setObject_checksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OBJECT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.object_size = iprot.readI64();
              struct.setObject_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OBJECT_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.object_metadata = new TreeMap<String,String>();
                String _key19;
                String _val20;
                for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                {
                  _key19 = iprot.readString();
                  _val20 = iprot.readString();
                  struct.object_metadata.put(_key19, _val20);
                }
                iprot.readMapEnd();
              }
              struct.setObject_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ObjectInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
      oprot.writeI64(struct.object_id);
      oprot.writeFieldEnd();
      if (struct.object_name != null) {
        oprot.writeFieldBegin(OBJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.object_name);
        oprot.writeFieldEnd();
      }
      if (struct.object_reference != null) {
        oprot.writeFieldBegin(OBJECT_REFERENCE_FIELD_DESC);
        oprot.writeString(struct.object_reference);
        oprot.writeFieldEnd();
      }
      if (struct.object_reference_versioned != null) {
        oprot.writeFieldBegin(OBJECT_REFERENCE_VERSIONED_FIELD_DESC);
        oprot.writeString(struct.object_reference_versioned);
        oprot.writeFieldEnd();
      }
      if (struct.type_string != null) {
        oprot.writeFieldBegin(TYPE_STRING_FIELD_DESC);
        oprot.writeString(struct.type_string);
        oprot.writeFieldEnd();
      }
      if (struct.save_date != null) {
        oprot.writeFieldBegin(SAVE_DATE_FIELD_DESC);
        oprot.writeString(struct.save_date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      if (struct.saved_by != null) {
        oprot.writeFieldBegin(SAVED_BY_FIELD_DESC);
        oprot.writeString(struct.saved_by);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WORKSPACE_ID_FIELD_DESC);
      oprot.writeI64(struct.workspace_id);
      oprot.writeFieldEnd();
      if (struct.workspace_name != null) {
        oprot.writeFieldBegin(WORKSPACE_NAME_FIELD_DESC);
        oprot.writeString(struct.workspace_name);
        oprot.writeFieldEnd();
      }
      if (struct.object_checksum != null) {
        oprot.writeFieldBegin(OBJECT_CHECKSUM_FIELD_DESC);
        oprot.writeString(struct.object_checksum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OBJECT_SIZE_FIELD_DESC);
      oprot.writeI64(struct.object_size);
      oprot.writeFieldEnd();
      if (struct.object_metadata != null) {
        oprot.writeFieldBegin(OBJECT_METADATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.object_metadata.size()));
          for (Map.Entry<String, String> _iter22 : struct.object_metadata.entrySet())
          {
            oprot.writeString(_iter22.getKey());
            oprot.writeString(_iter22.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ObjectInfoTupleSchemeFactory implements SchemeFactory {
    public ObjectInfoTupleScheme getScheme() {
      return new ObjectInfoTupleScheme();
    }
  }

  private static class ObjectInfoTupleScheme extends TupleScheme<ObjectInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ObjectInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetObject_id()) {
        optionals.set(0);
      }
      if (struct.isSetObject_name()) {
        optionals.set(1);
      }
      if (struct.isSetObject_reference()) {
        optionals.set(2);
      }
      if (struct.isSetObject_reference_versioned()) {
        optionals.set(3);
      }
      if (struct.isSetType_string()) {
        optionals.set(4);
      }
      if (struct.isSetSave_date()) {
        optionals.set(5);
      }
      if (struct.isSetVersion()) {
        optionals.set(6);
      }
      if (struct.isSetSaved_by()) {
        optionals.set(7);
      }
      if (struct.isSetWorkspace_id()) {
        optionals.set(8);
      }
      if (struct.isSetWorkspace_name()) {
        optionals.set(9);
      }
      if (struct.isSetObject_checksum()) {
        optionals.set(10);
      }
      if (struct.isSetObject_size()) {
        optionals.set(11);
      }
      if (struct.isSetObject_metadata()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetObject_id()) {
        oprot.writeI64(struct.object_id);
      }
      if (struct.isSetObject_name()) {
        oprot.writeString(struct.object_name);
      }
      if (struct.isSetObject_reference()) {
        oprot.writeString(struct.object_reference);
      }
      if (struct.isSetObject_reference_versioned()) {
        oprot.writeString(struct.object_reference_versioned);
      }
      if (struct.isSetType_string()) {
        oprot.writeString(struct.type_string);
      }
      if (struct.isSetSave_date()) {
        oprot.writeString(struct.save_date);
      }
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetSaved_by()) {
        oprot.writeString(struct.saved_by);
      }
      if (struct.isSetWorkspace_id()) {
        oprot.writeI64(struct.workspace_id);
      }
      if (struct.isSetWorkspace_name()) {
        oprot.writeString(struct.workspace_name);
      }
      if (struct.isSetObject_checksum()) {
        oprot.writeString(struct.object_checksum);
      }
      if (struct.isSetObject_size()) {
        oprot.writeI64(struct.object_size);
      }
      if (struct.isSetObject_metadata()) {
        {
          oprot.writeI32(struct.object_metadata.size());
          for (Map.Entry<String, String> _iter23 : struct.object_metadata.entrySet())
          {
            oprot.writeString(_iter23.getKey());
            oprot.writeString(_iter23.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ObjectInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.object_id = iprot.readI64();
        struct.setObject_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.object_name = iprot.readString();
        struct.setObject_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.object_reference = iprot.readString();
        struct.setObject_referenceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.object_reference_versioned = iprot.readString();
        struct.setObject_reference_versionedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type_string = iprot.readString();
        struct.setType_stringIsSet(true);
      }
      if (incoming.get(5)) {
        struct.save_date = iprot.readString();
        struct.setSave_dateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.saved_by = iprot.readString();
        struct.setSaved_byIsSet(true);
      }
      if (incoming.get(8)) {
        struct.workspace_id = iprot.readI64();
        struct.setWorkspace_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.workspace_name = iprot.readString();
        struct.setWorkspace_nameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.object_checksum = iprot.readString();
        struct.setObject_checksumIsSet(true);
      }
      if (incoming.get(11)) {
        struct.object_size = iprot.readI64();
        struct.setObject_sizeIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.object_metadata = new TreeMap<String,String>();
          String _key25;
          String _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readString();
            _val26 = iprot.readString();
            struct.object_metadata.put(_key25, _val26);
          }
        }
        struct.setObject_metadataIsSet(true);
      }
    }
  }

}

