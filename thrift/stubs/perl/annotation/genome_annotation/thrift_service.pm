#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use genome_annotation::Types;

# HELPER FUNCTIONS AND STRUCTURES

package genome_annotation::thrift_service_get_taxon_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_taxon_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_taxon_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_taxon_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_taxon_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_taxon_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_taxon_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_taxon_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_assembly_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_assembly_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_assembly_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_assembly_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_assembly_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_assembly_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_assembly_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_assembly_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_types_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_types_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_types_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_types_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_types_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_types_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_types_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size191 = 0;
          $self->{success} = [];
          my $_etype194 = 0;
          $xfer += $input->readListBegin(\$_etype194, \$_size191);
          for (my $_i195 = 0; $_i195 < $_size191; ++$_i195)
          {
            my $elem196 = undef;
            $xfer += $input->readString(\$elem196);
            push(@{$self->{success}},$elem196);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_types_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
      {
        foreach my $iter197 (@{$self->{success}}) 
        {
          $xfer += $output->writeString($iter197);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_type_descriptions_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_type_descriptions_args->mk_accessors( qw( token ref feature_type_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_type_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_type_list}) {
      $self->{feature_type_list} = $vals->{feature_type_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_type_descriptions_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size198 = 0;
          $self->{feature_type_list} = [];
          my $_etype201 = 0;
          $xfer += $input->readListBegin(\$_etype201, \$_size198);
          for (my $_i202 = 0; $_i202 < $_size198; ++$_i202)
          {
            my $elem203 = undef;
            $xfer += $input->readString(\$elem203);
            push(@{$self->{feature_type_list}},$elem203);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_type_descriptions_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_type_list}) {
    $xfer += $output->writeFieldBegin('feature_type_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_type_list}}));
      {
        foreach my $iter204 (@{$self->{feature_type_list}}) 
        {
          $xfer += $output->writeString($iter204);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_type_descriptions_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_type_descriptions_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_type_descriptions_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size205 = 0;
          $self->{success} = {};
          my $_ktype206 = 0;
          my $_vtype207 = 0;
          $xfer += $input->readMapBegin(\$_ktype206, \$_vtype207, \$_size205);
          for (my $_i209 = 0; $_i209 < $_size205; ++$_i209)
          {
            my $key210 = '';
            my $val211 = '';
            $xfer += $input->readString(\$key210);
            $xfer += $input->readString(\$val211);
            $self->{success}->{$key210} = $val211;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_type_descriptions_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter212,$viter213) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter212);
          $xfer += $output->writeString($viter213);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_type_counts_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_type_counts_args->mk_accessors( qw( token ref feature_type_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_type_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_type_list}) {
      $self->{feature_type_list} = $vals->{feature_type_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_type_counts_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size214 = 0;
          $self->{feature_type_list} = [];
          my $_etype217 = 0;
          $xfer += $input->readListBegin(\$_etype217, \$_size214);
          for (my $_i218 = 0; $_i218 < $_size214; ++$_i218)
          {
            my $elem219 = undef;
            $xfer += $input->readString(\$elem219);
            push(@{$self->{feature_type_list}},$elem219);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_type_counts_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_type_list}) {
    $xfer += $output->writeFieldBegin('feature_type_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_type_list}}));
      {
        foreach my $iter220 (@{$self->{feature_type_list}}) 
        {
          $xfer += $output->writeString($iter220);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_type_counts_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_type_counts_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_type_counts_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size221 = 0;
          $self->{success} = {};
          my $_ktype222 = 0;
          my $_vtype223 = 0;
          $xfer += $input->readMapBegin(\$_ktype222, \$_vtype223, \$_size221);
          for (my $_i225 = 0; $_i225 < $_size221; ++$_i225)
          {
            my $key226 = '';
            my $val227 = 0;
            $xfer += $input->readString(\$key226);
            $xfer += $input->readI64(\$val227);
            $self->{success}->{$key226} = $val227;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_type_counts_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::I64, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter228,$viter229) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter228);
          $xfer += $output->writeI64($viter229);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_ids_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_ids_args->mk_accessors( qw( token ref filters group_type ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{filters} = undef;
  $self->{group_type} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{filters}) {
      $self->{filters} = $vals->{filters};
    }
    if (defined $vals->{group_type}) {
      $self->{group_type} = $vals->{group_type};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_ids_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{filters} = new genome_annotation::Feature_id_filters();
        $xfer += $self->{filters}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{group_type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_ids_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{filters}) {
    $xfer += $output->writeFieldBegin('filters', TType::STRUCT, 3);
    $xfer += $self->{filters}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{group_type}) {
    $xfer += $output->writeFieldBegin('group_type', TType::STRING, 4);
    $xfer += $output->writeString($self->{group_type});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_ids_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_ids_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_ids_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new genome_annotation::Feature_id_mapping();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_ids_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_features_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_features_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_features_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size230 = 0;
          $self->{feature_id_list} = [];
          my $_etype233 = 0;
          $xfer += $input->readListBegin(\$_etype233, \$_size230);
          for (my $_i234 = 0; $_i234 < $_size230; ++$_i234)
          {
            my $elem235 = undef;
            $xfer += $input->readString(\$elem235);
            push(@{$self->{feature_id_list}},$elem235);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_features_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter236 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter236);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_features_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_features_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_features_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size237 = 0;
          $self->{success} = {};
          my $_ktype238 = 0;
          my $_vtype239 = 0;
          $xfer += $input->readMapBegin(\$_ktype238, \$_vtype239, \$_size237);
          for (my $_i241 = 0; $_i241 < $_size237; ++$_i241)
          {
            my $key242 = '';
            my $val243 = new genome_annotation::Feature_data();
            $xfer += $input->readString(\$key242);
            $val243 = new genome_annotation::Feature_data();
            $xfer += $val243->read($input);
            $self->{success}->{$key242} = $val243;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_features_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRUCT, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter244,$viter245) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter244);
          $xfer += ${viter245}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_proteins_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_proteins_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_proteins_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_proteins_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_proteins_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_proteins_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_proteins_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size246 = 0;
          $self->{success} = {};
          my $_ktype247 = 0;
          my $_vtype248 = 0;
          $xfer += $input->readMapBegin(\$_ktype247, \$_vtype248, \$_size246);
          for (my $_i250 = 0; $_i250 < $_size246; ++$_i250)
          {
            my $key251 = '';
            my $val252 = new genome_annotation::Protein_data();
            $xfer += $input->readString(\$key251);
            $val252 = new genome_annotation::Protein_data();
            $xfer += $val252->read($input);
            $self->{success}->{$key251} = $val252;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_proteins_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRUCT, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter253,$viter254) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter253);
          $xfer += ${viter254}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_locations_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_locations_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_locations_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size255 = 0;
          $self->{feature_id_list} = [];
          my $_etype258 = 0;
          $xfer += $input->readListBegin(\$_etype258, \$_size255);
          for (my $_i259 = 0; $_i259 < $_size255; ++$_i259)
          {
            my $elem260 = undef;
            $xfer += $input->readString(\$elem260);
            push(@{$self->{feature_id_list}},$elem260);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_locations_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter261 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter261);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_locations_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_locations_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_locations_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size262 = 0;
          $self->{success} = {};
          my $_ktype263 = 0;
          my $_vtype264 = 0;
          $xfer += $input->readMapBegin(\$_ktype263, \$_vtype264, \$_size262);
          for (my $_i266 = 0; $_i266 < $_size262; ++$_i266)
          {
            my $key267 = '';
            my $val268 = [];
            $xfer += $input->readString(\$key267);
            {
              my $_size269 = 0;
              $val268 = [];
              my $_etype272 = 0;
              $xfer += $input->readListBegin(\$_etype272, \$_size269);
              for (my $_i273 = 0; $_i273 < $_size269; ++$_i273)
              {
                my $elem274 = undef;
                $elem274 = new genome_annotation::Region();
                $xfer += $elem274->read($input);
                push(@{$val268},$elem274);
              }
              $xfer += $input->readListEnd();
            }
            $self->{success}->{$key267} = $val268;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_locations_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::LIST, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter275,$viter276) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter275);
          {
            $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{${viter276}}));
            {
              foreach my $iter277 (@{${viter276}}) 
              {
                $xfer += ${iter277}->write($output);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_publications_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_publications_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_publications_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size278 = 0;
          $self->{feature_id_list} = [];
          my $_etype281 = 0;
          $xfer += $input->readListBegin(\$_etype281, \$_size278);
          for (my $_i282 = 0; $_i282 < $_size278; ++$_i282)
          {
            my $elem283 = undef;
            $xfer += $input->readString(\$elem283);
            push(@{$self->{feature_id_list}},$elem283);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_publications_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter284 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter284);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_publications_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_publications_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_publications_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size285 = 0;
          $self->{success} = {};
          my $_ktype286 = 0;
          my $_vtype287 = 0;
          $xfer += $input->readMapBegin(\$_ktype286, \$_vtype287, \$_size285);
          for (my $_i289 = 0; $_i289 < $_size285; ++$_i289)
          {
            my $key290 = '';
            my $val291 = [];
            $xfer += $input->readString(\$key290);
            {
              my $_size292 = 0;
              $val291 = [];
              my $_etype295 = 0;
              $xfer += $input->readListBegin(\$_etype295, \$_size292);
              for (my $_i296 = 0; $_i296 < $_size292; ++$_i296)
              {
                my $elem297 = undef;
                $xfer += $input->readString(\$elem297);
                push(@{$val291},$elem297);
              }
              $xfer += $input->readListEnd();
            }
            $self->{success}->{$key290} = $val291;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_publications_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::LIST, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter298,$viter299) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter298);
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${viter299}}));
            {
              foreach my $iter300 (@{${viter299}}) 
              {
                $xfer += $output->writeString($iter300);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_dna_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_dna_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_dna_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size301 = 0;
          $self->{feature_id_list} = [];
          my $_etype304 = 0;
          $xfer += $input->readListBegin(\$_etype304, \$_size301);
          for (my $_i305 = 0; $_i305 < $_size301; ++$_i305)
          {
            my $elem306 = undef;
            $xfer += $input->readString(\$elem306);
            push(@{$self->{feature_id_list}},$elem306);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_dna_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter307 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter307);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_dna_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_dna_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_dna_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size308 = 0;
          $self->{success} = {};
          my $_ktype309 = 0;
          my $_vtype310 = 0;
          $xfer += $input->readMapBegin(\$_ktype309, \$_vtype310, \$_size308);
          for (my $_i312 = 0; $_i312 < $_size308; ++$_i312)
          {
            my $key313 = '';
            my $val314 = '';
            $xfer += $input->readString(\$key313);
            $xfer += $input->readString(\$val314);
            $self->{success}->{$key313} = $val314;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_dna_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter315,$viter316) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter315);
          $xfer += $output->writeString($viter316);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_functions_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_functions_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_functions_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size317 = 0;
          $self->{feature_id_list} = [];
          my $_etype320 = 0;
          $xfer += $input->readListBegin(\$_etype320, \$_size317);
          for (my $_i321 = 0; $_i321 < $_size317; ++$_i321)
          {
            my $elem322 = undef;
            $xfer += $input->readString(\$elem322);
            push(@{$self->{feature_id_list}},$elem322);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_functions_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter323 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter323);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_functions_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_functions_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_functions_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size324 = 0;
          $self->{success} = {};
          my $_ktype325 = 0;
          my $_vtype326 = 0;
          $xfer += $input->readMapBegin(\$_ktype325, \$_vtype326, \$_size324);
          for (my $_i328 = 0; $_i328 < $_size324; ++$_i328)
          {
            my $key329 = '';
            my $val330 = '';
            $xfer += $input->readString(\$key329);
            $xfer += $input->readString(\$val330);
            $self->{success}->{$key329} = $val330;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_functions_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter331,$viter332) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter331);
          $xfer += $output->writeString($viter332);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_aliases_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_aliases_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_aliases_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size333 = 0;
          $self->{feature_id_list} = [];
          my $_etype336 = 0;
          $xfer += $input->readListBegin(\$_etype336, \$_size333);
          for (my $_i337 = 0; $_i337 < $_size333; ++$_i337)
          {
            my $elem338 = undef;
            $xfer += $input->readString(\$elem338);
            push(@{$self->{feature_id_list}},$elem338);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_aliases_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter339 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter339);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_feature_aliases_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_feature_aliases_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_aliases_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size340 = 0;
          $self->{success} = {};
          my $_ktype341 = 0;
          my $_vtype342 = 0;
          $xfer += $input->readMapBegin(\$_ktype341, \$_vtype342, \$_size340);
          for (my $_i344 = 0; $_i344 < $_size340; ++$_i344)
          {
            my $key345 = '';
            my $val346 = [];
            $xfer += $input->readString(\$key345);
            {
              my $_size347 = 0;
              $val346 = [];
              my $_etype350 = 0;
              $xfer += $input->readListBegin(\$_etype350, \$_size347);
              for (my $_i351 = 0; $_i351 < $_size347; ++$_i351)
              {
                my $elem352 = undef;
                $xfer += $input->readString(\$elem352);
                push(@{$val346},$elem352);
              }
              $xfer += $input->readListEnd();
            }
            $self->{success}->{$key345} = $val346;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_aliases_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::LIST, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter353,$viter354) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter353);
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${viter354}}));
            {
              foreach my $iter355 (@{${viter354}}) 
              {
                $xfer += $output->writeString($iter355);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_cds_by_gene_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_cds_by_gene_args->mk_accessors( qw( token ref gene_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{gene_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{gene_id_list}) {
      $self->{gene_id_list} = $vals->{gene_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_cds_by_gene_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size356 = 0;
          $self->{gene_id_list} = [];
          my $_etype359 = 0;
          $xfer += $input->readListBegin(\$_etype359, \$_size356);
          for (my $_i360 = 0; $_i360 < $_size356; ++$_i360)
          {
            my $elem361 = undef;
            $xfer += $input->readString(\$elem361);
            push(@{$self->{gene_id_list}},$elem361);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_cds_by_gene_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{gene_id_list}) {
    $xfer += $output->writeFieldBegin('gene_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{gene_id_list}}));
      {
        foreach my $iter362 (@{$self->{gene_id_list}}) 
        {
          $xfer += $output->writeString($iter362);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_cds_by_gene_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_cds_by_gene_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_cds_by_gene_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size363 = 0;
          $self->{success} = {};
          my $_ktype364 = 0;
          my $_vtype365 = 0;
          $xfer += $input->readMapBegin(\$_ktype364, \$_vtype365, \$_size363);
          for (my $_i367 = 0; $_i367 < $_size363; ++$_i367)
          {
            my $key368 = '';
            my $val369 = [];
            $xfer += $input->readString(\$key368);
            {
              my $_size370 = 0;
              $val369 = [];
              my $_etype373 = 0;
              $xfer += $input->readListBegin(\$_etype373, \$_size370);
              for (my $_i374 = 0; $_i374 < $_size370; ++$_i374)
              {
                my $elem375 = undef;
                $xfer += $input->readString(\$elem375);
                push(@{$val369},$elem375);
              }
              $xfer += $input->readListEnd();
            }
            $self->{success}->{$key368} = $val369;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_cds_by_gene_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::LIST, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter376,$viter377) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter376);
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${viter377}}));
            {
              foreach my $iter378 (@{${viter377}}) 
              {
                $xfer += $output->writeString($iter378);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_cds_by_mrna_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_cds_by_mrna_args->mk_accessors( qw( token ref mrna_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{mrna_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{mrna_id_list}) {
      $self->{mrna_id_list} = $vals->{mrna_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_cds_by_mrna_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size379 = 0;
          $self->{mrna_id_list} = [];
          my $_etype382 = 0;
          $xfer += $input->readListBegin(\$_etype382, \$_size379);
          for (my $_i383 = 0; $_i383 < $_size379; ++$_i383)
          {
            my $elem384 = undef;
            $xfer += $input->readString(\$elem384);
            push(@{$self->{mrna_id_list}},$elem384);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_cds_by_mrna_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mrna_id_list}) {
    $xfer += $output->writeFieldBegin('mrna_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{mrna_id_list}}));
      {
        foreach my $iter385 (@{$self->{mrna_id_list}}) 
        {
          $xfer += $output->writeString($iter385);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_cds_by_mrna_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_cds_by_mrna_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_cds_by_mrna_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size386 = 0;
          $self->{success} = {};
          my $_ktype387 = 0;
          my $_vtype388 = 0;
          $xfer += $input->readMapBegin(\$_ktype387, \$_vtype388, \$_size386);
          for (my $_i390 = 0; $_i390 < $_size386; ++$_i390)
          {
            my $key391 = '';
            my $val392 = '';
            $xfer += $input->readString(\$key391);
            $xfer += $input->readString(\$val392);
            $self->{success}->{$key391} = $val392;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_cds_by_mrna_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter393,$viter394) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter393);
          $xfer += $output->writeString($viter394);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_gene_by_cds_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_gene_by_cds_args->mk_accessors( qw( token ref cds_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{cds_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{cds_id_list}) {
      $self->{cds_id_list} = $vals->{cds_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gene_by_cds_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size395 = 0;
          $self->{cds_id_list} = [];
          my $_etype398 = 0;
          $xfer += $input->readListBegin(\$_etype398, \$_size395);
          for (my $_i399 = 0; $_i399 < $_size395; ++$_i399)
          {
            my $elem400 = undef;
            $xfer += $input->readString(\$elem400);
            push(@{$self->{cds_id_list}},$elem400);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gene_by_cds_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cds_id_list}) {
    $xfer += $output->writeFieldBegin('cds_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{cds_id_list}}));
      {
        foreach my $iter401 (@{$self->{cds_id_list}}) 
        {
          $xfer += $output->writeString($iter401);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_gene_by_cds_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_gene_by_cds_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gene_by_cds_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size402 = 0;
          $self->{success} = {};
          my $_ktype403 = 0;
          my $_vtype404 = 0;
          $xfer += $input->readMapBegin(\$_ktype403, \$_vtype404, \$_size402);
          for (my $_i406 = 0; $_i406 < $_size402; ++$_i406)
          {
            my $key407 = '';
            my $val408 = '';
            $xfer += $input->readString(\$key407);
            $xfer += $input->readString(\$val408);
            $self->{success}->{$key407} = $val408;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gene_by_cds_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter409,$viter410) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter409);
          $xfer += $output->writeString($viter410);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_gene_by_mrna_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_gene_by_mrna_args->mk_accessors( qw( token ref mrna_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{mrna_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{mrna_id_list}) {
      $self->{mrna_id_list} = $vals->{mrna_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gene_by_mrna_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size411 = 0;
          $self->{mrna_id_list} = [];
          my $_etype414 = 0;
          $xfer += $input->readListBegin(\$_etype414, \$_size411);
          for (my $_i415 = 0; $_i415 < $_size411; ++$_i415)
          {
            my $elem416 = undef;
            $xfer += $input->readString(\$elem416);
            push(@{$self->{mrna_id_list}},$elem416);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gene_by_mrna_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mrna_id_list}) {
    $xfer += $output->writeFieldBegin('mrna_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{mrna_id_list}}));
      {
        foreach my $iter417 (@{$self->{mrna_id_list}}) 
        {
          $xfer += $output->writeString($iter417);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_gene_by_mrna_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_gene_by_mrna_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gene_by_mrna_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size418 = 0;
          $self->{success} = {};
          my $_ktype419 = 0;
          my $_vtype420 = 0;
          $xfer += $input->readMapBegin(\$_ktype419, \$_vtype420, \$_size418);
          for (my $_i422 = 0; $_i422 < $_size418; ++$_i422)
          {
            my $key423 = '';
            my $val424 = '';
            $xfer += $input->readString(\$key423);
            $xfer += $input->readString(\$val424);
            $self->{success}->{$key423} = $val424;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gene_by_mrna_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter425,$viter426) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter425);
          $xfer += $output->writeString($viter426);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_mrna_by_cds_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_mrna_by_cds_args->mk_accessors( qw( token ref gene_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{gene_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{gene_id_list}) {
      $self->{gene_id_list} = $vals->{gene_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_mrna_by_cds_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size427 = 0;
          $self->{gene_id_list} = [];
          my $_etype430 = 0;
          $xfer += $input->readListBegin(\$_etype430, \$_size427);
          for (my $_i431 = 0; $_i431 < $_size427; ++$_i431)
          {
            my $elem432 = undef;
            $xfer += $input->readString(\$elem432);
            push(@{$self->{gene_id_list}},$elem432);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_mrna_by_cds_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{gene_id_list}) {
    $xfer += $output->writeFieldBegin('gene_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{gene_id_list}}));
      {
        foreach my $iter433 (@{$self->{gene_id_list}}) 
        {
          $xfer += $output->writeString($iter433);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_mrna_by_cds_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_mrna_by_cds_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_mrna_by_cds_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size434 = 0;
          $self->{success} = {};
          my $_ktype435 = 0;
          my $_vtype436 = 0;
          $xfer += $input->readMapBegin(\$_ktype435, \$_vtype436, \$_size434);
          for (my $_i438 = 0; $_i438 < $_size434; ++$_i438)
          {
            my $key439 = '';
            my $val440 = '';
            $xfer += $input->readString(\$key439);
            $xfer += $input->readString(\$val440);
            $self->{success}->{$key439} = $val440;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_mrna_by_cds_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter441,$viter442) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter441);
          $xfer += $output->writeString($viter442);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_mrna_by_gene_args;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_mrna_by_gene_args->mk_accessors( qw( token ref gene_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{gene_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{gene_id_list}) {
      $self->{gene_id_list} = $vals->{gene_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_mrna_by_gene_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size443 = 0;
          $self->{gene_id_list} = [];
          my $_etype446 = 0;
          $xfer += $input->readListBegin(\$_etype446, \$_size443);
          for (my $_i447 = 0; $_i447 < $_size443; ++$_i447)
          {
            my $elem448 = undef;
            $xfer += $input->readString(\$elem448);
            push(@{$self->{gene_id_list}},$elem448);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_mrna_by_gene_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{gene_id_list}) {
    $xfer += $output->writeFieldBegin('gene_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{gene_id_list}}));
      {
        foreach my $iter449 (@{$self->{gene_id_list}}) 
        {
          $xfer += $output->writeString($iter449);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_service_get_mrna_by_gene_result;
use base qw(Class::Accessor);
genome_annotation::thrift_service_get_mrna_by_gene_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_mrna_by_gene_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size450 = 0;
          $self->{success} = {};
          my $_ktype451 = 0;
          my $_vtype452 = 0;
          $xfer += $input->readMapBegin(\$_ktype451, \$_vtype452, \$_size450);
          for (my $_i454 = 0; $_i454 < $_size450; ++$_i454)
          {
            my $key455 = '';
            my $val456 = [];
            $xfer += $input->readString(\$key455);
            {
              my $_size457 = 0;
              $val456 = [];
              my $_etype460 = 0;
              $xfer += $input->readListBegin(\$_etype460, \$_size457);
              for (my $_i461 = 0; $_i461 < $_size457; ++$_i461)
              {
                my $elem462 = undef;
                $xfer += $input->readString(\$elem462);
                push(@{$val456},$elem462);
              }
              $xfer += $input->readListEnd();
            }
            $self->{success}->{$key455} = $val456;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_mrna_by_gene_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::LIST, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter463,$viter464) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter463);
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${viter464}}));
            {
              foreach my $iter465 (@{${viter464}}) 
              {
                $xfer += $output->writeString($iter465);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package genome_annotation::thrift_serviceIf;

use strict;


sub get_taxon{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_assembly{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_feature_types{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_feature_type_descriptions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

  die 'implement interface';
}

sub get_feature_type_counts{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

  die 'implement interface';
}

sub get_feature_ids{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $filters = shift;
  my $group_type = shift;

  die 'implement interface';
}

sub get_features{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_proteins{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_feature_locations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_feature_publications{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_feature_dna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_feature_functions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_feature_aliases{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_cds_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  die 'implement interface';
}

sub get_cds_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

  die 'implement interface';
}

sub get_gene_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $cds_id_list = shift;

  die 'implement interface';
}

sub get_gene_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

  die 'implement interface';
}

sub get_mrna_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  die 'implement interface';
}

sub get_mrna_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  die 'implement interface';
}

package genome_annotation::thrift_serviceRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub get_taxon{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_taxon($token, $ref);
}

sub get_assembly{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_assembly($token, $ref);
}

sub get_feature_types{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_feature_types($token, $ref);
}

sub get_feature_type_descriptions{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_type_list = ($request->{'feature_type_list'}) ? $request->{'feature_type_list'} : undef;
  return $self->{impl}->get_feature_type_descriptions($token, $ref, $feature_type_list);
}

sub get_feature_type_counts{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_type_list = ($request->{'feature_type_list'}) ? $request->{'feature_type_list'} : undef;
  return $self->{impl}->get_feature_type_counts($token, $ref, $feature_type_list);
}

sub get_feature_ids{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $filters = ($request->{'filters'}) ? $request->{'filters'} : undef;
  my $group_type = ($request->{'group_type'}) ? $request->{'group_type'} : undef;
  return $self->{impl}->get_feature_ids($token, $ref, $filters, $group_type);
}

sub get_features{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_features($token, $ref, $feature_id_list);
}

sub get_proteins{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_proteins($token, $ref);
}

sub get_feature_locations{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_locations($token, $ref, $feature_id_list);
}

sub get_feature_publications{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_publications($token, $ref, $feature_id_list);
}

sub get_feature_dna{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_dna($token, $ref, $feature_id_list);
}

sub get_feature_functions{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_functions($token, $ref, $feature_id_list);
}

sub get_feature_aliases{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_aliases($token, $ref, $feature_id_list);
}

sub get_cds_by_gene{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $gene_id_list = ($request->{'gene_id_list'}) ? $request->{'gene_id_list'} : undef;
  return $self->{impl}->get_cds_by_gene($token, $ref, $gene_id_list);
}

sub get_cds_by_mrna{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $mrna_id_list = ($request->{'mrna_id_list'}) ? $request->{'mrna_id_list'} : undef;
  return $self->{impl}->get_cds_by_mrna($token, $ref, $mrna_id_list);
}

sub get_gene_by_cds{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $cds_id_list = ($request->{'cds_id_list'}) ? $request->{'cds_id_list'} : undef;
  return $self->{impl}->get_gene_by_cds($token, $ref, $cds_id_list);
}

sub get_gene_by_mrna{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $mrna_id_list = ($request->{'mrna_id_list'}) ? $request->{'mrna_id_list'} : undef;
  return $self->{impl}->get_gene_by_mrna($token, $ref, $mrna_id_list);
}

sub get_mrna_by_cds{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $gene_id_list = ($request->{'gene_id_list'}) ? $request->{'gene_id_list'} : undef;
  return $self->{impl}->get_mrna_by_cds($token, $ref, $gene_id_list);
}

sub get_mrna_by_gene{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $gene_id_list = ($request->{'gene_id_list'}) ? $request->{'gene_id_list'} : undef;
  return $self->{impl}->get_mrna_by_gene($token, $ref, $gene_id_list);
}

package genome_annotation::thrift_serviceClient;


use base qw(genome_annotation::thrift_serviceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub get_taxon{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_taxon($token, $ref);
  return $self->recv_get_taxon();
}

sub send_get_taxon{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_taxon', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_taxon_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_taxon{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_taxon_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_taxon failed: unknown result";
}
sub get_assembly{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_assembly($token, $ref);
  return $self->recv_get_assembly();
}

sub send_get_assembly{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_assembly', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_assembly_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_assembly{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_assembly_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_assembly failed: unknown result";
}
sub get_feature_types{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_feature_types($token, $ref);
  return $self->recv_get_feature_types();
}

sub send_get_feature_types{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_feature_types', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_feature_types_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_types{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_feature_types_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_types failed: unknown result";
}
sub get_feature_type_descriptions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

    $self->send_get_feature_type_descriptions($token, $ref, $feature_type_list);
  return $self->recv_get_feature_type_descriptions();
}

sub send_get_feature_type_descriptions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

  $self->{output}->writeMessageBegin('get_feature_type_descriptions', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_feature_type_descriptions_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_type_list} = $feature_type_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_type_descriptions{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_feature_type_descriptions_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_type_descriptions failed: unknown result";
}
sub get_feature_type_counts{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

    $self->send_get_feature_type_counts($token, $ref, $feature_type_list);
  return $self->recv_get_feature_type_counts();
}

sub send_get_feature_type_counts{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

  $self->{output}->writeMessageBegin('get_feature_type_counts', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_feature_type_counts_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_type_list} = $feature_type_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_type_counts{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_feature_type_counts_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_type_counts failed: unknown result";
}
sub get_feature_ids{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $filters = shift;
  my $group_type = shift;

    $self->send_get_feature_ids($token, $ref, $filters, $group_type);
  return $self->recv_get_feature_ids();
}

sub send_get_feature_ids{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $filters = shift;
  my $group_type = shift;

  $self->{output}->writeMessageBegin('get_feature_ids', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_feature_ids_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{filters} = $filters;
  $args->{group_type} = $group_type;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_ids{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_feature_ids_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_ids failed: unknown result";
}
sub get_features{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_features($token, $ref, $feature_id_list);
  return $self->recv_get_features();
}

sub send_get_features{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_features', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_features_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_features{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_features_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_features failed: unknown result";
}
sub get_proteins{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_proteins($token, $ref);
  return $self->recv_get_proteins();
}

sub send_get_proteins{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_proteins', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_proteins_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_proteins{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_proteins_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_proteins failed: unknown result";
}
sub get_feature_locations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_locations($token, $ref, $feature_id_list);
  return $self->recv_get_feature_locations();
}

sub send_get_feature_locations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_locations', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_feature_locations_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_locations{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_feature_locations_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_locations failed: unknown result";
}
sub get_feature_publications{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_publications($token, $ref, $feature_id_list);
  return $self->recv_get_feature_publications();
}

sub send_get_feature_publications{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_publications', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_feature_publications_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_publications{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_feature_publications_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_publications failed: unknown result";
}
sub get_feature_dna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_dna($token, $ref, $feature_id_list);
  return $self->recv_get_feature_dna();
}

sub send_get_feature_dna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_dna', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_feature_dna_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_dna{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_feature_dna_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_dna failed: unknown result";
}
sub get_feature_functions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_functions($token, $ref, $feature_id_list);
  return $self->recv_get_feature_functions();
}

sub send_get_feature_functions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_functions', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_feature_functions_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_functions{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_feature_functions_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_functions failed: unknown result";
}
sub get_feature_aliases{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_aliases($token, $ref, $feature_id_list);
  return $self->recv_get_feature_aliases();
}

sub send_get_feature_aliases{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_aliases', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_feature_aliases_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_aliases{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_feature_aliases_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_aliases failed: unknown result";
}
sub get_cds_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

    $self->send_get_cds_by_gene($token, $ref, $gene_id_list);
  return $self->recv_get_cds_by_gene();
}

sub send_get_cds_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  $self->{output}->writeMessageBegin('get_cds_by_gene', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_cds_by_gene_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{gene_id_list} = $gene_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_cds_by_gene{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_cds_by_gene_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_cds_by_gene failed: unknown result";
}
sub get_cds_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

    $self->send_get_cds_by_mrna($token, $ref, $mrna_id_list);
  return $self->recv_get_cds_by_mrna();
}

sub send_get_cds_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

  $self->{output}->writeMessageBegin('get_cds_by_mrna', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_cds_by_mrna_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{mrna_id_list} = $mrna_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_cds_by_mrna{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_cds_by_mrna_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_cds_by_mrna failed: unknown result";
}
sub get_gene_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $cds_id_list = shift;

    $self->send_get_gene_by_cds($token, $ref, $cds_id_list);
  return $self->recv_get_gene_by_cds();
}

sub send_get_gene_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $cds_id_list = shift;

  $self->{output}->writeMessageBegin('get_gene_by_cds', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_gene_by_cds_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{cds_id_list} = $cds_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_gene_by_cds{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_gene_by_cds_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_gene_by_cds failed: unknown result";
}
sub get_gene_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

    $self->send_get_gene_by_mrna($token, $ref, $mrna_id_list);
  return $self->recv_get_gene_by_mrna();
}

sub send_get_gene_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

  $self->{output}->writeMessageBegin('get_gene_by_mrna', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_gene_by_mrna_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{mrna_id_list} = $mrna_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_gene_by_mrna{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_gene_by_mrna_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_gene_by_mrna failed: unknown result";
}
sub get_mrna_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

    $self->send_get_mrna_by_cds($token, $ref, $gene_id_list);
  return $self->recv_get_mrna_by_cds();
}

sub send_get_mrna_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  $self->{output}->writeMessageBegin('get_mrna_by_cds', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_mrna_by_cds_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{gene_id_list} = $gene_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_mrna_by_cds{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_mrna_by_cds_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_mrna_by_cds failed: unknown result";
}
sub get_mrna_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

    $self->send_get_mrna_by_gene($token, $ref, $gene_id_list);
  return $self->recv_get_mrna_by_gene();
}

sub send_get_mrna_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  $self->{output}->writeMessageBegin('get_mrna_by_gene', TMessageType::CALL, $self->{seqid});
  my $args = new genome_annotation::thrift_service_get_mrna_by_gene_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{gene_id_list} = $gene_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_mrna_by_gene{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new genome_annotation::thrift_service_get_mrna_by_gene_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_mrna_by_gene failed: unknown result";
}
package genome_annotation::thrift_serviceProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_get_taxon {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_taxon_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_taxon_result();
    eval {
      $result->{success} = $self->{handler}->get_taxon($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_taxon', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_assembly {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_assembly_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_assembly_result();
    eval {
      $result->{success} = $self->{handler}->get_assembly($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_assembly', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_types {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_feature_types_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_feature_types_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_types($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_types', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_type_descriptions {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_feature_type_descriptions_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_feature_type_descriptions_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_type_descriptions($args->token, $args->ref, $args->feature_type_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_type_descriptions', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_type_counts {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_feature_type_counts_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_feature_type_counts_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_type_counts($args->token, $args->ref, $args->feature_type_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_type_counts', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_ids {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_feature_ids_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_feature_ids_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_ids($args->token, $args->ref, $args->filters, $args->group_type);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_ids', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_features {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_features_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_features_result();
    eval {
      $result->{success} = $self->{handler}->get_features($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_features', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_proteins {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_proteins_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_proteins_result();
    eval {
      $result->{success} = $self->{handler}->get_proteins($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_proteins', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_locations {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_feature_locations_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_feature_locations_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_locations($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_locations', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_publications {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_feature_publications_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_feature_publications_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_publications($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_publications', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_dna {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_feature_dna_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_feature_dna_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_dna($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_dna', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_functions {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_feature_functions_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_feature_functions_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_functions($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_functions', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_aliases {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_feature_aliases_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_feature_aliases_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_aliases($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_aliases', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_cds_by_gene {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_cds_by_gene_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_cds_by_gene_result();
    eval {
      $result->{success} = $self->{handler}->get_cds_by_gene($args->token, $args->ref, $args->gene_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_cds_by_gene', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_cds_by_mrna {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_cds_by_mrna_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_cds_by_mrna_result();
    eval {
      $result->{success} = $self->{handler}->get_cds_by_mrna($args->token, $args->ref, $args->mrna_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_cds_by_mrna', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_gene_by_cds {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_gene_by_cds_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_gene_by_cds_result();
    eval {
      $result->{success} = $self->{handler}->get_gene_by_cds($args->token, $args->ref, $args->cds_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_gene_by_cds', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_gene_by_mrna {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_gene_by_mrna_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_gene_by_mrna_result();
    eval {
      $result->{success} = $self->{handler}->get_gene_by_mrna($args->token, $args->ref, $args->mrna_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_gene_by_mrna', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_mrna_by_cds {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_mrna_by_cds_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_mrna_by_cds_result();
    eval {
      $result->{success} = $self->{handler}->get_mrna_by_cds($args->token, $args->ref, $args->gene_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_mrna_by_cds', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_mrna_by_gene {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new genome_annotation::thrift_service_get_mrna_by_gene_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new genome_annotation::thrift_service_get_mrna_by_gene_result();
    eval {
      $result->{success} = $self->{handler}->get_mrna_by_gene($args->token, $args->ref, $args->gene_id_list);
    }; if( UNIVERSAL::isa($@,'genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_mrna_by_gene', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
