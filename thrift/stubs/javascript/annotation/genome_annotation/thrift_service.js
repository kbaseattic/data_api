//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

genome_annotation.thrift_service_get_taxon_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_taxon_args.prototype = {};
genome_annotation.thrift_service_get_taxon_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxon_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_taxon_result.prototype = {};
genome_annotation.thrift_service_get_taxon_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxon_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_assembly_args.prototype = {};
genome_annotation.thrift_service_get_assembly_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_assembly_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_assembly_result.prototype = {};
genome_annotation.thrift_service_get_assembly_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_assembly_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_feature_types_args.prototype = {};
genome_annotation.thrift_service_get_feature_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_types_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_types_result.prototype = {};
genome_annotation.thrift_service_get_feature_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.success = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = input.readString().value;
          this.success.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter223 in this.success)
    {
      if (this.success.hasOwnProperty(iter223))
      {
        iter223 = this.success[iter223];
        output.writeString(iter223);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_type_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_type_list !== undefined) {
      this.feature_type_list = args.feature_type_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype = {};
genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.feature_type_list = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readString().value;
          this.feature_type_list.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_descriptions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_type_list !== null && this.feature_type_list !== undefined) {
    output.writeFieldBegin('feature_type_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_type_list.length);
    for (var iter231 in this.feature_type_list)
    {
      if (this.feature_type_list.hasOwnProperty(iter231))
      {
        iter231 = this.feature_type_list[iter231];
        output.writeString(iter231);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype = {};
genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size232 = 0;
        var _rtmp3236;
        this.success = {};
        var _ktype233 = 0;
        var _vtype234 = 0;
        _rtmp3236 = input.readMapBegin();
        _ktype233 = _rtmp3236.ktype;
        _vtype234 = _rtmp3236.vtype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          if (_i237 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key238 = null;
          var val239 = null;
          key238 = input.readString().value;
          val239 = input.readString().value;
          this.success[key238] = val239;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_descriptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter240 in this.success)
    {
      if (this.success.hasOwnProperty(kiter240))
      {
        var viter241 = this.success[kiter240];
        output.writeString(kiter240);
        output.writeString(viter241);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_type_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_type_list !== undefined) {
      this.feature_type_list = args.feature_type_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_counts_args.prototype = {};
genome_annotation.thrift_service_get_feature_type_counts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size242 = 0;
        var _rtmp3246;
        this.feature_type_list = [];
        var _etype245 = 0;
        _rtmp3246 = input.readListBegin();
        _etype245 = _rtmp3246.etype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var elem248 = null;
          elem248 = input.readString().value;
          this.feature_type_list.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_counts_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_type_list !== null && this.feature_type_list !== undefined) {
    output.writeFieldBegin('feature_type_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_type_list.length);
    for (var iter249 in this.feature_type_list)
    {
      if (this.feature_type_list.hasOwnProperty(iter249))
      {
        iter249 = this.feature_type_list[iter249];
        output.writeString(iter249);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_counts_result.prototype = {};
genome_annotation.thrift_service_get_feature_type_counts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size250 = 0;
        var _rtmp3254;
        this.success = {};
        var _ktype251 = 0;
        var _vtype252 = 0;
        _rtmp3254 = input.readMapBegin();
        _ktype251 = _rtmp3254.ktype;
        _vtype252 = _rtmp3254.vtype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          if (_i255 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key256 = null;
          var val257 = null;
          key256 = input.readString().value;
          val257 = input.readI64().value;
          this.success[key256] = val257;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_counts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter258 in this.success)
    {
      if (this.success.hasOwnProperty(kiter258))
      {
        var viter259 = this.success[kiter258];
        output.writeString(kiter258);
        output.writeI64(viter259);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_args = function(args) {
  this.token = null;
  this.ref = null;
  this.filters = null;
  this.group_type = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.filters !== undefined) {
      this.filters = args.filters;
    }
    if (args.group_type !== undefined) {
      this.group_type = args.group_type;
    }
  }
};
genome_annotation.thrift_service_get_feature_ids_args.prototype = {};
genome_annotation.thrift_service_get_feature_ids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filters = new genome_annotation.Feature_id_filters();
        this.filters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.group_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_ids_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.STRUCT, 3);
    this.filters.write(output);
    output.writeFieldEnd();
  }
  if (this.group_type !== null && this.group_type !== undefined) {
    output.writeFieldBegin('group_type', Thrift.Type.STRING, 4);
    output.writeString(this.group_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_ids_result.prototype = {};
genome_annotation.thrift_service_get_feature_ids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new genome_annotation.Feature_id_mapping();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_ids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_features_args.prototype = {};
genome_annotation.thrift_service_get_features_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size260 = 0;
        var _rtmp3264;
        this.feature_id_list = [];
        var _etype263 = 0;
        _rtmp3264 = input.readListBegin();
        _etype263 = _rtmp3264.etype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var elem266 = null;
          elem266 = input.readString().value;
          this.feature_id_list.push(elem266);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_features_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter267 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter267))
      {
        iter267 = this.feature_id_list[iter267];
        output.writeString(iter267);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_features_result.prototype = {};
genome_annotation.thrift_service_get_features_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size268 = 0;
        var _rtmp3272;
        this.success = {};
        var _ktype269 = 0;
        var _vtype270 = 0;
        _rtmp3272 = input.readMapBegin();
        _ktype269 = _rtmp3272.ktype;
        _vtype270 = _rtmp3272.vtype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          if (_i273 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key274 = null;
          var val275 = null;
          key274 = input.readString().value;
          val275 = new genome_annotation.Feature_data();
          val275.read(input);
          this.success[key274] = val275;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_features_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter276 in this.success)
    {
      if (this.success.hasOwnProperty(kiter276))
      {
        var viter277 = this.success[kiter276];
        output.writeString(kiter276);
        viter277.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_proteins_args.prototype = {};
genome_annotation.thrift_service_get_proteins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_proteins_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_proteins_result.prototype = {};
genome_annotation.thrift_service_get_proteins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size278 = 0;
        var _rtmp3282;
        this.success = {};
        var _ktype279 = 0;
        var _vtype280 = 0;
        _rtmp3282 = input.readMapBegin();
        _ktype279 = _rtmp3282.ktype;
        _vtype280 = _rtmp3282.vtype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          if (_i283 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key284 = null;
          var val285 = null;
          key284 = input.readString().value;
          val285 = new genome_annotation.Protein_data();
          val285.read(input);
          this.success[key284] = val285;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_proteins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter286 in this.success)
    {
      if (this.success.hasOwnProperty(kiter286))
      {
        var viter287 = this.success[kiter286];
        output.writeString(kiter286);
        viter287.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_locations_args.prototype = {};
genome_annotation.thrift_service_get_feature_locations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.feature_id_list = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = input.readString().value;
          this.feature_id_list.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_locations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter295 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter295))
      {
        iter295 = this.feature_id_list[iter295];
        output.writeString(iter295);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_locations_result.prototype = {};
genome_annotation.thrift_service_get_feature_locations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size296 = 0;
        var _rtmp3300;
        this.success = {};
        var _ktype297 = 0;
        var _vtype298 = 0;
        _rtmp3300 = input.readMapBegin();
        _ktype297 = _rtmp3300.ktype;
        _vtype298 = _rtmp3300.vtype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          if (_i301 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key302 = null;
          var val303 = null;
          key302 = input.readString().value;
          var _size304 = 0;
          var _rtmp3308;
          val303 = [];
          var _etype307 = 0;
          _rtmp3308 = input.readListBegin();
          _etype307 = _rtmp3308.etype;
          _size304 = _rtmp3308.size;
          for (var _i309 = 0; _i309 < _size304; ++_i309)
          {
            var elem310 = null;
            elem310 = new genome_annotation.Region();
            elem310.read(input);
            val303.push(elem310);
          }
          input.readListEnd();
          this.success[key302] = val303;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_locations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter311 in this.success)
    {
      if (this.success.hasOwnProperty(kiter311))
      {
        var viter312 = this.success[kiter311];
        output.writeString(kiter311);
        output.writeListBegin(Thrift.Type.STRUCT, viter312.length);
        for (var iter313 in viter312)
        {
          if (viter312.hasOwnProperty(iter313))
          {
            iter313 = viter312[iter313];
            iter313.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_publications_args.prototype = {};
genome_annotation.thrift_service_get_feature_publications_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size314 = 0;
        var _rtmp3318;
        this.feature_id_list = [];
        var _etype317 = 0;
        _rtmp3318 = input.readListBegin();
        _etype317 = _rtmp3318.etype;
        _size314 = _rtmp3318.size;
        for (var _i319 = 0; _i319 < _size314; ++_i319)
        {
          var elem320 = null;
          elem320 = input.readString().value;
          this.feature_id_list.push(elem320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_publications_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter321 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter321))
      {
        iter321 = this.feature_id_list[iter321];
        output.writeString(iter321);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_publications_result.prototype = {};
genome_annotation.thrift_service_get_feature_publications_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size322 = 0;
        var _rtmp3326;
        this.success = {};
        var _ktype323 = 0;
        var _vtype324 = 0;
        _rtmp3326 = input.readMapBegin();
        _ktype323 = _rtmp3326.ktype;
        _vtype324 = _rtmp3326.vtype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          if (_i327 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key328 = null;
          var val329 = null;
          key328 = input.readString().value;
          var _size330 = 0;
          var _rtmp3334;
          val329 = [];
          var _etype333 = 0;
          _rtmp3334 = input.readListBegin();
          _etype333 = _rtmp3334.etype;
          _size330 = _rtmp3334.size;
          for (var _i335 = 0; _i335 < _size330; ++_i335)
          {
            var elem336 = null;
            elem336 = input.readString().value;
            val329.push(elem336);
          }
          input.readListEnd();
          this.success[key328] = val329;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_publications_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter337 in this.success)
    {
      if (this.success.hasOwnProperty(kiter337))
      {
        var viter338 = this.success[kiter337];
        output.writeString(kiter337);
        output.writeListBegin(Thrift.Type.STRING, viter338.length);
        for (var iter339 in viter338)
        {
          if (viter338.hasOwnProperty(iter339))
          {
            iter339 = viter338[iter339];
            output.writeString(iter339);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_dna_args.prototype = {};
genome_annotation.thrift_service_get_feature_dna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size340 = 0;
        var _rtmp3344;
        this.feature_id_list = [];
        var _etype343 = 0;
        _rtmp3344 = input.readListBegin();
        _etype343 = _rtmp3344.etype;
        _size340 = _rtmp3344.size;
        for (var _i345 = 0; _i345 < _size340; ++_i345)
        {
          var elem346 = null;
          elem346 = input.readString().value;
          this.feature_id_list.push(elem346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_dna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter347 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter347))
      {
        iter347 = this.feature_id_list[iter347];
        output.writeString(iter347);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_dna_result.prototype = {};
genome_annotation.thrift_service_get_feature_dna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size348 = 0;
        var _rtmp3352;
        this.success = {};
        var _ktype349 = 0;
        var _vtype350 = 0;
        _rtmp3352 = input.readMapBegin();
        _ktype349 = _rtmp3352.ktype;
        _vtype350 = _rtmp3352.vtype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          if (_i353 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key354 = null;
          var val355 = null;
          key354 = input.readString().value;
          val355 = input.readString().value;
          this.success[key354] = val355;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_dna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter356 in this.success)
    {
      if (this.success.hasOwnProperty(kiter356))
      {
        var viter357 = this.success[kiter356];
        output.writeString(kiter356);
        output.writeString(viter357);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_functions_args.prototype = {};
genome_annotation.thrift_service_get_feature_functions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size358 = 0;
        var _rtmp3362;
        this.feature_id_list = [];
        var _etype361 = 0;
        _rtmp3362 = input.readListBegin();
        _etype361 = _rtmp3362.etype;
        _size358 = _rtmp3362.size;
        for (var _i363 = 0; _i363 < _size358; ++_i363)
        {
          var elem364 = null;
          elem364 = input.readString().value;
          this.feature_id_list.push(elem364);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_functions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter365 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter365))
      {
        iter365 = this.feature_id_list[iter365];
        output.writeString(iter365);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_functions_result.prototype = {};
genome_annotation.thrift_service_get_feature_functions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size366 = 0;
        var _rtmp3370;
        this.success = {};
        var _ktype367 = 0;
        var _vtype368 = 0;
        _rtmp3370 = input.readMapBegin();
        _ktype367 = _rtmp3370.ktype;
        _vtype368 = _rtmp3370.vtype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          if (_i371 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key372 = null;
          var val373 = null;
          key372 = input.readString().value;
          val373 = input.readString().value;
          this.success[key372] = val373;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_functions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter374 in this.success)
    {
      if (this.success.hasOwnProperty(kiter374))
      {
        var viter375 = this.success[kiter374];
        output.writeString(kiter374);
        output.writeString(viter375);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_aliases_args.prototype = {};
genome_annotation.thrift_service_get_feature_aliases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size376 = 0;
        var _rtmp3380;
        this.feature_id_list = [];
        var _etype379 = 0;
        _rtmp3380 = input.readListBegin();
        _etype379 = _rtmp3380.etype;
        _size376 = _rtmp3380.size;
        for (var _i381 = 0; _i381 < _size376; ++_i381)
        {
          var elem382 = null;
          elem382 = input.readString().value;
          this.feature_id_list.push(elem382);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_aliases_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter383 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter383))
      {
        iter383 = this.feature_id_list[iter383];
        output.writeString(iter383);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_aliases_result.prototype = {};
genome_annotation.thrift_service_get_feature_aliases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size384 = 0;
        var _rtmp3388;
        this.success = {};
        var _ktype385 = 0;
        var _vtype386 = 0;
        _rtmp3388 = input.readMapBegin();
        _ktype385 = _rtmp3388.ktype;
        _vtype386 = _rtmp3388.vtype;
        _size384 = _rtmp3388.size;
        for (var _i389 = 0; _i389 < _size384; ++_i389)
        {
          if (_i389 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key390 = null;
          var val391 = null;
          key390 = input.readString().value;
          var _size392 = 0;
          var _rtmp3396;
          val391 = [];
          var _etype395 = 0;
          _rtmp3396 = input.readListBegin();
          _etype395 = _rtmp3396.etype;
          _size392 = _rtmp3396.size;
          for (var _i397 = 0; _i397 < _size392; ++_i397)
          {
            var elem398 = null;
            elem398 = input.readString().value;
            val391.push(elem398);
          }
          input.readListEnd();
          this.success[key390] = val391;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_aliases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter399 in this.success)
    {
      if (this.success.hasOwnProperty(kiter399))
      {
        var viter400 = this.success[kiter399];
        output.writeString(kiter399);
        output.writeListBegin(Thrift.Type.STRING, viter400.length);
        for (var iter401 in viter400)
        {
          if (viter400.hasOwnProperty(iter401))
          {
            iter401 = viter400[iter401];
            output.writeString(iter401);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_gene_args.prototype = {};
genome_annotation.thrift_service_get_cds_by_gene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size402 = 0;
        var _rtmp3406;
        this.gene_id_list = [];
        var _etype405 = 0;
        _rtmp3406 = input.readListBegin();
        _etype405 = _rtmp3406.etype;
        _size402 = _rtmp3406.size;
        for (var _i407 = 0; _i407 < _size402; ++_i407)
        {
          var elem408 = null;
          elem408 = input.readString().value;
          this.gene_id_list.push(elem408);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_gene_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter409 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter409))
      {
        iter409 = this.gene_id_list[iter409];
        output.writeString(iter409);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_gene_result.prototype = {};
genome_annotation.thrift_service_get_cds_by_gene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size410 = 0;
        var _rtmp3414;
        this.success = {};
        var _ktype411 = 0;
        var _vtype412 = 0;
        _rtmp3414 = input.readMapBegin();
        _ktype411 = _rtmp3414.ktype;
        _vtype412 = _rtmp3414.vtype;
        _size410 = _rtmp3414.size;
        for (var _i415 = 0; _i415 < _size410; ++_i415)
        {
          if (_i415 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key416 = null;
          var val417 = null;
          key416 = input.readString().value;
          var _size418 = 0;
          var _rtmp3422;
          val417 = [];
          var _etype421 = 0;
          _rtmp3422 = input.readListBegin();
          _etype421 = _rtmp3422.etype;
          _size418 = _rtmp3422.size;
          for (var _i423 = 0; _i423 < _size418; ++_i423)
          {
            var elem424 = null;
            elem424 = input.readString().value;
            val417.push(elem424);
          }
          input.readListEnd();
          this.success[key416] = val417;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_gene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter425 in this.success)
    {
      if (this.success.hasOwnProperty(kiter425))
      {
        var viter426 = this.success[kiter425];
        output.writeString(kiter425);
        output.writeListBegin(Thrift.Type.STRING, viter426.length);
        for (var iter427 in viter426)
        {
          if (viter426.hasOwnProperty(iter427))
          {
            iter427 = viter426[iter427];
            output.writeString(iter427);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_mrna_args.prototype = {};
genome_annotation.thrift_service_get_cds_by_mrna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size428 = 0;
        var _rtmp3432;
        this.mrna_id_list = [];
        var _etype431 = 0;
        _rtmp3432 = input.readListBegin();
        _etype431 = _rtmp3432.etype;
        _size428 = _rtmp3432.size;
        for (var _i433 = 0; _i433 < _size428; ++_i433)
        {
          var elem434 = null;
          elem434 = input.readString().value;
          this.mrna_id_list.push(elem434);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_mrna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter435 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter435))
      {
        iter435 = this.mrna_id_list[iter435];
        output.writeString(iter435);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_mrna_result.prototype = {};
genome_annotation.thrift_service_get_cds_by_mrna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size436 = 0;
        var _rtmp3440;
        this.success = {};
        var _ktype437 = 0;
        var _vtype438 = 0;
        _rtmp3440 = input.readMapBegin();
        _ktype437 = _rtmp3440.ktype;
        _vtype438 = _rtmp3440.vtype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          if (_i441 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key442 = null;
          var val443 = null;
          key442 = input.readString().value;
          val443 = input.readString().value;
          this.success[key442] = val443;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_mrna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter444 in this.success)
    {
      if (this.success.hasOwnProperty(kiter444))
      {
        var viter445 = this.success[kiter444];
        output.writeString(kiter444);
        output.writeString(viter445);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_args = function(args) {
  this.token = null;
  this.ref = null;
  this.cds_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.cds_id_list !== undefined) {
      this.cds_id_list = args.cds_id_list;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_cds_args.prototype = {};
genome_annotation.thrift_service_get_gene_by_cds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size446 = 0;
        var _rtmp3450;
        this.cds_id_list = [];
        var _etype449 = 0;
        _rtmp3450 = input.readListBegin();
        _etype449 = _rtmp3450.etype;
        _size446 = _rtmp3450.size;
        for (var _i451 = 0; _i451 < _size446; ++_i451)
        {
          var elem452 = null;
          elem452 = input.readString().value;
          this.cds_id_list.push(elem452);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_cds_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.cds_id_list !== null && this.cds_id_list !== undefined) {
    output.writeFieldBegin('cds_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cds_id_list.length);
    for (var iter453 in this.cds_id_list)
    {
      if (this.cds_id_list.hasOwnProperty(iter453))
      {
        iter453 = this.cds_id_list[iter453];
        output.writeString(iter453);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_cds_result.prototype = {};
genome_annotation.thrift_service_get_gene_by_cds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size454 = 0;
        var _rtmp3458;
        this.success = {};
        var _ktype455 = 0;
        var _vtype456 = 0;
        _rtmp3458 = input.readMapBegin();
        _ktype455 = _rtmp3458.ktype;
        _vtype456 = _rtmp3458.vtype;
        _size454 = _rtmp3458.size;
        for (var _i459 = 0; _i459 < _size454; ++_i459)
        {
          if (_i459 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key460 = null;
          var val461 = null;
          key460 = input.readString().value;
          val461 = input.readString().value;
          this.success[key460] = val461;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_cds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter462 in this.success)
    {
      if (this.success.hasOwnProperty(kiter462))
      {
        var viter463 = this.success[kiter462];
        output.writeString(kiter462);
        output.writeString(viter463);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_mrna_args.prototype = {};
genome_annotation.thrift_service_get_gene_by_mrna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size464 = 0;
        var _rtmp3468;
        this.mrna_id_list = [];
        var _etype467 = 0;
        _rtmp3468 = input.readListBegin();
        _etype467 = _rtmp3468.etype;
        _size464 = _rtmp3468.size;
        for (var _i469 = 0; _i469 < _size464; ++_i469)
        {
          var elem470 = null;
          elem470 = input.readString().value;
          this.mrna_id_list.push(elem470);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_mrna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter471 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter471))
      {
        iter471 = this.mrna_id_list[iter471];
        output.writeString(iter471);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_mrna_result.prototype = {};
genome_annotation.thrift_service_get_gene_by_mrna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size472 = 0;
        var _rtmp3476;
        this.success = {};
        var _ktype473 = 0;
        var _vtype474 = 0;
        _rtmp3476 = input.readMapBegin();
        _ktype473 = _rtmp3476.ktype;
        _vtype474 = _rtmp3476.vtype;
        _size472 = _rtmp3476.size;
        for (var _i477 = 0; _i477 < _size472; ++_i477)
        {
          if (_i477 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key478 = null;
          var val479 = null;
          key478 = input.readString().value;
          val479 = input.readString().value;
          this.success[key478] = val479;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_mrna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter480 in this.success)
    {
      if (this.success.hasOwnProperty(kiter480))
      {
        var viter481 = this.success[kiter480];
        output.writeString(kiter480);
        output.writeString(viter481);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_cds_args.prototype = {};
genome_annotation.thrift_service_get_mrna_by_cds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size482 = 0;
        var _rtmp3486;
        this.gene_id_list = [];
        var _etype485 = 0;
        _rtmp3486 = input.readListBegin();
        _etype485 = _rtmp3486.etype;
        _size482 = _rtmp3486.size;
        for (var _i487 = 0; _i487 < _size482; ++_i487)
        {
          var elem488 = null;
          elem488 = input.readString().value;
          this.gene_id_list.push(elem488);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_cds_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter489 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter489))
      {
        iter489 = this.gene_id_list[iter489];
        output.writeString(iter489);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_cds_result.prototype = {};
genome_annotation.thrift_service_get_mrna_by_cds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size490 = 0;
        var _rtmp3494;
        this.success = {};
        var _ktype491 = 0;
        var _vtype492 = 0;
        _rtmp3494 = input.readMapBegin();
        _ktype491 = _rtmp3494.ktype;
        _vtype492 = _rtmp3494.vtype;
        _size490 = _rtmp3494.size;
        for (var _i495 = 0; _i495 < _size490; ++_i495)
        {
          if (_i495 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key496 = null;
          var val497 = null;
          key496 = input.readString().value;
          val497 = input.readString().value;
          this.success[key496] = val497;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_cds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter498 in this.success)
    {
      if (this.success.hasOwnProperty(kiter498))
      {
        var viter499 = this.success[kiter498];
        output.writeString(kiter498);
        output.writeString(viter499);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_gene_args.prototype = {};
genome_annotation.thrift_service_get_mrna_by_gene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size500 = 0;
        var _rtmp3504;
        this.gene_id_list = [];
        var _etype503 = 0;
        _rtmp3504 = input.readListBegin();
        _etype503 = _rtmp3504.etype;
        _size500 = _rtmp3504.size;
        for (var _i505 = 0; _i505 < _size500; ++_i505)
        {
          var elem506 = null;
          elem506 = input.readString().value;
          this.gene_id_list.push(elem506);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_gene_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter507 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter507))
      {
        iter507 = this.gene_id_list[iter507];
        output.writeString(iter507);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_gene_result.prototype = {};
genome_annotation.thrift_service_get_mrna_by_gene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size508 = 0;
        var _rtmp3512;
        this.success = {};
        var _ktype509 = 0;
        var _vtype510 = 0;
        _rtmp3512 = input.readMapBegin();
        _ktype509 = _rtmp3512.ktype;
        _vtype510 = _rtmp3512.vtype;
        _size508 = _rtmp3512.size;
        for (var _i513 = 0; _i513 < _size508; ++_i513)
        {
          if (_i513 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key514 = null;
          var val515 = null;
          key514 = input.readString().value;
          var _size516 = 0;
          var _rtmp3520;
          val515 = [];
          var _etype519 = 0;
          _rtmp3520 = input.readListBegin();
          _etype519 = _rtmp3520.etype;
          _size516 = _rtmp3520.size;
          for (var _i521 = 0; _i521 < _size516; ++_i521)
          {
            var elem522 = null;
            elem522 = input.readString().value;
            val515.push(elem522);
          }
          input.readListEnd();
          this.success[key514] = val515;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_gene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter523 in this.success)
    {
      if (this.success.hasOwnProperty(kiter523))
      {
        var viter524 = this.success[kiter523];
        output.writeString(kiter523);
        output.writeListBegin(Thrift.Type.STRING, viter524.length);
        for (var iter525 in viter524)
        {
          if (viter524.hasOwnProperty(iter525))
          {
            iter525 = viter524[iter525];
            output.writeString(iter525);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_serviceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
genome_annotation.thrift_serviceClient.prototype = {};
genome_annotation.thrift_serviceClient.prototype.get_taxon = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_taxon(token, ref);
    return this.recv_get_taxon();
  } else {
    var postData = this.send_get_taxon(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_taxon);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_taxon = function(token, ref, callback) {
  this.output.writeMessageBegin('get_taxon', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_taxon_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_taxon = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_taxon_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_taxon failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_assembly = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_assembly(token, ref);
    return this.recv_get_assembly();
  } else {
    var postData = this.send_get_assembly(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_assembly);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_assembly = function(token, ref, callback) {
  this.output.writeMessageBegin('get_assembly', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_assembly_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_assembly = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_assembly_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_assembly failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_types = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_feature_types(token, ref);
    return this.recv_get_feature_types();
  } else {
    var postData = this.send_get_feature_types(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_types);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_types = function(token, ref, callback) {
  this.output.writeMessageBegin('get_feature_types', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_types_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_types = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_types_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_types failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_type_descriptions = function(token, ref, feature_type_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_type_descriptions(token, ref, feature_type_list);
    return this.recv_get_feature_type_descriptions();
  } else {
    var postData = this.send_get_feature_type_descriptions(token, ref, feature_type_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_type_descriptions);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_type_descriptions = function(token, ref, feature_type_list, callback) {
  this.output.writeMessageBegin('get_feature_type_descriptions', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_type_descriptions_args();
  args.token = token;
  args.ref = ref;
  args.feature_type_list = feature_type_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_type_descriptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_type_descriptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_type_descriptions failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_type_counts = function(token, ref, feature_type_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_type_counts(token, ref, feature_type_list);
    return this.recv_get_feature_type_counts();
  } else {
    var postData = this.send_get_feature_type_counts(token, ref, feature_type_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_type_counts);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_type_counts = function(token, ref, feature_type_list, callback) {
  this.output.writeMessageBegin('get_feature_type_counts', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_type_counts_args();
  args.token = token;
  args.ref = ref;
  args.feature_type_list = feature_type_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_type_counts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_type_counts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_type_counts failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_ids = function(token, ref, filters, group_type, callback) {
  if (callback === undefined) {
    this.send_get_feature_ids(token, ref, filters, group_type);
    return this.recv_get_feature_ids();
  } else {
    var postData = this.send_get_feature_ids(token, ref, filters, group_type, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_ids);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_ids = function(token, ref, filters, group_type, callback) {
  this.output.writeMessageBegin('get_feature_ids', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_ids_args();
  args.token = token;
  args.ref = ref;
  args.filters = filters;
  args.group_type = group_type;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_ids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_ids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_ids failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_features = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_features(token, ref, feature_id_list);
    return this.recv_get_features();
  } else {
    var postData = this.send_get_features(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_features);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_features = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_features', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_features_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_features = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_features_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_features failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_proteins = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_proteins(token, ref);
    return this.recv_get_proteins();
  } else {
    var postData = this.send_get_proteins(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_proteins);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_proteins = function(token, ref, callback) {
  this.output.writeMessageBegin('get_proteins', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_proteins_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_proteins = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_proteins_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_proteins failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_locations = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_locations(token, ref, feature_id_list);
    return this.recv_get_feature_locations();
  } else {
    var postData = this.send_get_feature_locations(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_locations);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_locations = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_locations', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_locations_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_locations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_locations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_locations failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_publications = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_publications(token, ref, feature_id_list);
    return this.recv_get_feature_publications();
  } else {
    var postData = this.send_get_feature_publications(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_publications);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_publications = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_publications', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_publications_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_publications = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_publications_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_publications failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_dna = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_dna(token, ref, feature_id_list);
    return this.recv_get_feature_dna();
  } else {
    var postData = this.send_get_feature_dna(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_dna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_dna = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_dna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_dna_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_dna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_dna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_dna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_functions = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_functions(token, ref, feature_id_list);
    return this.recv_get_feature_functions();
  } else {
    var postData = this.send_get_feature_functions(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_functions);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_functions = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_functions', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_functions_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_functions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_functions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_functions failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_aliases = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_aliases(token, ref, feature_id_list);
    return this.recv_get_feature_aliases();
  } else {
    var postData = this.send_get_feature_aliases(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_aliases);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_aliases = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_aliases', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_aliases_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_aliases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_aliases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_aliases failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_cds_by_gene = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_cds_by_gene(token, ref, gene_id_list);
    return this.recv_get_cds_by_gene();
  } else {
    var postData = this.send_get_cds_by_gene(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_cds_by_gene);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_cds_by_gene = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_cds_by_gene', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_cds_by_gene_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_cds_by_gene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_cds_by_gene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_cds_by_gene failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_cds_by_mrna = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_cds_by_mrna(token, ref, mrna_id_list);
    return this.recv_get_cds_by_mrna();
  } else {
    var postData = this.send_get_cds_by_mrna(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_cds_by_mrna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_cds_by_mrna = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_cds_by_mrna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_cds_by_mrna_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_cds_by_mrna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_cds_by_mrna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_cds_by_mrna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_gene_by_cds = function(token, ref, cds_id_list, callback) {
  if (callback === undefined) {
    this.send_get_gene_by_cds(token, ref, cds_id_list);
    return this.recv_get_gene_by_cds();
  } else {
    var postData = this.send_get_gene_by_cds(token, ref, cds_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_gene_by_cds);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_gene_by_cds = function(token, ref, cds_id_list, callback) {
  this.output.writeMessageBegin('get_gene_by_cds', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_gene_by_cds_args();
  args.token = token;
  args.ref = ref;
  args.cds_id_list = cds_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_gene_by_cds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_gene_by_cds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_gene_by_cds failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_gene_by_mrna = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_gene_by_mrna(token, ref, mrna_id_list);
    return this.recv_get_gene_by_mrna();
  } else {
    var postData = this.send_get_gene_by_mrna(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_gene_by_mrna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_gene_by_mrna = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_gene_by_mrna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_gene_by_mrna_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_gene_by_mrna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_gene_by_mrna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_gene_by_mrna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_by_cds = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_by_cds(token, ref, gene_id_list);
    return this.recv_get_mrna_by_cds();
  } else {
    var postData = this.send_get_mrna_by_cds(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_by_cds);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_by_cds = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_by_cds', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_by_cds_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_by_cds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_by_cds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_by_cds failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_by_gene = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_by_gene(token, ref, gene_id_list);
    return this.recv_get_mrna_by_gene();
  } else {
    var postData = this.send_get_mrna_by_gene(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_by_gene);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_by_gene = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_by_gene', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_by_gene_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_by_gene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_by_gene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_by_gene failed: unknown result';
};
