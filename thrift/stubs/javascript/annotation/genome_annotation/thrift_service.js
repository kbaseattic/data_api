//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

genome_annotation.thrift_service_get_taxon_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_taxon_args.prototype = {};
genome_annotation.thrift_service_get_taxon_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxon_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_taxon_result.prototype = {};
genome_annotation.thrift_service_get_taxon_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_taxon_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxon_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_assembly_args.prototype = {};
genome_annotation.thrift_service_get_assembly_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_assembly_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_assembly_result.prototype = {};
genome_annotation.thrift_service_get_assembly_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_assembly_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_assembly_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
  }
};
genome_annotation.thrift_service_get_feature_types_args.prototype = {};
genome_annotation.thrift_service_get_feature_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_types_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_types_result.prototype = {};
genome_annotation.thrift_service_get_feature_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.success = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = input.readString().value;
          this.success.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_types_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter223 in this.success)
    {
      if (this.success.hasOwnProperty(iter223))
      {
        iter223 = this.success[iter223];
        output.writeString(iter223);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_type_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_type_list !== undefined) {
      this.feature_type_list = args.feature_type_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype = {};
genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.feature_type_list = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readString().value;
          this.feature_type_list.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_descriptions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_type_list !== null && this.feature_type_list !== undefined) {
    output.writeFieldBegin('feature_type_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_type_list.length);
    for (var iter231 in this.feature_type_list)
    {
      if (this.feature_type_list.hasOwnProperty(iter231))
      {
        iter231 = this.feature_type_list[iter231];
        output.writeString(iter231);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype = {};
genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size232 = 0;
        var _rtmp3236;
        this.success = {};
        var _ktype233 = 0;
        var _vtype234 = 0;
        _rtmp3236 = input.readMapBegin();
        _ktype233 = _rtmp3236.ktype;
        _vtype234 = _rtmp3236.vtype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          if (_i237 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key238 = null;
          var val239 = null;
          key238 = input.readString().value;
          val239 = input.readString().value;
          this.success[key238] = val239;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_descriptions_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_descriptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter240 in this.success)
    {
      if (this.success.hasOwnProperty(kiter240))
      {
        var viter241 = this.success[kiter240];
        output.writeString(kiter240);
        output.writeString(viter241);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_type_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_type_list !== undefined) {
      this.feature_type_list = args.feature_type_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_counts_args.prototype = {};
genome_annotation.thrift_service_get_feature_type_counts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size242 = 0;
        var _rtmp3246;
        this.feature_type_list = [];
        var _etype245 = 0;
        _rtmp3246 = input.readListBegin();
        _etype245 = _rtmp3246.etype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var elem248 = null;
          elem248 = input.readString().value;
          this.feature_type_list.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_counts_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_type_list !== null && this.feature_type_list !== undefined) {
    output.writeFieldBegin('feature_type_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_type_list.length);
    for (var iter249 in this.feature_type_list)
    {
      if (this.feature_type_list.hasOwnProperty(iter249))
      {
        iter249 = this.feature_type_list[iter249];
        output.writeString(iter249);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_type_counts_result.prototype = {};
genome_annotation.thrift_service_get_feature_type_counts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size250 = 0;
        var _rtmp3254;
        this.success = {};
        var _ktype251 = 0;
        var _vtype252 = 0;
        _rtmp3254 = input.readMapBegin();
        _ktype251 = _rtmp3254.ktype;
        _vtype252 = _rtmp3254.vtype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          if (_i255 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key256 = null;
          var val257 = null;
          key256 = input.readString().value;
          val257 = input.readI64().value;
          this.success[key256] = val257;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_type_counts_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_type_counts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter258 in this.success)
    {
      if (this.success.hasOwnProperty(kiter258))
      {
        var viter259 = this.success[kiter258];
        output.writeString(kiter258);
        output.writeI64(viter259);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_args = function(args) {
  this.token = null;
  this.ref = null;
  this.filters = null;
  this.group_type = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.filters !== undefined) {
      this.filters = args.filters;
    }
    if (args.group_type !== undefined) {
      this.group_type = args.group_type;
    }
  }
};
genome_annotation.thrift_service_get_feature_ids_args.prototype = {};
genome_annotation.thrift_service_get_feature_ids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filters = new genome_annotation.Feature_id_filters();
        this.filters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.group_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_ids_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.STRUCT, 3);
    this.filters.write(output);
    output.writeFieldEnd();
  }
  if (this.group_type !== null && this.group_type !== undefined) {
    output.writeFieldBegin('group_type', Thrift.Type.STRING, 4);
    output.writeString(this.group_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_ids_result.prototype = {};
genome_annotation.thrift_service_get_feature_ids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new genome_annotation.Feature_id_mapping();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_ids_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_ids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_features_args.prototype = {};
genome_annotation.thrift_service_get_features_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size260 = 0;
        var _rtmp3264;
        this.feature_id_list = [];
        var _etype263 = 0;
        _rtmp3264 = input.readListBegin();
        _etype263 = _rtmp3264.etype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var elem266 = null;
          elem266 = input.readString().value;
          this.feature_id_list.push(elem266);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_features_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter267 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter267))
      {
        iter267 = this.feature_id_list[iter267];
        output.writeString(iter267);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_features_result.prototype = {};
genome_annotation.thrift_service_get_features_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size268 = 0;
        var _rtmp3272;
        this.success = {};
        var _ktype269 = 0;
        var _vtype270 = 0;
        _rtmp3272 = input.readMapBegin();
        _ktype269 = _rtmp3272.ktype;
        _vtype270 = _rtmp3272.vtype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          if (_i273 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key274 = null;
          var val275 = null;
          key274 = input.readString().value;
          val275 = new genome_annotation.Feature_data();
          val275.read(input);
          this.success[key274] = val275;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_features_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_features_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter276 in this.success)
    {
      if (this.success.hasOwnProperty(kiter276))
      {
        var viter277 = this.success[kiter276];
        output.writeString(kiter276);
        viter277.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_args = function(args) {
  this.token = null;
  this.ref = null;
  this.cds_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.cds_id_list !== undefined) {
      this.cds_id_list = args.cds_id_list;
    }
  }
};
genome_annotation.thrift_service_get_proteins_args.prototype = {};
genome_annotation.thrift_service_get_proteins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.cds_id_list = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = input.readString().value;
          this.cds_id_list.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_proteins_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.cds_id_list !== null && this.cds_id_list !== undefined) {
    output.writeFieldBegin('cds_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cds_id_list.length);
    for (var iter285 in this.cds_id_list)
    {
      if (this.cds_id_list.hasOwnProperty(iter285))
      {
        iter285 = this.cds_id_list[iter285];
        output.writeString(iter285);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_proteins_result.prototype = {};
genome_annotation.thrift_service_get_proteins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size286 = 0;
        var _rtmp3290;
        this.success = {};
        var _ktype287 = 0;
        var _vtype288 = 0;
        _rtmp3290 = input.readMapBegin();
        _ktype287 = _rtmp3290.ktype;
        _vtype288 = _rtmp3290.vtype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          if (_i291 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key292 = null;
          var val293 = null;
          key292 = input.readString().value;
          val293 = new genome_annotation.Protein_data();
          val293.read(input);
          this.success[key292] = val293;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_proteins_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_proteins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter294 in this.success)
    {
      if (this.success.hasOwnProperty(kiter294))
      {
        var viter295 = this.success[kiter294];
        output.writeString(kiter294);
        viter295.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_locations_args.prototype = {};
genome_annotation.thrift_service_get_feature_locations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.feature_id_list = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = input.readString().value;
          this.feature_id_list.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_locations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter303 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter303))
      {
        iter303 = this.feature_id_list[iter303];
        output.writeString(iter303);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_locations_result.prototype = {};
genome_annotation.thrift_service_get_feature_locations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size304 = 0;
        var _rtmp3308;
        this.success = {};
        var _ktype305 = 0;
        var _vtype306 = 0;
        _rtmp3308 = input.readMapBegin();
        _ktype305 = _rtmp3308.ktype;
        _vtype306 = _rtmp3308.vtype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          if (_i309 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key310 = null;
          var val311 = null;
          key310 = input.readString().value;
          var _size312 = 0;
          var _rtmp3316;
          val311 = [];
          var _etype315 = 0;
          _rtmp3316 = input.readListBegin();
          _etype315 = _rtmp3316.etype;
          _size312 = _rtmp3316.size;
          for (var _i317 = 0; _i317 < _size312; ++_i317)
          {
            var elem318 = null;
            elem318 = new genome_annotation.Region();
            elem318.read(input);
            val311.push(elem318);
          }
          input.readListEnd();
          this.success[key310] = val311;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_locations_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_locations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter319 in this.success)
    {
      if (this.success.hasOwnProperty(kiter319))
      {
        var viter320 = this.success[kiter319];
        output.writeString(kiter319);
        output.writeListBegin(Thrift.Type.STRUCT, viter320.length);
        for (var iter321 in viter320)
        {
          if (viter320.hasOwnProperty(iter321))
          {
            iter321 = viter320[iter321];
            iter321.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_publications_args.prototype = {};
genome_annotation.thrift_service_get_feature_publications_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.feature_id_list = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = input.readString().value;
          this.feature_id_list.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_publications_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter329 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter329))
      {
        iter329 = this.feature_id_list[iter329];
        output.writeString(iter329);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_publications_result.prototype = {};
genome_annotation.thrift_service_get_feature_publications_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size330 = 0;
        var _rtmp3334;
        this.success = {};
        var _ktype331 = 0;
        var _vtype332 = 0;
        _rtmp3334 = input.readMapBegin();
        _ktype331 = _rtmp3334.ktype;
        _vtype332 = _rtmp3334.vtype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          if (_i335 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key336 = null;
          var val337 = null;
          key336 = input.readString().value;
          var _size338 = 0;
          var _rtmp3342;
          val337 = [];
          var _etype341 = 0;
          _rtmp3342 = input.readListBegin();
          _etype341 = _rtmp3342.etype;
          _size338 = _rtmp3342.size;
          for (var _i343 = 0; _i343 < _size338; ++_i343)
          {
            var elem344 = null;
            elem344 = input.readString().value;
            val337.push(elem344);
          }
          input.readListEnd();
          this.success[key336] = val337;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_publications_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_publications_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter345 in this.success)
    {
      if (this.success.hasOwnProperty(kiter345))
      {
        var viter346 = this.success[kiter345];
        output.writeString(kiter345);
        output.writeListBegin(Thrift.Type.STRING, viter346.length);
        for (var iter347 in viter346)
        {
          if (viter346.hasOwnProperty(iter347))
          {
            iter347 = viter346[iter347];
            output.writeString(iter347);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_dna_args.prototype = {};
genome_annotation.thrift_service_get_feature_dna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size348 = 0;
        var _rtmp3352;
        this.feature_id_list = [];
        var _etype351 = 0;
        _rtmp3352 = input.readListBegin();
        _etype351 = _rtmp3352.etype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          var elem354 = null;
          elem354 = input.readString().value;
          this.feature_id_list.push(elem354);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_dna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter355 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter355))
      {
        iter355 = this.feature_id_list[iter355];
        output.writeString(iter355);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_dna_result.prototype = {};
genome_annotation.thrift_service_get_feature_dna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size356 = 0;
        var _rtmp3360;
        this.success = {};
        var _ktype357 = 0;
        var _vtype358 = 0;
        _rtmp3360 = input.readMapBegin();
        _ktype357 = _rtmp3360.ktype;
        _vtype358 = _rtmp3360.vtype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          if (_i361 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key362 = null;
          var val363 = null;
          key362 = input.readString().value;
          val363 = input.readString().value;
          this.success[key362] = val363;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_dna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_dna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter364 in this.success)
    {
      if (this.success.hasOwnProperty(kiter364))
      {
        var viter365 = this.success[kiter364];
        output.writeString(kiter364);
        output.writeString(viter365);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_functions_args.prototype = {};
genome_annotation.thrift_service_get_feature_functions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size366 = 0;
        var _rtmp3370;
        this.feature_id_list = [];
        var _etype369 = 0;
        _rtmp3370 = input.readListBegin();
        _etype369 = _rtmp3370.etype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          var elem372 = null;
          elem372 = input.readString().value;
          this.feature_id_list.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_functions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter373 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter373))
      {
        iter373 = this.feature_id_list[iter373];
        output.writeString(iter373);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_functions_result.prototype = {};
genome_annotation.thrift_service_get_feature_functions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size374 = 0;
        var _rtmp3378;
        this.success = {};
        var _ktype375 = 0;
        var _vtype376 = 0;
        _rtmp3378 = input.readMapBegin();
        _ktype375 = _rtmp3378.ktype;
        _vtype376 = _rtmp3378.vtype;
        _size374 = _rtmp3378.size;
        for (var _i379 = 0; _i379 < _size374; ++_i379)
        {
          if (_i379 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key380 = null;
          var val381 = null;
          key380 = input.readString().value;
          val381 = input.readString().value;
          this.success[key380] = val381;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_functions_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_functions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter382 in this.success)
    {
      if (this.success.hasOwnProperty(kiter382))
      {
        var viter383 = this.success[kiter382];
        output.writeString(kiter382);
        output.writeString(viter383);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_args = function(args) {
  this.token = null;
  this.ref = null;
  this.feature_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.feature_id_list !== undefined) {
      this.feature_id_list = args.feature_id_list;
    }
  }
};
genome_annotation.thrift_service_get_feature_aliases_args.prototype = {};
genome_annotation.thrift_service_get_feature_aliases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size384 = 0;
        var _rtmp3388;
        this.feature_id_list = [];
        var _etype387 = 0;
        _rtmp3388 = input.readListBegin();
        _etype387 = _rtmp3388.etype;
        _size384 = _rtmp3388.size;
        for (var _i389 = 0; _i389 < _size384; ++_i389)
        {
          var elem390 = null;
          elem390 = input.readString().value;
          this.feature_id_list.push(elem390);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_aliases_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.feature_id_list !== null && this.feature_id_list !== undefined) {
    output.writeFieldBegin('feature_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.feature_id_list.length);
    for (var iter391 in this.feature_id_list)
    {
      if (this.feature_id_list.hasOwnProperty(iter391))
      {
        iter391 = this.feature_id_list[iter391];
        output.writeString(iter391);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_feature_aliases_result.prototype = {};
genome_annotation.thrift_service_get_feature_aliases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size392 = 0;
        var _rtmp3396;
        this.success = {};
        var _ktype393 = 0;
        var _vtype394 = 0;
        _rtmp3396 = input.readMapBegin();
        _ktype393 = _rtmp3396.ktype;
        _vtype394 = _rtmp3396.vtype;
        _size392 = _rtmp3396.size;
        for (var _i397 = 0; _i397 < _size392; ++_i397)
        {
          if (_i397 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key398 = null;
          var val399 = null;
          key398 = input.readString().value;
          var _size400 = 0;
          var _rtmp3404;
          val399 = [];
          var _etype403 = 0;
          _rtmp3404 = input.readListBegin();
          _etype403 = _rtmp3404.etype;
          _size400 = _rtmp3404.size;
          for (var _i405 = 0; _i405 < _size400; ++_i405)
          {
            var elem406 = null;
            elem406 = input.readString().value;
            val399.push(elem406);
          }
          input.readListEnd();
          this.success[key398] = val399;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_feature_aliases_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_feature_aliases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter407 in this.success)
    {
      if (this.success.hasOwnProperty(kiter407))
      {
        var viter408 = this.success[kiter407];
        output.writeString(kiter407);
        output.writeListBegin(Thrift.Type.STRING, viter408.length);
        for (var iter409 in viter408)
        {
          if (viter408.hasOwnProperty(iter409))
          {
            iter409 = viter408[iter409];
            output.writeString(iter409);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_gene_args.prototype = {};
genome_annotation.thrift_service_get_cds_by_gene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size410 = 0;
        var _rtmp3414;
        this.gene_id_list = [];
        var _etype413 = 0;
        _rtmp3414 = input.readListBegin();
        _etype413 = _rtmp3414.etype;
        _size410 = _rtmp3414.size;
        for (var _i415 = 0; _i415 < _size410; ++_i415)
        {
          var elem416 = null;
          elem416 = input.readString().value;
          this.gene_id_list.push(elem416);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_gene_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter417 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter417))
      {
        iter417 = this.gene_id_list[iter417];
        output.writeString(iter417);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_gene_result.prototype = {};
genome_annotation.thrift_service_get_cds_by_gene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size418 = 0;
        var _rtmp3422;
        this.success = {};
        var _ktype419 = 0;
        var _vtype420 = 0;
        _rtmp3422 = input.readMapBegin();
        _ktype419 = _rtmp3422.ktype;
        _vtype420 = _rtmp3422.vtype;
        _size418 = _rtmp3422.size;
        for (var _i423 = 0; _i423 < _size418; ++_i423)
        {
          if (_i423 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key424 = null;
          var val425 = null;
          key424 = input.readString().value;
          var _size426 = 0;
          var _rtmp3430;
          val425 = [];
          var _etype429 = 0;
          _rtmp3430 = input.readListBegin();
          _etype429 = _rtmp3430.etype;
          _size426 = _rtmp3430.size;
          for (var _i431 = 0; _i431 < _size426; ++_i431)
          {
            var elem432 = null;
            elem432 = input.readString().value;
            val425.push(elem432);
          }
          input.readListEnd();
          this.success[key424] = val425;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_gene_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_gene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter433 in this.success)
    {
      if (this.success.hasOwnProperty(kiter433))
      {
        var viter434 = this.success[kiter433];
        output.writeString(kiter433);
        output.writeListBegin(Thrift.Type.STRING, viter434.length);
        for (var iter435 in viter434)
        {
          if (viter434.hasOwnProperty(iter435))
          {
            iter435 = viter434[iter435];
            output.writeString(iter435);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_mrna_args.prototype = {};
genome_annotation.thrift_service_get_cds_by_mrna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size436 = 0;
        var _rtmp3440;
        this.mrna_id_list = [];
        var _etype439 = 0;
        _rtmp3440 = input.readListBegin();
        _etype439 = _rtmp3440.etype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          var elem442 = null;
          elem442 = input.readString().value;
          this.mrna_id_list.push(elem442);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_mrna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter443 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter443))
      {
        iter443 = this.mrna_id_list[iter443];
        output.writeString(iter443);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_cds_by_mrna_result.prototype = {};
genome_annotation.thrift_service_get_cds_by_mrna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size444 = 0;
        var _rtmp3448;
        this.success = {};
        var _ktype445 = 0;
        var _vtype446 = 0;
        _rtmp3448 = input.readMapBegin();
        _ktype445 = _rtmp3448.ktype;
        _vtype446 = _rtmp3448.vtype;
        _size444 = _rtmp3448.size;
        for (var _i449 = 0; _i449 < _size444; ++_i449)
        {
          if (_i449 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key450 = null;
          var val451 = null;
          key450 = input.readString().value;
          val451 = input.readString().value;
          this.success[key450] = val451;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_cds_by_mrna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_cds_by_mrna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter452 in this.success)
    {
      if (this.success.hasOwnProperty(kiter452))
      {
        var viter453 = this.success[kiter452];
        output.writeString(kiter452);
        output.writeString(viter453);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_args = function(args) {
  this.token = null;
  this.ref = null;
  this.cds_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.cds_id_list !== undefined) {
      this.cds_id_list = args.cds_id_list;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_cds_args.prototype = {};
genome_annotation.thrift_service_get_gene_by_cds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size454 = 0;
        var _rtmp3458;
        this.cds_id_list = [];
        var _etype457 = 0;
        _rtmp3458 = input.readListBegin();
        _etype457 = _rtmp3458.etype;
        _size454 = _rtmp3458.size;
        for (var _i459 = 0; _i459 < _size454; ++_i459)
        {
          var elem460 = null;
          elem460 = input.readString().value;
          this.cds_id_list.push(elem460);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_cds_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.cds_id_list !== null && this.cds_id_list !== undefined) {
    output.writeFieldBegin('cds_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cds_id_list.length);
    for (var iter461 in this.cds_id_list)
    {
      if (this.cds_id_list.hasOwnProperty(iter461))
      {
        iter461 = this.cds_id_list[iter461];
        output.writeString(iter461);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_cds_result.prototype = {};
genome_annotation.thrift_service_get_gene_by_cds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size462 = 0;
        var _rtmp3466;
        this.success = {};
        var _ktype463 = 0;
        var _vtype464 = 0;
        _rtmp3466 = input.readMapBegin();
        _ktype463 = _rtmp3466.ktype;
        _vtype464 = _rtmp3466.vtype;
        _size462 = _rtmp3466.size;
        for (var _i467 = 0; _i467 < _size462; ++_i467)
        {
          if (_i467 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key468 = null;
          var val469 = null;
          key468 = input.readString().value;
          val469 = input.readString().value;
          this.success[key468] = val469;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_cds_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_cds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter470 in this.success)
    {
      if (this.success.hasOwnProperty(kiter470))
      {
        var viter471 = this.success[kiter470];
        output.writeString(kiter470);
        output.writeString(viter471);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_mrna_args.prototype = {};
genome_annotation.thrift_service_get_gene_by_mrna_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size472 = 0;
        var _rtmp3476;
        this.mrna_id_list = [];
        var _etype475 = 0;
        _rtmp3476 = input.readListBegin();
        _etype475 = _rtmp3476.etype;
        _size472 = _rtmp3476.size;
        for (var _i477 = 0; _i477 < _size472; ++_i477)
        {
          var elem478 = null;
          elem478 = input.readString().value;
          this.mrna_id_list.push(elem478);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_mrna_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter479 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter479))
      {
        iter479 = this.mrna_id_list[iter479];
        output.writeString(iter479);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_gene_by_mrna_result.prototype = {};
genome_annotation.thrift_service_get_gene_by_mrna_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size480 = 0;
        var _rtmp3484;
        this.success = {};
        var _ktype481 = 0;
        var _vtype482 = 0;
        _rtmp3484 = input.readMapBegin();
        _ktype481 = _rtmp3484.ktype;
        _vtype482 = _rtmp3484.vtype;
        _size480 = _rtmp3484.size;
        for (var _i485 = 0; _i485 < _size480; ++_i485)
        {
          if (_i485 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key486 = null;
          var val487 = null;
          key486 = input.readString().value;
          val487 = input.readString().value;
          this.success[key486] = val487;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gene_by_mrna_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gene_by_mrna_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter488 in this.success)
    {
      if (this.success.hasOwnProperty(kiter488))
      {
        var viter489 = this.success[kiter488];
        output.writeString(kiter488);
        output.writeString(viter489);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_args = function(args) {
  this.token = null;
  this.ref = null;
  this.cds_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.cds_id_list !== undefined) {
      this.cds_id_list = args.cds_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_cds_args.prototype = {};
genome_annotation.thrift_service_get_mrna_by_cds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size490 = 0;
        var _rtmp3494;
        this.cds_id_list = [];
        var _etype493 = 0;
        _rtmp3494 = input.readListBegin();
        _etype493 = _rtmp3494.etype;
        _size490 = _rtmp3494.size;
        for (var _i495 = 0; _i495 < _size490; ++_i495)
        {
          var elem496 = null;
          elem496 = input.readString().value;
          this.cds_id_list.push(elem496);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_cds_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.cds_id_list !== null && this.cds_id_list !== undefined) {
    output.writeFieldBegin('cds_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cds_id_list.length);
    for (var iter497 in this.cds_id_list)
    {
      if (this.cds_id_list.hasOwnProperty(iter497))
      {
        iter497 = this.cds_id_list[iter497];
        output.writeString(iter497);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_cds_result.prototype = {};
genome_annotation.thrift_service_get_mrna_by_cds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size498 = 0;
        var _rtmp3502;
        this.success = {};
        var _ktype499 = 0;
        var _vtype500 = 0;
        _rtmp3502 = input.readMapBegin();
        _ktype499 = _rtmp3502.ktype;
        _vtype500 = _rtmp3502.vtype;
        _size498 = _rtmp3502.size;
        for (var _i503 = 0; _i503 < _size498; ++_i503)
        {
          if (_i503 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key504 = null;
          var val505 = null;
          key504 = input.readString().value;
          val505 = input.readString().value;
          this.success[key504] = val505;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_cds_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_cds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter506 in this.success)
    {
      if (this.success.hasOwnProperty(kiter506))
      {
        var viter507 = this.success[kiter506];
        output.writeString(kiter506);
        output.writeString(viter507);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_gene_args.prototype = {};
genome_annotation.thrift_service_get_mrna_by_gene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size508 = 0;
        var _rtmp3512;
        this.gene_id_list = [];
        var _etype511 = 0;
        _rtmp3512 = input.readListBegin();
        _etype511 = _rtmp3512.etype;
        _size508 = _rtmp3512.size;
        for (var _i513 = 0; _i513 < _size508; ++_i513)
        {
          var elem514 = null;
          elem514 = input.readString().value;
          this.gene_id_list.push(elem514);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_gene_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter515 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter515))
      {
        iter515 = this.gene_id_list[iter515];
        output.writeString(iter515);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_by_gene_result.prototype = {};
genome_annotation.thrift_service_get_mrna_by_gene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size516 = 0;
        var _rtmp3520;
        this.success = {};
        var _ktype517 = 0;
        var _vtype518 = 0;
        _rtmp3520 = input.readMapBegin();
        _ktype517 = _rtmp3520.ktype;
        _vtype518 = _rtmp3520.vtype;
        _size516 = _rtmp3520.size;
        for (var _i521 = 0; _i521 < _size516; ++_i521)
        {
          if (_i521 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key522 = null;
          var val523 = null;
          key522 = input.readString().value;
          var _size524 = 0;
          var _rtmp3528;
          val523 = [];
          var _etype527 = 0;
          _rtmp3528 = input.readListBegin();
          _etype527 = _rtmp3528.etype;
          _size524 = _rtmp3528.size;
          for (var _i529 = 0; _i529 < _size524; ++_i529)
          {
            var elem530 = null;
            elem530 = input.readString().value;
            val523.push(elem530);
          }
          input.readListEnd();
          this.success[key522] = val523;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_by_gene_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_by_gene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter531 in this.success)
    {
      if (this.success.hasOwnProperty(kiter531))
      {
        var viter532 = this.success[kiter531];
        output.writeString(kiter531);
        output.writeListBegin(Thrift.Type.STRING, viter532.length);
        for (var iter533 in viter532)
        {
          if (viter532.hasOwnProperty(iter533))
          {
            iter533 = viter532[iter533];
            output.writeString(iter533);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_exons_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_exons_args.prototype = {};
genome_annotation.thrift_service_get_mrna_exons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size534 = 0;
        var _rtmp3538;
        this.mrna_id_list = [];
        var _etype537 = 0;
        _rtmp3538 = input.readListBegin();
        _etype537 = _rtmp3538.etype;
        _size534 = _rtmp3538.size;
        for (var _i539 = 0; _i539 < _size534; ++_i539)
        {
          var elem540 = null;
          elem540 = input.readString().value;
          this.mrna_id_list.push(elem540);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_exons_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_exons_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter541 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter541))
      {
        iter541 = this.mrna_id_list[iter541];
        output.writeString(iter541);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_exons_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_exons_result.prototype = {};
genome_annotation.thrift_service_get_mrna_exons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size542 = 0;
        var _rtmp3546;
        this.success = {};
        var _ktype543 = 0;
        var _vtype544 = 0;
        _rtmp3546 = input.readMapBegin();
        _ktype543 = _rtmp3546.ktype;
        _vtype544 = _rtmp3546.vtype;
        _size542 = _rtmp3546.size;
        for (var _i547 = 0; _i547 < _size542; ++_i547)
        {
          if (_i547 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key548 = null;
          var val549 = null;
          key548 = input.readString().value;
          var _size550 = 0;
          var _rtmp3554;
          val549 = [];
          var _etype553 = 0;
          _rtmp3554 = input.readListBegin();
          _etype553 = _rtmp3554.etype;
          _size550 = _rtmp3554.size;
          for (var _i555 = 0; _i555 < _size550; ++_i555)
          {
            var elem556 = null;
            elem556 = new genome_annotation.Exon_data();
            elem556.read(input);
            val549.push(elem556);
          }
          input.readListEnd();
          this.success[key548] = val549;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_exons_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_exons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter557 in this.success)
    {
      if (this.success.hasOwnProperty(kiter557))
      {
        var viter558 = this.success[kiter557];
        output.writeString(kiter557);
        output.writeListBegin(Thrift.Type.STRUCT, viter558.length);
        for (var iter559 in viter558)
        {
          if (viter558.hasOwnProperty(iter559))
          {
            iter559 = viter558[iter559];
            iter559.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_utrs_args = function(args) {
  this.token = null;
  this.ref = null;
  this.mrna_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.mrna_id_list !== undefined) {
      this.mrna_id_list = args.mrna_id_list;
    }
  }
};
genome_annotation.thrift_service_get_mrna_utrs_args.prototype = {};
genome_annotation.thrift_service_get_mrna_utrs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size560 = 0;
        var _rtmp3564;
        this.mrna_id_list = [];
        var _etype563 = 0;
        _rtmp3564 = input.readListBegin();
        _etype563 = _rtmp3564.etype;
        _size560 = _rtmp3564.size;
        for (var _i565 = 0; _i565 < _size560; ++_i565)
        {
          var elem566 = null;
          elem566 = input.readString().value;
          this.mrna_id_list.push(elem566);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_utrs_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_utrs_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.mrna_id_list !== null && this.mrna_id_list !== undefined) {
    output.writeFieldBegin('mrna_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mrna_id_list.length);
    for (var iter567 in this.mrna_id_list)
    {
      if (this.mrna_id_list.hasOwnProperty(iter567))
      {
        iter567 = this.mrna_id_list[iter567];
        output.writeString(iter567);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_utrs_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_mrna_utrs_result.prototype = {};
genome_annotation.thrift_service_get_mrna_utrs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size568 = 0;
        var _rtmp3572;
        this.success = {};
        var _ktype569 = 0;
        var _vtype570 = 0;
        _rtmp3572 = input.readMapBegin();
        _ktype569 = _rtmp3572.ktype;
        _vtype570 = _rtmp3572.vtype;
        _size568 = _rtmp3572.size;
        for (var _i573 = 0; _i573 < _size568; ++_i573)
        {
          if (_i573 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key574 = null;
          var val575 = null;
          key574 = input.readString().value;
          var _size576 = 0;
          var _rtmp3580;
          val575 = {};
          var _ktype577 = 0;
          var _vtype578 = 0;
          _rtmp3580 = input.readMapBegin();
          _ktype577 = _rtmp3580.ktype;
          _vtype578 = _rtmp3580.vtype;
          _size576 = _rtmp3580.size;
          for (var _i581 = 0; _i581 < _size576; ++_i581)
          {
            if (_i581 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key582 = null;
            var val583 = null;
            key582 = input.readString().value;
            val583 = new genome_annotation.UTR_data();
            val583.read(input);
            val575[key582] = val583;
          }
          input.readMapEnd();
          this.success[key574] = val575;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_mrna_utrs_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_mrna_utrs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter584 in this.success)
    {
      if (this.success.hasOwnProperty(kiter584))
      {
        var viter585 = this.success[kiter584];
        output.writeString(kiter584);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter585));
        for (var kiter586 in viter585)
        {
          if (viter585.hasOwnProperty(kiter586))
          {
            var viter587 = viter585[kiter586];
            output.writeString(kiter586);
            viter587.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gff_args = function(args) {
  this.token = null;
  this.ref = null;
  this.gene_id_list = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.gene_id_list !== undefined) {
      this.gene_id_list = args.gene_id_list;
    }
  }
};
genome_annotation.thrift_service_get_gff_args.prototype = {};
genome_annotation.thrift_service_get_gff_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size588 = 0;
        var _rtmp3592;
        this.gene_id_list = [];
        var _etype591 = 0;
        _rtmp3592 = input.readListBegin();
        _etype591 = _rtmp3592.etype;
        _size588 = _rtmp3592.size;
        for (var _i593 = 0; _i593 < _size588; ++_i593)
        {
          var elem594 = null;
          elem594 = input.readString().value;
          this.gene_id_list.push(elem594);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gff_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gff_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  if (this.gene_id_list !== null && this.gene_id_list !== undefined) {
    output.writeFieldBegin('gene_id_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.gene_id_list.length);
    for (var iter595 in this.gene_id_list)
    {
      if (this.gene_id_list.hasOwnProperty(iter595))
      {
        iter595 = this.gene_id_list[iter595];
        output.writeString(iter595);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_service_get_gff_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof genome_annotation.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof genome_annotation.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof genome_annotation.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof genome_annotation.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
genome_annotation.thrift_service_get_gff_result.prototype = {};
genome_annotation.thrift_service_get_gff_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new genome_annotation.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new genome_annotation.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new genome_annotation.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new genome_annotation.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new genome_annotation.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new genome_annotation.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.thrift_service_get_gff_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_gff_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.thrift_serviceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
genome_annotation.thrift_serviceClient.prototype = {};
genome_annotation.thrift_serviceClient.prototype.get_taxon = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_taxon(token, ref);
    return this.recv_get_taxon();
  } else {
    var postData = this.send_get_taxon(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_taxon);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_taxon = function(token, ref, callback) {
  this.output.writeMessageBegin('get_taxon', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_taxon_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_taxon = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_taxon_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_taxon failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_assembly = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_assembly(token, ref);
    return this.recv_get_assembly();
  } else {
    var postData = this.send_get_assembly(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_assembly);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_assembly = function(token, ref, callback) {
  this.output.writeMessageBegin('get_assembly', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_assembly_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_assembly = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_assembly_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_assembly failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_types = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_feature_types(token, ref);
    return this.recv_get_feature_types();
  } else {
    var postData = this.send_get_feature_types(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_types);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_types = function(token, ref, callback) {
  this.output.writeMessageBegin('get_feature_types', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_types_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_types = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_types_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_types failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_type_descriptions = function(token, ref, feature_type_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_type_descriptions(token, ref, feature_type_list);
    return this.recv_get_feature_type_descriptions();
  } else {
    var postData = this.send_get_feature_type_descriptions(token, ref, feature_type_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_type_descriptions);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_type_descriptions = function(token, ref, feature_type_list, callback) {
  this.output.writeMessageBegin('get_feature_type_descriptions', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_type_descriptions_args();
  args.token = token;
  args.ref = ref;
  args.feature_type_list = feature_type_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_type_descriptions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_type_descriptions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_type_descriptions failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_type_counts = function(token, ref, feature_type_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_type_counts(token, ref, feature_type_list);
    return this.recv_get_feature_type_counts();
  } else {
    var postData = this.send_get_feature_type_counts(token, ref, feature_type_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_type_counts);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_type_counts = function(token, ref, feature_type_list, callback) {
  this.output.writeMessageBegin('get_feature_type_counts', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_type_counts_args();
  args.token = token;
  args.ref = ref;
  args.feature_type_list = feature_type_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_type_counts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_type_counts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_type_counts failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_ids = function(token, ref, filters, group_type, callback) {
  if (callback === undefined) {
    this.send_get_feature_ids(token, ref, filters, group_type);
    return this.recv_get_feature_ids();
  } else {
    var postData = this.send_get_feature_ids(token, ref, filters, group_type, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_ids);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_ids = function(token, ref, filters, group_type, callback) {
  this.output.writeMessageBegin('get_feature_ids', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_ids_args();
  args.token = token;
  args.ref = ref;
  args.filters = filters;
  args.group_type = group_type;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_ids = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_ids_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_ids failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_features = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_features(token, ref, feature_id_list);
    return this.recv_get_features();
  } else {
    var postData = this.send_get_features(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_features);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_features = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_features', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_features_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_features = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_features_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_features failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_proteins = function(token, ref, cds_id_list, callback) {
  if (callback === undefined) {
    this.send_get_proteins(token, ref, cds_id_list);
    return this.recv_get_proteins();
  } else {
    var postData = this.send_get_proteins(token, ref, cds_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_proteins);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_proteins = function(token, ref, cds_id_list, callback) {
  this.output.writeMessageBegin('get_proteins', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_proteins_args();
  args.token = token;
  args.ref = ref;
  args.cds_id_list = cds_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_proteins = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_proteins_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_proteins failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_locations = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_locations(token, ref, feature_id_list);
    return this.recv_get_feature_locations();
  } else {
    var postData = this.send_get_feature_locations(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_locations);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_locations = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_locations', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_locations_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_locations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_locations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_locations failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_publications = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_publications(token, ref, feature_id_list);
    return this.recv_get_feature_publications();
  } else {
    var postData = this.send_get_feature_publications(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_publications);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_publications = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_publications', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_publications_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_publications = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_publications_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_publications failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_dna = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_dna(token, ref, feature_id_list);
    return this.recv_get_feature_dna();
  } else {
    var postData = this.send_get_feature_dna(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_dna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_dna = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_dna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_dna_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_dna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_dna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_dna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_functions = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_functions(token, ref, feature_id_list);
    return this.recv_get_feature_functions();
  } else {
    var postData = this.send_get_feature_functions(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_functions);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_functions = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_functions', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_functions_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_functions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_functions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_functions failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_feature_aliases = function(token, ref, feature_id_list, callback) {
  if (callback === undefined) {
    this.send_get_feature_aliases(token, ref, feature_id_list);
    return this.recv_get_feature_aliases();
  } else {
    var postData = this.send_get_feature_aliases(token, ref, feature_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_feature_aliases);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_feature_aliases = function(token, ref, feature_id_list, callback) {
  this.output.writeMessageBegin('get_feature_aliases', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_feature_aliases_args();
  args.token = token;
  args.ref = ref;
  args.feature_id_list = feature_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_feature_aliases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_feature_aliases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_feature_aliases failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_cds_by_gene = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_cds_by_gene(token, ref, gene_id_list);
    return this.recv_get_cds_by_gene();
  } else {
    var postData = this.send_get_cds_by_gene(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_cds_by_gene);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_cds_by_gene = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_cds_by_gene', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_cds_by_gene_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_cds_by_gene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_cds_by_gene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_cds_by_gene failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_cds_by_mrna = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_cds_by_mrna(token, ref, mrna_id_list);
    return this.recv_get_cds_by_mrna();
  } else {
    var postData = this.send_get_cds_by_mrna(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_cds_by_mrna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_cds_by_mrna = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_cds_by_mrna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_cds_by_mrna_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_cds_by_mrna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_cds_by_mrna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_cds_by_mrna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_gene_by_cds = function(token, ref, cds_id_list, callback) {
  if (callback === undefined) {
    this.send_get_gene_by_cds(token, ref, cds_id_list);
    return this.recv_get_gene_by_cds();
  } else {
    var postData = this.send_get_gene_by_cds(token, ref, cds_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_gene_by_cds);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_gene_by_cds = function(token, ref, cds_id_list, callback) {
  this.output.writeMessageBegin('get_gene_by_cds', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_gene_by_cds_args();
  args.token = token;
  args.ref = ref;
  args.cds_id_list = cds_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_gene_by_cds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_gene_by_cds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_gene_by_cds failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_gene_by_mrna = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_gene_by_mrna(token, ref, mrna_id_list);
    return this.recv_get_gene_by_mrna();
  } else {
    var postData = this.send_get_gene_by_mrna(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_gene_by_mrna);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_gene_by_mrna = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_gene_by_mrna', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_gene_by_mrna_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_gene_by_mrna = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_gene_by_mrna_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_gene_by_mrna failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_by_cds = function(token, ref, cds_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_by_cds(token, ref, cds_id_list);
    return this.recv_get_mrna_by_cds();
  } else {
    var postData = this.send_get_mrna_by_cds(token, ref, cds_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_by_cds);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_by_cds = function(token, ref, cds_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_by_cds', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_by_cds_args();
  args.token = token;
  args.ref = ref;
  args.cds_id_list = cds_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_by_cds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_by_cds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_by_cds failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_by_gene = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_by_gene(token, ref, gene_id_list);
    return this.recv_get_mrna_by_gene();
  } else {
    var postData = this.send_get_mrna_by_gene(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_by_gene);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_by_gene = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_by_gene', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_by_gene_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_by_gene = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_by_gene_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_by_gene failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_exons = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_exons(token, ref, mrna_id_list);
    return this.recv_get_mrna_exons();
  } else {
    var postData = this.send_get_mrna_exons(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_exons);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_exons = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_exons', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_exons_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_exons = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_exons_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_exons failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_mrna_utrs = function(token, ref, mrna_id_list, callback) {
  if (callback === undefined) {
    this.send_get_mrna_utrs(token, ref, mrna_id_list);
    return this.recv_get_mrna_utrs();
  } else {
    var postData = this.send_get_mrna_utrs(token, ref, mrna_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_mrna_utrs);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_mrna_utrs = function(token, ref, mrna_id_list, callback) {
  this.output.writeMessageBegin('get_mrna_utrs', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_mrna_utrs_args();
  args.token = token;
  args.ref = ref;
  args.mrna_id_list = mrna_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_mrna_utrs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_mrna_utrs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_mrna_utrs failed: unknown result';
};
genome_annotation.thrift_serviceClient.prototype.get_gff = function(token, ref, gene_id_list, callback) {
  if (callback === undefined) {
    this.send_get_gff(token, ref, gene_id_list);
    return this.recv_get_gff();
  } else {
    var postData = this.send_get_gff(token, ref, gene_id_list, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_gff);
  }
};

genome_annotation.thrift_serviceClient.prototype.send_get_gff = function(token, ref, gene_id_list, callback) {
  this.output.writeMessageBegin('get_gff', Thrift.MessageType.CALL, this.seqid);
  var args = new genome_annotation.thrift_service_get_gff_args();
  args.token = token;
  args.ref = ref;
  args.gene_id_list = gene_id_list;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

genome_annotation.thrift_serviceClient.prototype.recv_get_gff = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new genome_annotation.thrift_service_get_gff_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_gff failed: unknown result';
};
