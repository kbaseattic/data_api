//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof genome_annotation === 'undefined') {
  genome_annotation = {};
}
genome_annotation.ServiceException = function(args) {
  this.message = null;
  this.stacktrace = null;
  this.inputs = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.stacktrace !== undefined) {
      this.stacktrace = args.stacktrace;
    }
    if (args.inputs !== undefined) {
      this.inputs = args.inputs;
    }
  }
};
Thrift.inherits(genome_annotation.ServiceException, Thrift.TException);
genome_annotation.ServiceException.prototype.name = 'ServiceException';
genome_annotation.ServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stacktrace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.inputs = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.inputs[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.ServiceException.prototype.write = function(output) {
  output.writeStructBegin('ServiceException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.stacktrace !== null && this.stacktrace !== undefined) {
    output.writeFieldBegin('stacktrace', Thrift.Type.STRING, 2);
    output.writeString(this.stacktrace);
    output.writeFieldEnd();
  }
  if (this.inputs !== null && this.inputs !== undefined) {
    output.writeFieldBegin('inputs', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.inputs));
    for (var kiter8 in this.inputs)
    {
      if (this.inputs.hasOwnProperty(kiter8))
      {
        var viter9 = this.inputs[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.AuthorizationException = function(args) {
  this.message = null;
  this.stacktrace = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.stacktrace !== undefined) {
      this.stacktrace = args.stacktrace;
    }
  }
};
Thrift.inherits(genome_annotation.AuthorizationException, Thrift.TException);
genome_annotation.AuthorizationException.prototype.name = 'AuthorizationException';
genome_annotation.AuthorizationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stacktrace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.AuthorizationException.prototype.write = function(output) {
  output.writeStructBegin('AuthorizationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.stacktrace !== null && this.stacktrace !== undefined) {
    output.writeFieldBegin('stacktrace', Thrift.Type.STRING, 2);
    output.writeString(this.stacktrace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.AuthenticationException = function(args) {
  this.message = null;
  this.stacktrace = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.stacktrace !== undefined) {
      this.stacktrace = args.stacktrace;
    }
  }
};
Thrift.inherits(genome_annotation.AuthenticationException, Thrift.TException);
genome_annotation.AuthenticationException.prototype.name = 'AuthenticationException';
genome_annotation.AuthenticationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stacktrace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.AuthenticationException.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.stacktrace !== null && this.stacktrace !== undefined) {
    output.writeFieldBegin('stacktrace', Thrift.Type.STRING, 2);
    output.writeString(this.stacktrace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.ObjectReferenceException = function(args) {
  this.message = null;
  this.stacktrace = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.stacktrace !== undefined) {
      this.stacktrace = args.stacktrace;
    }
  }
};
Thrift.inherits(genome_annotation.ObjectReferenceException, Thrift.TException);
genome_annotation.ObjectReferenceException.prototype.name = 'ObjectReferenceException';
genome_annotation.ObjectReferenceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stacktrace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.ObjectReferenceException.prototype.write = function(output) {
  output.writeStructBegin('ObjectReferenceException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.stacktrace !== null && this.stacktrace !== undefined) {
    output.writeFieldBegin('stacktrace', Thrift.Type.STRING, 2);
    output.writeString(this.stacktrace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.AttributeException = function(args) {
  this.message = null;
  this.stacktrace = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.stacktrace !== undefined) {
      this.stacktrace = args.stacktrace;
    }
  }
};
Thrift.inherits(genome_annotation.AttributeException, Thrift.TException);
genome_annotation.AttributeException.prototype.name = 'AttributeException';
genome_annotation.AttributeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stacktrace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.AttributeException.prototype.write = function(output) {
  output.writeStructBegin('AttributeException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.stacktrace !== null && this.stacktrace !== undefined) {
    output.writeFieldBegin('stacktrace', Thrift.Type.STRING, 2);
    output.writeString(this.stacktrace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.TypeException = function(args) {
  this.message = null;
  this.stacktrace = null;
  this.valid_types = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.stacktrace !== undefined) {
      this.stacktrace = args.stacktrace;
    }
    if (args.valid_types !== undefined) {
      this.valid_types = args.valid_types;
    }
  }
};
Thrift.inherits(genome_annotation.TypeException, Thrift.TException);
genome_annotation.TypeException.prototype.name = 'TypeException';
genome_annotation.TypeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stacktrace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.valid_types = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString().value;
          this.valid_types.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.TypeException.prototype.write = function(output) {
  output.writeStructBegin('TypeException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.stacktrace !== null && this.stacktrace !== undefined) {
    output.writeFieldBegin('stacktrace', Thrift.Type.STRING, 2);
    output.writeString(this.stacktrace);
    output.writeFieldEnd();
  }
  if (this.valid_types !== null && this.valid_types !== undefined) {
    output.writeFieldBegin('valid_types', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.valid_types.length);
    for (var iter17 in this.valid_types)
    {
      if (this.valid_types.hasOwnProperty(iter17))
      {
        iter17 = this.valid_types[iter17];
        output.writeString(iter17);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.Region = function(args) {
  this.contig_id = null;
  this.strand = null;
  this.start = null;
  this.length = null;
  if (args) {
    if (args.contig_id !== undefined) {
      this.contig_id = args.contig_id;
    }
    if (args.strand !== undefined) {
      this.strand = args.strand;
    }
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.length !== undefined) {
      this.length = args.length;
    }
  }
};
genome_annotation.Region.prototype = {};
genome_annotation.Region.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contig_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.strand = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.length = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.Region.prototype.write = function(output) {
  output.writeStructBegin('Region');
  if (this.contig_id !== null && this.contig_id !== undefined) {
    output.writeFieldBegin('contig_id', Thrift.Type.STRING, 1);
    output.writeString(this.contig_id);
    output.writeFieldEnd();
  }
  if (this.strand !== null && this.strand !== undefined) {
    output.writeFieldBegin('strand', Thrift.Type.STRING, 2);
    output.writeString(this.strand);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 3);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.length !== null && this.length !== undefined) {
    output.writeFieldBegin('length', Thrift.Type.I64, 4);
    output.writeI64(this.length);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.Feature_id_filters = function(args) {
  this.type_list = [];
  this.region_list = [];
  this.function_list = [];
  this.alias_list = [];
  if (args) {
    if (args.type_list !== undefined) {
      this.type_list = args.type_list;
    }
    if (args.region_list !== undefined) {
      this.region_list = args.region_list;
    }
    if (args.function_list !== undefined) {
      this.function_list = args.function_list;
    }
    if (args.alias_list !== undefined) {
      this.alias_list = args.alias_list;
    }
  }
};
genome_annotation.Feature_id_filters.prototype = {};
genome_annotation.Feature_id_filters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.type_list = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString().value;
          this.type_list.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size25 = 0;
        var _rtmp329;
        this.region_list = [];
        var _etype28 = 0;
        _rtmp329 = input.readListBegin();
        _etype28 = _rtmp329.etype;
        _size25 = _rtmp329.size;
        for (var _i30 = 0; _i30 < _size25; ++_i30)
        {
          var elem31 = null;
          elem31 = new genome_annotation.Region();
          elem31.read(input);
          this.region_list.push(elem31);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.function_list = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString().value;
          this.function_list.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.alias_list = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readString().value;
          this.alias_list.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.Feature_id_filters.prototype.write = function(output) {
  output.writeStructBegin('Feature_id_filters');
  if (this.type_list !== null && this.type_list !== undefined) {
    output.writeFieldBegin('type_list', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.type_list.length);
    for (var iter46 in this.type_list)
    {
      if (this.type_list.hasOwnProperty(iter46))
      {
        iter46 = this.type_list[iter46];
        output.writeString(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.region_list !== null && this.region_list !== undefined) {
    output.writeFieldBegin('region_list', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.region_list.length);
    for (var iter47 in this.region_list)
    {
      if (this.region_list.hasOwnProperty(iter47))
      {
        iter47 = this.region_list[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.function_list !== null && this.function_list !== undefined) {
    output.writeFieldBegin('function_list', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.function_list.length);
    for (var iter48 in this.function_list)
    {
      if (this.function_list.hasOwnProperty(iter48))
      {
        iter48 = this.function_list[iter48];
        output.writeString(iter48);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.alias_list !== null && this.alias_list !== undefined) {
    output.writeFieldBegin('alias_list', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.alias_list.length);
    for (var iter49 in this.alias_list)
    {
      if (this.alias_list.hasOwnProperty(iter49))
      {
        iter49 = this.alias_list[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.Feature_id_mapping = function(args) {
  this.by_type = {
};
  this.by_region = {
};
  this.by_function = {
};
  this.by_alias = {
};
  if (args) {
    if (args.by_type !== undefined) {
      this.by_type = args.by_type;
    }
    if (args.by_region !== undefined) {
      this.by_region = args.by_region;
    }
    if (args.by_function !== undefined) {
      this.by_function = args.by_function;
    }
    if (args.by_alias !== undefined) {
      this.by_alias = args.by_alias;
    }
  }
};
genome_annotation.Feature_id_mapping.prototype = {};
genome_annotation.Feature_id_mapping.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size50 = 0;
        var _rtmp354;
        this.by_type = {};
        var _ktype51 = 0;
        var _vtype52 = 0;
        _rtmp354 = input.readMapBegin();
        _ktype51 = _rtmp354.ktype;
        _vtype52 = _rtmp354.vtype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          if (_i55 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key56 = null;
          var val57 = null;
          key56 = input.readString().value;
          var _size58 = 0;
          var _rtmp362;
          val57 = [];
          var _etype61 = 0;
          _rtmp362 = input.readListBegin();
          _etype61 = _rtmp362.etype;
          _size58 = _rtmp362.size;
          for (var _i63 = 0; _i63 < _size58; ++_i63)
          {
            var elem64 = null;
            elem64 = input.readString().value;
            val57.push(elem64);
          }
          input.readListEnd();
          this.by_type[key56] = val57;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size65 = 0;
        var _rtmp369;
        this.by_region = {};
        var _ktype66 = 0;
        var _vtype67 = 0;
        _rtmp369 = input.readMapBegin();
        _ktype66 = _rtmp369.ktype;
        _vtype67 = _rtmp369.vtype;
        _size65 = _rtmp369.size;
        for (var _i70 = 0; _i70 < _size65; ++_i70)
        {
          if (_i70 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key71 = null;
          var val72 = null;
          key71 = input.readString().value;
          var _size73 = 0;
          var _rtmp377;
          val72 = {};
          var _ktype74 = 0;
          var _vtype75 = 0;
          _rtmp377 = input.readMapBegin();
          _ktype74 = _rtmp377.ktype;
          _vtype75 = _rtmp377.vtype;
          _size73 = _rtmp377.size;
          for (var _i78 = 0; _i78 < _size73; ++_i78)
          {
            if (_i78 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key79 = null;
            var val80 = null;
            key79 = input.readString().value;
            var _size81 = 0;
            var _rtmp385;
            val80 = {};
            var _ktype82 = 0;
            var _vtype83 = 0;
            _rtmp385 = input.readMapBegin();
            _ktype82 = _rtmp385.ktype;
            _vtype83 = _rtmp385.vtype;
            _size81 = _rtmp385.size;
            for (var _i86 = 0; _i86 < _size81; ++_i86)
            {
              if (_i86 > 0 ) {
                if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                  input.rstack.pop();
                }
              }
              var key87 = null;
              var val88 = null;
              key87 = input.readString().value;
              var _size89 = 0;
              var _rtmp393;
              val88 = [];
              var _etype92 = 0;
              _rtmp393 = input.readListBegin();
              _etype92 = _rtmp393.etype;
              _size89 = _rtmp393.size;
              for (var _i94 = 0; _i94 < _size89; ++_i94)
              {
                var elem95 = null;
                elem95 = input.readString().value;
                val88.push(elem95);
              }
              input.readListEnd();
              val80[key87] = val88;
            }
            input.readMapEnd();
            val72[key79] = val80;
          }
          input.readMapEnd();
          this.by_region[key71] = val72;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size96 = 0;
        var _rtmp3100;
        this.by_function = {};
        var _ktype97 = 0;
        var _vtype98 = 0;
        _rtmp3100 = input.readMapBegin();
        _ktype97 = _rtmp3100.ktype;
        _vtype98 = _rtmp3100.vtype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          if (_i101 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key102 = null;
          var val103 = null;
          key102 = input.readString().value;
          var _size104 = 0;
          var _rtmp3108;
          val103 = [];
          var _etype107 = 0;
          _rtmp3108 = input.readListBegin();
          _etype107 = _rtmp3108.etype;
          _size104 = _rtmp3108.size;
          for (var _i109 = 0; _i109 < _size104; ++_i109)
          {
            var elem110 = null;
            elem110 = input.readString().value;
            val103.push(elem110);
          }
          input.readListEnd();
          this.by_function[key102] = val103;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size111 = 0;
        var _rtmp3115;
        this.by_alias = {};
        var _ktype112 = 0;
        var _vtype113 = 0;
        _rtmp3115 = input.readMapBegin();
        _ktype112 = _rtmp3115.ktype;
        _vtype113 = _rtmp3115.vtype;
        _size111 = _rtmp3115.size;
        for (var _i116 = 0; _i116 < _size111; ++_i116)
        {
          if (_i116 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key117 = null;
          var val118 = null;
          key117 = input.readString().value;
          var _size119 = 0;
          var _rtmp3123;
          val118 = [];
          var _etype122 = 0;
          _rtmp3123 = input.readListBegin();
          _etype122 = _rtmp3123.etype;
          _size119 = _rtmp3123.size;
          for (var _i124 = 0; _i124 < _size119; ++_i124)
          {
            var elem125 = null;
            elem125 = input.readString().value;
            val118.push(elem125);
          }
          input.readListEnd();
          this.by_alias[key117] = val118;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.Feature_id_mapping.prototype.write = function(output) {
  output.writeStructBegin('Feature_id_mapping');
  if (this.by_type !== null && this.by_type !== undefined) {
    output.writeFieldBegin('by_type', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.by_type));
    for (var kiter126 in this.by_type)
    {
      if (this.by_type.hasOwnProperty(kiter126))
      {
        var viter127 = this.by_type[kiter126];
        output.writeString(kiter126);
        output.writeListBegin(Thrift.Type.STRING, viter127.length);
        for (var iter128 in viter127)
        {
          if (viter127.hasOwnProperty(iter128))
          {
            iter128 = viter127[iter128];
            output.writeString(iter128);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.by_region !== null && this.by_region !== undefined) {
    output.writeFieldBegin('by_region', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.by_region));
    for (var kiter129 in this.by_region)
    {
      if (this.by_region.hasOwnProperty(kiter129))
      {
        var viter130 = this.by_region[kiter129];
        output.writeString(kiter129);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(viter130));
        for (var kiter131 in viter130)
        {
          if (viter130.hasOwnProperty(kiter131))
          {
            var viter132 = viter130[kiter131];
            output.writeString(kiter131);
            output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter132));
            for (var kiter133 in viter132)
            {
              if (viter132.hasOwnProperty(kiter133))
              {
                var viter134 = viter132[kiter133];
                output.writeString(kiter133);
                output.writeListBegin(Thrift.Type.STRING, viter134.length);
                for (var iter135 in viter134)
                {
                  if (viter134.hasOwnProperty(iter135))
                  {
                    iter135 = viter134[iter135];
                    output.writeString(iter135);
                  }
                }
                output.writeListEnd();
              }
            }
            output.writeMapEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.by_function !== null && this.by_function !== undefined) {
    output.writeFieldBegin('by_function', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.by_function));
    for (var kiter136 in this.by_function)
    {
      if (this.by_function.hasOwnProperty(kiter136))
      {
        var viter137 = this.by_function[kiter136];
        output.writeString(kiter136);
        output.writeListBegin(Thrift.Type.STRING, viter137.length);
        for (var iter138 in viter137)
        {
          if (viter137.hasOwnProperty(iter138))
          {
            iter138 = viter137[iter138];
            output.writeString(iter138);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.by_alias !== null && this.by_alias !== undefined) {
    output.writeFieldBegin('by_alias', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.by_alias));
    for (var kiter139 in this.by_alias)
    {
      if (this.by_alias.hasOwnProperty(kiter139))
      {
        var viter140 = this.by_alias[kiter139];
        output.writeString(kiter139);
        output.writeListBegin(Thrift.Type.STRING, viter140.length);
        for (var iter141 in viter140)
        {
          if (viter140.hasOwnProperty(iter141))
          {
            iter141 = viter140[iter141];
            output.writeString(iter141);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.Feature_data = function(args) {
  this.feature_id = null;
  this.feature_type = null;
  this.feature_function = null;
  this.feature_aliases = null;
  this.feature_dna_sequence_length = null;
  this.feature_dna_sequence = null;
  this.feature_md5 = null;
  this.feature_locations = null;
  this.feature_publications = null;
  this.feature_quality_warnings = null;
  this.feature_quality_score = null;
  this.feature_notes = null;
  this.feature_inference = null;
  if (args) {
    if (args.feature_id !== undefined) {
      this.feature_id = args.feature_id;
    }
    if (args.feature_type !== undefined) {
      this.feature_type = args.feature_type;
    }
    if (args.feature_function !== undefined) {
      this.feature_function = args.feature_function;
    }
    if (args.feature_aliases !== undefined) {
      this.feature_aliases = args.feature_aliases;
    }
    if (args.feature_dna_sequence_length !== undefined) {
      this.feature_dna_sequence_length = args.feature_dna_sequence_length;
    }
    if (args.feature_dna_sequence !== undefined) {
      this.feature_dna_sequence = args.feature_dna_sequence;
    }
    if (args.feature_md5 !== undefined) {
      this.feature_md5 = args.feature_md5;
    }
    if (args.feature_locations !== undefined) {
      this.feature_locations = args.feature_locations;
    }
    if (args.feature_publications !== undefined) {
      this.feature_publications = args.feature_publications;
    }
    if (args.feature_quality_warnings !== undefined) {
      this.feature_quality_warnings = args.feature_quality_warnings;
    }
    if (args.feature_quality_score !== undefined) {
      this.feature_quality_score = args.feature_quality_score;
    }
    if (args.feature_notes !== undefined) {
      this.feature_notes = args.feature_notes;
    }
    if (args.feature_inference !== undefined) {
      this.feature_inference = args.feature_inference;
    }
  }
};
genome_annotation.Feature_data.prototype = {};
genome_annotation.Feature_data.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.feature_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature_function = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size142 = 0;
        var _rtmp3146;
        this.feature_aliases = {};
        var _ktype143 = 0;
        var _vtype144 = 0;
        _rtmp3146 = input.readMapBegin();
        _ktype143 = _rtmp3146.ktype;
        _vtype144 = _rtmp3146.vtype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          if (_i147 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key148 = null;
          var val149 = null;
          key148 = input.readString().value;
          var _size150 = 0;
          var _rtmp3154;
          val149 = [];
          var _etype153 = 0;
          _rtmp3154 = input.readListBegin();
          _etype153 = _rtmp3154.etype;
          _size150 = _rtmp3154.size;
          for (var _i155 = 0; _i155 < _size150; ++_i155)
          {
            var elem156 = null;
            elem156 = input.readString().value;
            val149.push(elem156);
          }
          input.readListEnd();
          this.feature_aliases[key148] = val149;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.feature_dna_sequence_length = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.feature_dna_sequence = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.feature_md5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size157 = 0;
        var _rtmp3161;
        this.feature_locations = [];
        var _etype160 = 0;
        _rtmp3161 = input.readListBegin();
        _etype160 = _rtmp3161.etype;
        _size157 = _rtmp3161.size;
        for (var _i162 = 0; _i162 < _size157; ++_i162)
        {
          var elem163 = null;
          elem163 = new genome_annotation.Region();
          elem163.read(input);
          this.feature_locations.push(elem163);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.feature_publications = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = input.readString().value;
          this.feature_publications.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size171 = 0;
        var _rtmp3175;
        this.feature_quality_warnings = [];
        var _etype174 = 0;
        _rtmp3175 = input.readListBegin();
        _etype174 = _rtmp3175.etype;
        _size171 = _rtmp3175.size;
        for (var _i176 = 0; _i176 < _size171; ++_i176)
        {
          var elem177 = null;
          elem177 = input.readString().value;
          this.feature_quality_warnings.push(elem177);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.feature_quality_score = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = input.readString().value;
          this.feature_quality_score.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size185 = 0;
        var _rtmp3189;
        this.feature_notes = [];
        var _etype188 = 0;
        _rtmp3189 = input.readListBegin();
        _etype188 = _rtmp3189.etype;
        _size185 = _rtmp3189.size;
        for (var _i190 = 0; _i190 < _size185; ++_i190)
        {
          var elem191 = null;
          elem191 = input.readString().value;
          this.feature_notes.push(elem191);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.feature_inference = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.Feature_data.prototype.write = function(output) {
  output.writeStructBegin('Feature_data');
  if (this.feature_id !== null && this.feature_id !== undefined) {
    output.writeFieldBegin('feature_id', Thrift.Type.STRING, 1);
    output.writeString(this.feature_id);
    output.writeFieldEnd();
  }
  if (this.feature_type !== null && this.feature_type !== undefined) {
    output.writeFieldBegin('feature_type', Thrift.Type.STRING, 2);
    output.writeString(this.feature_type);
    output.writeFieldEnd();
  }
  if (this.feature_function !== null && this.feature_function !== undefined) {
    output.writeFieldBegin('feature_function', Thrift.Type.STRING, 3);
    output.writeString(this.feature_function);
    output.writeFieldEnd();
  }
  if (this.feature_aliases !== null && this.feature_aliases !== undefined) {
    output.writeFieldBegin('feature_aliases', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.feature_aliases));
    for (var kiter192 in this.feature_aliases)
    {
      if (this.feature_aliases.hasOwnProperty(kiter192))
      {
        var viter193 = this.feature_aliases[kiter192];
        output.writeString(kiter192);
        output.writeListBegin(Thrift.Type.STRING, viter193.length);
        for (var iter194 in viter193)
        {
          if (viter193.hasOwnProperty(iter194))
          {
            iter194 = viter193[iter194];
            output.writeString(iter194);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.feature_dna_sequence_length !== null && this.feature_dna_sequence_length !== undefined) {
    output.writeFieldBegin('feature_dna_sequence_length', Thrift.Type.I64, 5);
    output.writeI64(this.feature_dna_sequence_length);
    output.writeFieldEnd();
  }
  if (this.feature_dna_sequence !== null && this.feature_dna_sequence !== undefined) {
    output.writeFieldBegin('feature_dna_sequence', Thrift.Type.STRING, 6);
    output.writeString(this.feature_dna_sequence);
    output.writeFieldEnd();
  }
  if (this.feature_md5 !== null && this.feature_md5 !== undefined) {
    output.writeFieldBegin('feature_md5', Thrift.Type.STRING, 7);
    output.writeString(this.feature_md5);
    output.writeFieldEnd();
  }
  if (this.feature_locations !== null && this.feature_locations !== undefined) {
    output.writeFieldBegin('feature_locations', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.feature_locations.length);
    for (var iter195 in this.feature_locations)
    {
      if (this.feature_locations.hasOwnProperty(iter195))
      {
        iter195 = this.feature_locations[iter195];
        iter195.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.feature_publications !== null && this.feature_publications !== undefined) {
    output.writeFieldBegin('feature_publications', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.feature_publications.length);
    for (var iter196 in this.feature_publications)
    {
      if (this.feature_publications.hasOwnProperty(iter196))
      {
        iter196 = this.feature_publications[iter196];
        output.writeString(iter196);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.feature_quality_warnings !== null && this.feature_quality_warnings !== undefined) {
    output.writeFieldBegin('feature_quality_warnings', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.feature_quality_warnings.length);
    for (var iter197 in this.feature_quality_warnings)
    {
      if (this.feature_quality_warnings.hasOwnProperty(iter197))
      {
        iter197 = this.feature_quality_warnings[iter197];
        output.writeString(iter197);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.feature_quality_score !== null && this.feature_quality_score !== undefined) {
    output.writeFieldBegin('feature_quality_score', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.feature_quality_score.length);
    for (var iter198 in this.feature_quality_score)
    {
      if (this.feature_quality_score.hasOwnProperty(iter198))
      {
        iter198 = this.feature_quality_score[iter198];
        output.writeString(iter198);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.feature_notes !== null && this.feature_notes !== undefined) {
    output.writeFieldBegin('feature_notes', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.feature_notes.length);
    for (var iter199 in this.feature_notes)
    {
      if (this.feature_notes.hasOwnProperty(iter199))
      {
        iter199 = this.feature_notes[iter199];
        output.writeString(iter199);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.feature_inference !== null && this.feature_inference !== undefined) {
    output.writeFieldBegin('feature_inference', Thrift.Type.STRING, 13);
    output.writeString(this.feature_inference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.Protein_data = function(args) {
  this.protein_id = null;
  this.protein_amino_acid_sequence = null;
  this.protein_function = null;
  this.protein_aliases = null;
  this.protein_md5 = null;
  this.protein_domain_locations = null;
  if (args) {
    if (args.protein_id !== undefined) {
      this.protein_id = args.protein_id;
    }
    if (args.protein_amino_acid_sequence !== undefined) {
      this.protein_amino_acid_sequence = args.protein_amino_acid_sequence;
    }
    if (args.protein_function !== undefined) {
      this.protein_function = args.protein_function;
    }
    if (args.protein_aliases !== undefined) {
      this.protein_aliases = args.protein_aliases;
    }
    if (args.protein_md5 !== undefined) {
      this.protein_md5 = args.protein_md5;
    }
    if (args.protein_domain_locations !== undefined) {
      this.protein_domain_locations = args.protein_domain_locations;
    }
  }
};
genome_annotation.Protein_data.prototype = {};
genome_annotation.Protein_data.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.protein_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.protein_amino_acid_sequence = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.protein_function = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.protein_aliases = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = input.readString().value;
          this.protein_aliases.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.protein_md5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size207 = 0;
        var _rtmp3211;
        this.protein_domain_locations = [];
        var _etype210 = 0;
        _rtmp3211 = input.readListBegin();
        _etype210 = _rtmp3211.etype;
        _size207 = _rtmp3211.size;
        for (var _i212 = 0; _i212 < _size207; ++_i212)
        {
          var elem213 = null;
          elem213 = input.readString().value;
          this.protein_domain_locations.push(elem213);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

genome_annotation.Protein_data.prototype.write = function(output) {
  output.writeStructBegin('Protein_data');
  if (this.protein_id !== null && this.protein_id !== undefined) {
    output.writeFieldBegin('protein_id', Thrift.Type.STRING, 1);
    output.writeString(this.protein_id);
    output.writeFieldEnd();
  }
  if (this.protein_amino_acid_sequence !== null && this.protein_amino_acid_sequence !== undefined) {
    output.writeFieldBegin('protein_amino_acid_sequence', Thrift.Type.STRING, 2);
    output.writeString(this.protein_amino_acid_sequence);
    output.writeFieldEnd();
  }
  if (this.protein_function !== null && this.protein_function !== undefined) {
    output.writeFieldBegin('protein_function', Thrift.Type.STRING, 3);
    output.writeString(this.protein_function);
    output.writeFieldEnd();
  }
  if (this.protein_aliases !== null && this.protein_aliases !== undefined) {
    output.writeFieldBegin('protein_aliases', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.protein_aliases.length);
    for (var iter214 in this.protein_aliases)
    {
      if (this.protein_aliases.hasOwnProperty(iter214))
      {
        iter214 = this.protein_aliases[iter214];
        output.writeString(iter214);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.protein_md5 !== null && this.protein_md5 !== undefined) {
    output.writeFieldBegin('protein_md5', Thrift.Type.STRING, 5);
    output.writeString(this.protein_md5);
    output.writeFieldEnd();
  }
  if (this.protein_domain_locations !== null && this.protein_domain_locations !== undefined) {
    output.writeFieldBegin('protein_domain_locations', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.protein_domain_locations.length);
    for (var iter215 in this.protein_domain_locations)
    {
      if (this.protein_domain_locations.hasOwnProperty(iter215))
      {
        iter215 = this.protein_domain_locations[iter215];
        output.writeString(iter215);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

genome_annotation.VERSION = '{{version}}';
