//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

taxon.thrift_service_get_parent_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_parent_args.prototype = {};
taxon.thrift_service_get_parent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_parent_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_parent_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_parent_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_parent_result.prototype = {};
taxon.thrift_service_get_parent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_parent_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_parent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_children_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_children_args.prototype = {};
taxon.thrift_service_get_children_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_children_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_children_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_children_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_children_result.prototype = {};
taxon.thrift_service_get_children_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.success = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = input.readString().value;
          this.success.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_children_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_children_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter83 in this.success)
    {
      if (this.success.hasOwnProperty(iter83))
      {
        iter83 = this.success[iter83];
        output.writeString(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_genome_annotations_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_genome_annotations_args.prototype = {};
taxon.thrift_service_get_genome_annotations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_genome_annotations_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_genome_annotations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_genome_annotations_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_genome_annotations_result.prototype = {};
taxon.thrift_service_get_genome_annotations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.success = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readString().value;
          this.success.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_genome_annotations_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_genome_annotations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter91 in this.success)
    {
      if (this.success.hasOwnProperty(iter91))
      {
        iter91 = this.success[iter91];
        output.writeString(iter91);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_scientific_lineage_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_scientific_lineage_args.prototype = {};
taxon.thrift_service_get_scientific_lineage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_scientific_lineage_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_scientific_lineage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_scientific_lineage_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_scientific_lineage_result.prototype = {};
taxon.thrift_service_get_scientific_lineage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.success = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = input.readString().value;
          this.success.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_scientific_lineage_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_scientific_lineage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter99 in this.success)
    {
      if (this.success.hasOwnProperty(iter99))
      {
        iter99 = this.success[iter99];
        output.writeString(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_scientific_name_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_scientific_name_args.prototype = {};
taxon.thrift_service_get_scientific_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_scientific_name_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_scientific_name_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_scientific_name_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_scientific_name_result.prototype = {};
taxon.thrift_service_get_scientific_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_scientific_name_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_scientific_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_taxonomic_id_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_taxonomic_id_args.prototype = {};
taxon.thrift_service_get_taxonomic_id_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_taxonomic_id_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxonomic_id_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_taxonomic_id_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_taxonomic_id_result.prototype = {};
taxon.thrift_service_get_taxonomic_id_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_taxonomic_id_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxonomic_id_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_kingdom_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_kingdom_args.prototype = {};
taxon.thrift_service_get_kingdom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_kingdom_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_kingdom_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_kingdom_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_kingdom_result.prototype = {};
taxon.thrift_service_get_kingdom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_kingdom_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_kingdom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_domain_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_domain_args.prototype = {};
taxon.thrift_service_get_domain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_domain_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_domain_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_domain_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_domain_result.prototype = {};
taxon.thrift_service_get_domain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_domain_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_domain_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_genetic_code_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_genetic_code_args.prototype = {};
taxon.thrift_service_get_genetic_code_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_genetic_code_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_genetic_code_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_genetic_code_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_genetic_code_result.prototype = {};
taxon.thrift_service_get_genetic_code_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_genetic_code_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_genetic_code_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_aliases_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_aliases_args.prototype = {};
taxon.thrift_service_get_aliases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_aliases_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_aliases_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_aliases_result = function(args) {
  this.success = null;
  this.generic_exception = null;
  this.authorization_exception = null;
  this.authentication_exception = null;
  this.reference_exception = null;
  this.attribute_exception = null;
  this.type_exception = null;
  if (args instanceof taxon.ServiceException) {
    this.generic_exception = args;
    return;
  }
  if (args instanceof taxon.AuthorizationException) {
    this.authorization_exception = args;
    return;
  }
  if (args instanceof taxon.AuthenticationException) {
    this.authentication_exception = args;
    return;
  }
  if (args instanceof taxon.ObjectReferenceException) {
    this.reference_exception = args;
    return;
  }
  if (args instanceof taxon.AttributeException) {
    this.attribute_exception = args;
    return;
  }
  if (args instanceof taxon.TypeException) {
    this.type_exception = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.generic_exception !== undefined) {
      this.generic_exception = args.generic_exception;
    }
    if (args.authorization_exception !== undefined) {
      this.authorization_exception = args.authorization_exception;
    }
    if (args.authentication_exception !== undefined) {
      this.authentication_exception = args.authentication_exception;
    }
    if (args.reference_exception !== undefined) {
      this.reference_exception = args.reference_exception;
    }
    if (args.attribute_exception !== undefined) {
      this.attribute_exception = args.attribute_exception;
    }
    if (args.type_exception !== undefined) {
      this.type_exception = args.type_exception;
    }
  }
};
taxon.thrift_service_get_aliases_result.prototype = {};
taxon.thrift_service_get_aliases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.success = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = input.readString().value;
          this.success.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.generic_exception = new taxon.ServiceException();
        this.generic_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorization_exception = new taxon.AuthorizationException();
        this.authorization_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.authentication_exception = new taxon.AuthenticationException();
        this.authentication_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference_exception = new taxon.ObjectReferenceException();
        this.reference_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute_exception = new taxon.AttributeException();
        this.attribute_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.type_exception = new taxon.TypeException();
        this.type_exception.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_aliases_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_aliases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter107 in this.success)
    {
      if (this.success.hasOwnProperty(iter107))
      {
        iter107 = this.success[iter107];
        output.writeString(iter107);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.generic_exception !== null && this.generic_exception !== undefined) {
    output.writeFieldBegin('generic_exception', Thrift.Type.STRUCT, 1);
    this.generic_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authorization_exception !== null && this.authorization_exception !== undefined) {
    output.writeFieldBegin('authorization_exception', Thrift.Type.STRUCT, 2);
    this.authorization_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.authentication_exception !== null && this.authentication_exception !== undefined) {
    output.writeFieldBegin('authentication_exception', Thrift.Type.STRUCT, 3);
    this.authentication_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.reference_exception !== null && this.reference_exception !== undefined) {
    output.writeFieldBegin('reference_exception', Thrift.Type.STRUCT, 4);
    this.reference_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.attribute_exception !== null && this.attribute_exception !== undefined) {
    output.writeFieldBegin('attribute_exception', Thrift.Type.STRUCT, 5);
    this.attribute_exception.write(output);
    output.writeFieldEnd();
  }
  if (this.type_exception !== null && this.type_exception !== undefined) {
    output.writeFieldBegin('type_exception', Thrift.Type.STRUCT, 6);
    this.type_exception.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_serviceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
taxon.thrift_serviceClient.prototype = {};
taxon.thrift_serviceClient.prototype.get_parent = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_parent(token, ref);
    return this.recv_get_parent();
  } else {
    var postData = this.send_get_parent(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_parent);
  }
};

taxon.thrift_serviceClient.prototype.send_get_parent = function(token, ref, callback) {
  this.output.writeMessageBegin('get_parent', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_parent_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_parent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_parent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_parent failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_children = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_children(token, ref);
    return this.recv_get_children();
  } else {
    var postData = this.send_get_children(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_children);
  }
};

taxon.thrift_serviceClient.prototype.send_get_children = function(token, ref, callback) {
  this.output.writeMessageBegin('get_children', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_children_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_children = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_children_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_children failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_genome_annotations = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_genome_annotations(token, ref);
    return this.recv_get_genome_annotations();
  } else {
    var postData = this.send_get_genome_annotations(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_genome_annotations);
  }
};

taxon.thrift_serviceClient.prototype.send_get_genome_annotations = function(token, ref, callback) {
  this.output.writeMessageBegin('get_genome_annotations', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_genome_annotations_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_genome_annotations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_genome_annotations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_genome_annotations failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_scientific_lineage = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_scientific_lineage(token, ref);
    return this.recv_get_scientific_lineage();
  } else {
    var postData = this.send_get_scientific_lineage(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_scientific_lineage);
  }
};

taxon.thrift_serviceClient.prototype.send_get_scientific_lineage = function(token, ref, callback) {
  this.output.writeMessageBegin('get_scientific_lineage', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_scientific_lineage_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_scientific_lineage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_scientific_lineage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_scientific_lineage failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_scientific_name = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_scientific_name(token, ref);
    return this.recv_get_scientific_name();
  } else {
    var postData = this.send_get_scientific_name(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_scientific_name);
  }
};

taxon.thrift_serviceClient.prototype.send_get_scientific_name = function(token, ref, callback) {
  this.output.writeMessageBegin('get_scientific_name', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_scientific_name_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_scientific_name = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_scientific_name_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_scientific_name failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_taxonomic_id = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_taxonomic_id(token, ref);
    return this.recv_get_taxonomic_id();
  } else {
    var postData = this.send_get_taxonomic_id(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_taxonomic_id);
  }
};

taxon.thrift_serviceClient.prototype.send_get_taxonomic_id = function(token, ref, callback) {
  this.output.writeMessageBegin('get_taxonomic_id', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_taxonomic_id_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_taxonomic_id = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_taxonomic_id_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_taxonomic_id failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_kingdom = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_kingdom(token, ref);
    return this.recv_get_kingdom();
  } else {
    var postData = this.send_get_kingdom(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_kingdom);
  }
};

taxon.thrift_serviceClient.prototype.send_get_kingdom = function(token, ref, callback) {
  this.output.writeMessageBegin('get_kingdom', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_kingdom_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_kingdom = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_kingdom_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_kingdom failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_domain = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_domain(token, ref);
    return this.recv_get_domain();
  } else {
    var postData = this.send_get_domain(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_domain);
  }
};

taxon.thrift_serviceClient.prototype.send_get_domain = function(token, ref, callback) {
  this.output.writeMessageBegin('get_domain', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_domain_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_domain = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_domain_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_domain failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_genetic_code = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_genetic_code(token, ref);
    return this.recv_get_genetic_code();
  } else {
    var postData = this.send_get_genetic_code(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_genetic_code);
  }
};

taxon.thrift_serviceClient.prototype.send_get_genetic_code = function(token, ref, callback) {
  this.output.writeMessageBegin('get_genetic_code', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_genetic_code_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_genetic_code = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_genetic_code_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_genetic_code failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_aliases = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_aliases(token, ref);
    return this.recv_get_aliases();
  } else {
    var postData = this.send_get_aliases(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_aliases);
  }
};

taxon.thrift_serviceClient.prototype.send_get_aliases = function(token, ref, callback) {
  this.output.writeMessageBegin('get_aliases', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_aliases_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_aliases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_aliases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.generic_exception) {
    throw result.generic_exception;
  }
  if (null !== result.authorization_exception) {
    throw result.authorization_exception;
  }
  if (null !== result.authentication_exception) {
    throw result.authentication_exception;
  }
  if (null !== result.reference_exception) {
    throw result.reference_exception;
  }
  if (null !== result.attribute_exception) {
    throw result.attribute_exception;
  }
  if (null !== result.type_exception) {
    throw result.type_exception;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_aliases failed: unknown result';
};
